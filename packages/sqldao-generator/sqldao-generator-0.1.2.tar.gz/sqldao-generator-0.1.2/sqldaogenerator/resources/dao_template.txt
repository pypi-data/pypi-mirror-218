"""This file is generated by sqldao-generator; don't modify anything. If you need to do it, you should create another class."""
from {base_dao_package}.{base_dao_name} import {base_dao_name}
from {entity_package}.{entity_name} import {entity_name}
from sqldaogenerator.common.Criterion import Criterion
from sqldaogenerator.common.TransactionManager import transactional


class {entity_name}Dao({base_dao_name}):

    def select_{entity_variable}(self, criterion: Criterion) -> tuple[list[{entity_name}], int]:
        with self.new_transaction() as session:
            criterion_list = criterion.to_list()
            page = criterion.page
            orders = page.order_by.split(' ')
            query = session.query({entity_name}).filter(*criterion_list).order_by(eval(f"{entity_name}.{{orders[0]}}.{{orders[1]}}()"))
            total = None
            if page.page_no is not None and page.page_size is not None:
                query = query.offset((page.page_no - 1) * page.page_size).limit(page.page_size)
                total = session.query({entity_name}).filter(*criterion_list).count()
            entities = query.all()
        return entities, len(entities) if total is None else total

    @transactional
    def insert_{entity_variable}(self, criterion: Criterion):
        session = self.get_transaction()
        entity = {entity_name}(**criterion.values)
        session.add(entity)
        session.flush()
        session.refresh(entity)
        session.expunge(entity)
        return entity

    @transactional
    def update_{entity_variable}(self, criterion: Criterion):
        criterion_list = criterion.to_list()
        assert criterion_list is not None and len(criterion_list) > 0, 'Must have at least one condition in the update.'
        session = self.get_transaction()
        entities = session.query({entity_name}).filter(*criterion_list).all()
        for entity in entities:
            for key, value in criterion.items():
                exec(f"entity.{{key}}=value")

    @transactional
    def delete_{entity_variable}(self, criterion: Criterion):
        criterion_list = criterion.to_list()
        assert criterion_list is not None and len(criterion_list) > 0, 'Must have at least one condition in the delete.'
        session = self.get_transaction()
        entities = session.query({entity_name}).filter(*criterion_list).all()
        for entity in entities:
            session.delete(entity)


{entity_variable}_dao = {entity_name}Dao()
