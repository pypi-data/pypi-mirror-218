# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx
import pydantic

from ...core.api_error import ApiError
from ...errors.unprocessable_entity_error import UnprocessableEntityError
from ...types.http_validation_error import HttpValidationError
from ...types.model_dto import ModelDto
from ...types.models_response_dto import ModelsResponseDto


class ModelsClient:
    def __init__(self, *, environment: str):
        self._environment = environment

    def get(self) -> ModelsResponseDto:
        _response = httpx.request("GET", urllib.parse.urljoin(f"{self._environment}/", "api/models"), timeout=60)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ModelsResponseDto, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_by_name(self, name: typing.Any) -> ModelDto:
        _response = httpx.request("GET", urllib.parse.urljoin(f"{self._environment}/", f"api/model/{name}"), timeout=60)
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ModelDto, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncModelsClient:
    def __init__(self, *, environment: str):
        self._environment = environment

    async def get(self) -> ModelsResponseDto:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET", urllib.parse.urljoin(f"{self._environment}/", "api/models"), timeout=60
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ModelsResponseDto, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_by_name(self, name: typing.Any) -> ModelDto:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET", urllib.parse.urljoin(f"{self._environment}/", f"api/model/{name}"), timeout=60
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ModelDto, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(HttpValidationError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
