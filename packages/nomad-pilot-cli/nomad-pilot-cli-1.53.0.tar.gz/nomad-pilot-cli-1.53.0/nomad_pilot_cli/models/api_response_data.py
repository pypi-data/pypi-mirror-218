# coding: utf-8

"""
    Nomad Pilot

    This is the API descriptor for the Nomad Pilot API, responsible for shipping and logistics processing. Developed by [Samarkand Global](https://www.samarkand.global/) in partnership with [SF Express](https://www.sf-express.com/), [eSinotrans](http://air.esinotrans.com/), [sto](http://sto-express.co.uk/). Read the documentation online at [Nomad API Suite](https://api.samarkand.io/). - Install for node with `npm install nomad_pilot_cli` - Install for python with `pip install nomad-pilot-cli` - Install for Maven users `groupId, com.gitlab.samarkand-nomad; artifactId, nomad-pilot-cli`  # noqa: E501

    The version of the OpenAPI document: 1.53.0
    Contact: paul@samarkand.global
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from nomad_pilot_cli.configuration import Configuration


class ApiResponseData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'shipment_id': 'str',
        'scan_form_id': 'str',
        'scan_form_url': 'str',
        'tracking_reference': 'str',
        'waybill_id': 'str',
        'order_sn': 'str',
        'order_ref': 'str',
        'seller_order_ref': 'str',
        'domestic_delivery_company': 'str',
        'delivery_status': 'DeliveryStatus',
        'delivery_note': 'str',
        'delivery_slip_url': 'str',
        'tracking_url': 'str',
        'check_points': 'list[str]',
        'weight_failed': 'bool',
        'error_code': 'str',
        'error_message': 'str'
    }

    attribute_map = {
        'shipment_id': 'shipmentId',
        'scan_form_id': 'scanFormId',
        'scan_form_url': 'scanFormUrl',
        'tracking_reference': 'trackingReference',
        'waybill_id': 'waybillId',
        'order_sn': 'orderSn',
        'order_ref': 'orderRef',
        'seller_order_ref': 'sellerOrderRef',
        'domestic_delivery_company': 'domesticDeliveryCompany',
        'delivery_status': 'deliveryStatus',
        'delivery_note': 'deliveryNote',
        'delivery_slip_url': 'deliverySlipUrl',
        'tracking_url': 'trackingUrl',
        'check_points': 'checkPoints',
        'weight_failed': 'weightFailed',
        'error_code': 'errorCode',
        'error_message': 'errorMessage'
    }

    def __init__(self, shipment_id=None, scan_form_id=None, scan_form_url=None, tracking_reference=None, waybill_id=None, order_sn=None, order_ref=None, seller_order_ref=None, domestic_delivery_company=None, delivery_status=None, delivery_note=None, delivery_slip_url=None, tracking_url=None, check_points=None, weight_failed=False, error_code=None, error_message=None, local_vars_configuration=None):  # noqa: E501
        """ApiResponseData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._shipment_id = None
        self._scan_form_id = None
        self._scan_form_url = None
        self._tracking_reference = None
        self._waybill_id = None
        self._order_sn = None
        self._order_ref = None
        self._seller_order_ref = None
        self._domestic_delivery_company = None
        self._delivery_status = None
        self._delivery_note = None
        self._delivery_slip_url = None
        self._tracking_url = None
        self._check_points = None
        self._weight_failed = None
        self._error_code = None
        self._error_message = None
        self.discriminator = None

        if shipment_id is not None:
            self.shipment_id = shipment_id
        if scan_form_id is not None:
            self.scan_form_id = scan_form_id
        if scan_form_url is not None:
            self.scan_form_url = scan_form_url
        if tracking_reference is not None:
            self.tracking_reference = tracking_reference
        if waybill_id is not None:
            self.waybill_id = waybill_id
        if order_sn is not None:
            self.order_sn = order_sn
        if order_ref is not None:
            self.order_ref = order_ref
        if seller_order_ref is not None:
            self.seller_order_ref = seller_order_ref
        if domestic_delivery_company is not None:
            self.domestic_delivery_company = domestic_delivery_company
        if delivery_status is not None:
            self.delivery_status = delivery_status
        if delivery_note is not None:
            self.delivery_note = delivery_note
        if delivery_slip_url is not None:
            self.delivery_slip_url = delivery_slip_url
        if tracking_url is not None:
            self.tracking_url = tracking_url
        if check_points is not None:
            self.check_points = check_points
        if weight_failed is not None:
            self.weight_failed = weight_failed
        if error_code is not None:
            self.error_code = error_code
        if error_message is not None:
            self.error_message = error_message

    @property
    def shipment_id(self):
        """Gets the shipment_id of this ApiResponseData.  # noqa: E501


        :return: The shipment_id of this ApiResponseData.  # noqa: E501
        :rtype: str
        """
        return self._shipment_id

    @shipment_id.setter
    def shipment_id(self, shipment_id):
        """Sets the shipment_id of this ApiResponseData.


        :param shipment_id: The shipment_id of this ApiResponseData.  # noqa: E501
        :type: str
        """

        self._shipment_id = shipment_id

    @property
    def scan_form_id(self):
        """Gets the scan_form_id of this ApiResponseData.  # noqa: E501


        :return: The scan_form_id of this ApiResponseData.  # noqa: E501
        :rtype: str
        """
        return self._scan_form_id

    @scan_form_id.setter
    def scan_form_id(self, scan_form_id):
        """Sets the scan_form_id of this ApiResponseData.


        :param scan_form_id: The scan_form_id of this ApiResponseData.  # noqa: E501
        :type: str
        """

        self._scan_form_id = scan_form_id

    @property
    def scan_form_url(self):
        """Gets the scan_form_url of this ApiResponseData.  # noqa: E501


        :return: The scan_form_url of this ApiResponseData.  # noqa: E501
        :rtype: str
        """
        return self._scan_form_url

    @scan_form_url.setter
    def scan_form_url(self, scan_form_url):
        """Sets the scan_form_url of this ApiResponseData.


        :param scan_form_url: The scan_form_url of this ApiResponseData.  # noqa: E501
        :type: str
        """

        self._scan_form_url = scan_form_url

    @property
    def tracking_reference(self):
        """Gets the tracking_reference of this ApiResponseData.  # noqa: E501


        :return: The tracking_reference of this ApiResponseData.  # noqa: E501
        :rtype: str
        """
        return self._tracking_reference

    @tracking_reference.setter
    def tracking_reference(self, tracking_reference):
        """Sets the tracking_reference of this ApiResponseData.


        :param tracking_reference: The tracking_reference of this ApiResponseData.  # noqa: E501
        :type: str
        """

        self._tracking_reference = tracking_reference

    @property
    def waybill_id(self):
        """Gets the waybill_id of this ApiResponseData.  # noqa: E501

        Logistics company waybill no.  # noqa: E501

        :return: The waybill_id of this ApiResponseData.  # noqa: E501
        :rtype: str
        """
        return self._waybill_id

    @waybill_id.setter
    def waybill_id(self, waybill_id):
        """Sets the waybill_id of this ApiResponseData.

        Logistics company waybill no.  # noqa: E501

        :param waybill_id: The waybill_id of this ApiResponseData.  # noqa: E501
        :type: str
        """

        self._waybill_id = waybill_id

    @property
    def order_sn(self):
        """Gets the order_sn of this ApiResponseData.  # noqa: E501

        Deprecated. Replaced by 'orderRef'.  # noqa: E501

        :return: The order_sn of this ApiResponseData.  # noqa: E501
        :rtype: str
        """
        return self._order_sn

    @order_sn.setter
    def order_sn(self, order_sn):
        """Sets the order_sn of this ApiResponseData.

        Deprecated. Replaced by 'orderRef'.  # noqa: E501

        :param order_sn: The order_sn of this ApiResponseData.  # noqa: E501
        :type: str
        """

        self._order_sn = order_sn

    @property
    def order_ref(self):
        """Gets the order_ref of this ApiResponseData.  # noqa: E501

        Order reference number. Default is from Odoo.  # noqa: E501

        :return: The order_ref of this ApiResponseData.  # noqa: E501
        :rtype: str
        """
        return self._order_ref

    @order_ref.setter
    def order_ref(self, order_ref):
        """Sets the order_ref of this ApiResponseData.

        Order reference number. Default is from Odoo.  # noqa: E501

        :param order_ref: The order_ref of this ApiResponseData.  # noqa: E501
        :type: str
        """

        self._order_ref = order_ref

    @property
    def seller_order_ref(self):
        """Gets the seller_order_ref of this ApiResponseData.  # noqa: E501

        Order reference number. Also could be from retailers, e.g. Youzan.  # noqa: E501

        :return: The seller_order_ref of this ApiResponseData.  # noqa: E501
        :rtype: str
        """
        return self._seller_order_ref

    @seller_order_ref.setter
    def seller_order_ref(self, seller_order_ref):
        """Sets the seller_order_ref of this ApiResponseData.

        Order reference number. Also could be from retailers, e.g. Youzan.  # noqa: E501

        :param seller_order_ref: The seller_order_ref of this ApiResponseData.  # noqa: E501
        :type: str
        """

        self._seller_order_ref = seller_order_ref

    @property
    def domestic_delivery_company(self):
        """Gets the domestic_delivery_company of this ApiResponseData.  # noqa: E501

        the domestic delivery vender for sinotrans  # noqa: E501

        :return: The domestic_delivery_company of this ApiResponseData.  # noqa: E501
        :rtype: str
        """
        return self._domestic_delivery_company

    @domestic_delivery_company.setter
    def domestic_delivery_company(self, domestic_delivery_company):
        """Sets the domestic_delivery_company of this ApiResponseData.

        the domestic delivery vender for sinotrans  # noqa: E501

        :param domestic_delivery_company: The domestic_delivery_company of this ApiResponseData.  # noqa: E501
        :type: str
        """

        self._domestic_delivery_company = domestic_delivery_company

    @property
    def delivery_status(self):
        """Gets the delivery_status of this ApiResponseData.  # noqa: E501


        :return: The delivery_status of this ApiResponseData.  # noqa: E501
        :rtype: DeliveryStatus
        """
        return self._delivery_status

    @delivery_status.setter
    def delivery_status(self, delivery_status):
        """Sets the delivery_status of this ApiResponseData.


        :param delivery_status: The delivery_status of this ApiResponseData.  # noqa: E501
        :type: DeliveryStatus
        """

        self._delivery_status = delivery_status

    @property
    def delivery_note(self):
        """Gets the delivery_note of this ApiResponseData.  # noqa: E501

        A note marked by the carrier, could be changed at any time.  # noqa: E501

        :return: The delivery_note of this ApiResponseData.  # noqa: E501
        :rtype: str
        """
        return self._delivery_note

    @delivery_note.setter
    def delivery_note(self, delivery_note):
        """Sets the delivery_note of this ApiResponseData.

        A note marked by the carrier, could be changed at any time.  # noqa: E501

        :param delivery_note: The delivery_note of this ApiResponseData.  # noqa: E501
        :type: str
        """

        self._delivery_note = delivery_note

    @property
    def delivery_slip_url(self):
        """Gets the delivery_slip_url of this ApiResponseData.  # noqa: E501

        The URL of delivery slip.  # noqa: E501

        :return: The delivery_slip_url of this ApiResponseData.  # noqa: E501
        :rtype: str
        """
        return self._delivery_slip_url

    @delivery_slip_url.setter
    def delivery_slip_url(self, delivery_slip_url):
        """Sets the delivery_slip_url of this ApiResponseData.

        The URL of delivery slip.  # noqa: E501

        :param delivery_slip_url: The delivery_slip_url of this ApiResponseData.  # noqa: E501
        :type: str
        """

        self._delivery_slip_url = delivery_slip_url

    @property
    def tracking_url(self):
        """Gets the tracking_url of this ApiResponseData.  # noqa: E501

        The URL of waybill tracking.  # noqa: E501

        :return: The tracking_url of this ApiResponseData.  # noqa: E501
        :rtype: str
        """
        return self._tracking_url

    @tracking_url.setter
    def tracking_url(self, tracking_url):
        """Sets the tracking_url of this ApiResponseData.

        The URL of waybill tracking.  # noqa: E501

        :param tracking_url: The tracking_url of this ApiResponseData.  # noqa: E501
        :type: str
        """

        self._tracking_url = tracking_url

    @property
    def check_points(self):
        """Gets the check_points of this ApiResponseData.  # noqa: E501

        The details of express checkpoints.  # noqa: E501

        :return: The check_points of this ApiResponseData.  # noqa: E501
        :rtype: list[str]
        """
        return self._check_points

    @check_points.setter
    def check_points(self, check_points):
        """Sets the check_points of this ApiResponseData.

        The details of express checkpoints.  # noqa: E501

        :param check_points: The check_points of this ApiResponseData.  # noqa: E501
        :type: list[str]
        """

        self._check_points = check_points

    @property
    def weight_failed(self):
        """Gets the weight_failed of this ApiResponseData.  # noqa: E501

        Comparison of gross weight with expected weight(the sum of net weight of items * 1.2 + 1)  # noqa: E501

        :return: The weight_failed of this ApiResponseData.  # noqa: E501
        :rtype: bool
        """
        return self._weight_failed

    @weight_failed.setter
    def weight_failed(self, weight_failed):
        """Sets the weight_failed of this ApiResponseData.

        Comparison of gross weight with expected weight(the sum of net weight of items * 1.2 + 1)  # noqa: E501

        :param weight_failed: The weight_failed of this ApiResponseData.  # noqa: E501
        :type: bool
        """

        self._weight_failed = weight_failed

    @property
    def error_code(self):
        """Gets the error_code of this ApiResponseData.  # noqa: E501

        Error code, returning if waybill creation failed. Available codes which will be progressively clarified: PRODUCT_NOT_EXIST, ORDER_NOT_EXIST, AREA_RESTRICTED, PRODUCT_ERROR, CUSTOMER_ERROR, ADDRESS_ERROR, LOGISTIC_ERROR, OTHERS  # noqa: E501

        :return: The error_code of this ApiResponseData.  # noqa: E501
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this ApiResponseData.

        Error code, returning if waybill creation failed. Available codes which will be progressively clarified: PRODUCT_NOT_EXIST, ORDER_NOT_EXIST, AREA_RESTRICTED, PRODUCT_ERROR, CUSTOMER_ERROR, ADDRESS_ERROR, LOGISTIC_ERROR, OTHERS  # noqa: E501

        :param error_code: The error_code of this ApiResponseData.  # noqa: E501
        :type: str
        """

        self._error_code = error_code

    @property
    def error_message(self):
        """Gets the error_message of this ApiResponseData.  # noqa: E501

        Error message, which will be progressively clarified  # noqa: E501

        :return: The error_message of this ApiResponseData.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this ApiResponseData.

        Error message, which will be progressively clarified  # noqa: E501

        :param error_message: The error_message of this ApiResponseData.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiResponseData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApiResponseData):
            return True

        return self.to_dict() != other.to_dict()
