# coding: utf-8

"""
    Nomad Pilot

    This is the API descriptor for the Nomad Pilot API, responsible for shipping and logistics processing. Developed by [Samarkand Global](https://www.samarkand.global/) in partnership with [SF Express](https://www.sf-express.com/), [eSinotrans](http://air.esinotrans.com/), [sto](http://sto-express.co.uk/). Read the documentation online at [Nomad API Suite](https://api.samarkand.io/). - Install for node with `npm install nomad_pilot_cli` - Install for python with `pip install nomad-pilot-cli` - Install for Maven users `groupId, com.gitlab.samarkand-nomad; artifactId, nomad-pilot-cli`  # noqa: E501

    The version of the OpenAPI document: 1.53.0
    Contact: paul@samarkand.global
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from nomad_pilot_cli.configuration import Configuration


class InventoryPurchaseItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'goods_no': 'str',
        'goods_name': 'str',
        'goods_status': 'str',
        'serial_no': 'str',
        'num_application': 'str',
        'un_qualified_qty': 'str',
        'qualified_qty': 'str',
        'real_instore_qty': 'str',
        'short_qty': 'str',
        'damaged_qty': 'str',
        'empty_qty': 'str',
        'expired_qty': 'str',
        'other_qty': 'str',
        'goods_damaged_qty': 'str',
        'deformed_qty': 'str',
        'error_qty': 'str',
        'excess_qty': 'str',
        'barcode_scan_fail_qty': 'str',
        'expiration_date_error_qty': 'str',
        'barcode_error_qty': 'str',
        'pollution_qty': 'str',
        'mark_unclear_qty': 'str',
        'remark': 'str',
        'order_line': 'str',
        'real_goods_status': 'str',
        'real_goods_level': 'str',
        'check_result_str': 'str',
        'err_reason': 'str',
        'qc_time_str': 'str',
        'batch_code': 'str',
        'isv_goods_no': 'str'
    }

    attribute_map = {
        'goods_no': 'goodsNo',
        'goods_name': 'goodsName',
        'goods_status': 'goodsStatus',
        'serial_no': 'serialNo',
        'num_application': 'numApplication',
        'un_qualified_qty': 'unQualifiedQty',
        'qualified_qty': 'qualifiedQty',
        'real_instore_qty': 'realInstoreQty',
        'short_qty': 'shortQty',
        'damaged_qty': 'damagedQty',
        'empty_qty': 'emptyQty',
        'expired_qty': 'expiredQty',
        'other_qty': 'otherQty',
        'goods_damaged_qty': 'goodsDamagedQty',
        'deformed_qty': 'deformedQty',
        'error_qty': 'errorQty',
        'excess_qty': 'excessQty',
        'barcode_scan_fail_qty': 'barcodeScanFailQty',
        'expiration_date_error_qty': 'expirationDateErrorQty',
        'barcode_error_qty': 'barcodeErrorQty',
        'pollution_qty': 'pollutionQty',
        'mark_unclear_qty': 'markUnclearQty',
        'remark': 'remark',
        'order_line': 'orderLine',
        'real_goods_status': 'realGoodsStatus',
        'real_goods_level': 'realGoodsLevel',
        'check_result_str': 'checkResultStr',
        'err_reason': 'errReason',
        'qc_time_str': 'qcTimeStr',
        'batch_code': 'batchCode',
        'isv_goods_no': 'isvGoodsNo'
    }

    def __init__(self, goods_no=None, goods_name=None, goods_status=None, serial_no=None, num_application=None, un_qualified_qty=None, qualified_qty=None, real_instore_qty=None, short_qty=None, damaged_qty=None, empty_qty=None, expired_qty=None, other_qty=None, goods_damaged_qty=None, deformed_qty=None, error_qty=None, excess_qty=None, barcode_scan_fail_qty=None, expiration_date_error_qty=None, barcode_error_qty=None, pollution_qty=None, mark_unclear_qty=None, remark=None, order_line=None, real_goods_status=None, real_goods_level=None, check_result_str=None, err_reason=None, qc_time_str=None, batch_code=None, isv_goods_no=None, local_vars_configuration=None):  # noqa: E501
        """InventoryPurchaseItem - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._goods_no = None
        self._goods_name = None
        self._goods_status = None
        self._serial_no = None
        self._num_application = None
        self._un_qualified_qty = None
        self._qualified_qty = None
        self._real_instore_qty = None
        self._short_qty = None
        self._damaged_qty = None
        self._empty_qty = None
        self._expired_qty = None
        self._other_qty = None
        self._goods_damaged_qty = None
        self._deformed_qty = None
        self._error_qty = None
        self._excess_qty = None
        self._barcode_scan_fail_qty = None
        self._expiration_date_error_qty = None
        self._barcode_error_qty = None
        self._pollution_qty = None
        self._mark_unclear_qty = None
        self._remark = None
        self._order_line = None
        self._real_goods_status = None
        self._real_goods_level = None
        self._check_result_str = None
        self._err_reason = None
        self._qc_time_str = None
        self._batch_code = None
        self._isv_goods_no = None
        self.discriminator = None

        self.goods_no = goods_no
        if goods_name is not None:
            self.goods_name = goods_name
        if goods_status is not None:
            self.goods_status = goods_status
        if serial_no is not None:
            self.serial_no = serial_no
        if num_application is not None:
            self.num_application = num_application
        if un_qualified_qty is not None:
            self.un_qualified_qty = un_qualified_qty
        if qualified_qty is not None:
            self.qualified_qty = qualified_qty
        if real_instore_qty is not None:
            self.real_instore_qty = real_instore_qty
        if short_qty is not None:
            self.short_qty = short_qty
        if damaged_qty is not None:
            self.damaged_qty = damaged_qty
        if empty_qty is not None:
            self.empty_qty = empty_qty
        if expired_qty is not None:
            self.expired_qty = expired_qty
        if other_qty is not None:
            self.other_qty = other_qty
        if goods_damaged_qty is not None:
            self.goods_damaged_qty = goods_damaged_qty
        if deformed_qty is not None:
            self.deformed_qty = deformed_qty
        if error_qty is not None:
            self.error_qty = error_qty
        if excess_qty is not None:
            self.excess_qty = excess_qty
        if barcode_scan_fail_qty is not None:
            self.barcode_scan_fail_qty = barcode_scan_fail_qty
        if expiration_date_error_qty is not None:
            self.expiration_date_error_qty = expiration_date_error_qty
        if barcode_error_qty is not None:
            self.barcode_error_qty = barcode_error_qty
        if pollution_qty is not None:
            self.pollution_qty = pollution_qty
        if mark_unclear_qty is not None:
            self.mark_unclear_qty = mark_unclear_qty
        if remark is not None:
            self.remark = remark
        if order_line is not None:
            self.order_line = order_line
        if real_goods_status is not None:
            self.real_goods_status = real_goods_status
        if real_goods_level is not None:
            self.real_goods_level = real_goods_level
        if check_result_str is not None:
            self.check_result_str = check_result_str
        if err_reason is not None:
            self.err_reason = err_reason
        if qc_time_str is not None:
            self.qc_time_str = qc_time_str
        if batch_code is not None:
            self.batch_code = batch_code
        if isv_goods_no is not None:
            self.isv_goods_no = isv_goods_no

    @property
    def goods_no(self):
        """Gets the goods_no of this InventoryPurchaseItem.  # noqa: E501


        :return: The goods_no of this InventoryPurchaseItem.  # noqa: E501
        :rtype: str
        """
        return self._goods_no

    @goods_no.setter
    def goods_no(self, goods_no):
        """Sets the goods_no of this InventoryPurchaseItem.


        :param goods_no: The goods_no of this InventoryPurchaseItem.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and goods_no is None:  # noqa: E501
            raise ValueError("Invalid value for `goods_no`, must not be `None`")  # noqa: E501

        self._goods_no = goods_no

    @property
    def goods_name(self):
        """Gets the goods_name of this InventoryPurchaseItem.  # noqa: E501


        :return: The goods_name of this InventoryPurchaseItem.  # noqa: E501
        :rtype: str
        """
        return self._goods_name

    @goods_name.setter
    def goods_name(self, goods_name):
        """Sets the goods_name of this InventoryPurchaseItem.


        :param goods_name: The goods_name of this InventoryPurchaseItem.  # noqa: E501
        :type: str
        """

        self._goods_name = goods_name

    @property
    def goods_status(self):
        """Gets the goods_status of this InventoryPurchaseItem.  # noqa: E501


        :return: The goods_status of this InventoryPurchaseItem.  # noqa: E501
        :rtype: str
        """
        return self._goods_status

    @goods_status.setter
    def goods_status(self, goods_status):
        """Sets the goods_status of this InventoryPurchaseItem.


        :param goods_status: The goods_status of this InventoryPurchaseItem.  # noqa: E501
        :type: str
        """

        self._goods_status = goods_status

    @property
    def serial_no(self):
        """Gets the serial_no of this InventoryPurchaseItem.  # noqa: E501


        :return: The serial_no of this InventoryPurchaseItem.  # noqa: E501
        :rtype: str
        """
        return self._serial_no

    @serial_no.setter
    def serial_no(self, serial_no):
        """Sets the serial_no of this InventoryPurchaseItem.


        :param serial_no: The serial_no of this InventoryPurchaseItem.  # noqa: E501
        :type: str
        """

        self._serial_no = serial_no

    @property
    def num_application(self):
        """Gets the num_application of this InventoryPurchaseItem.  # noqa: E501


        :return: The num_application of this InventoryPurchaseItem.  # noqa: E501
        :rtype: str
        """
        return self._num_application

    @num_application.setter
    def num_application(self, num_application):
        """Sets the num_application of this InventoryPurchaseItem.


        :param num_application: The num_application of this InventoryPurchaseItem.  # noqa: E501
        :type: str
        """

        self._num_application = num_application

    @property
    def un_qualified_qty(self):
        """Gets the un_qualified_qty of this InventoryPurchaseItem.  # noqa: E501


        :return: The un_qualified_qty of this InventoryPurchaseItem.  # noqa: E501
        :rtype: str
        """
        return self._un_qualified_qty

    @un_qualified_qty.setter
    def un_qualified_qty(self, un_qualified_qty):
        """Sets the un_qualified_qty of this InventoryPurchaseItem.


        :param un_qualified_qty: The un_qualified_qty of this InventoryPurchaseItem.  # noqa: E501
        :type: str
        """

        self._un_qualified_qty = un_qualified_qty

    @property
    def qualified_qty(self):
        """Gets the qualified_qty of this InventoryPurchaseItem.  # noqa: E501


        :return: The qualified_qty of this InventoryPurchaseItem.  # noqa: E501
        :rtype: str
        """
        return self._qualified_qty

    @qualified_qty.setter
    def qualified_qty(self, qualified_qty):
        """Sets the qualified_qty of this InventoryPurchaseItem.


        :param qualified_qty: The qualified_qty of this InventoryPurchaseItem.  # noqa: E501
        :type: str
        """

        self._qualified_qty = qualified_qty

    @property
    def real_instore_qty(self):
        """Gets the real_instore_qty of this InventoryPurchaseItem.  # noqa: E501


        :return: The real_instore_qty of this InventoryPurchaseItem.  # noqa: E501
        :rtype: str
        """
        return self._real_instore_qty

    @real_instore_qty.setter
    def real_instore_qty(self, real_instore_qty):
        """Sets the real_instore_qty of this InventoryPurchaseItem.


        :param real_instore_qty: The real_instore_qty of this InventoryPurchaseItem.  # noqa: E501
        :type: str
        """

        self._real_instore_qty = real_instore_qty

    @property
    def short_qty(self):
        """Gets the short_qty of this InventoryPurchaseItem.  # noqa: E501


        :return: The short_qty of this InventoryPurchaseItem.  # noqa: E501
        :rtype: str
        """
        return self._short_qty

    @short_qty.setter
    def short_qty(self, short_qty):
        """Sets the short_qty of this InventoryPurchaseItem.


        :param short_qty: The short_qty of this InventoryPurchaseItem.  # noqa: E501
        :type: str
        """

        self._short_qty = short_qty

    @property
    def damaged_qty(self):
        """Gets the damaged_qty of this InventoryPurchaseItem.  # noqa: E501


        :return: The damaged_qty of this InventoryPurchaseItem.  # noqa: E501
        :rtype: str
        """
        return self._damaged_qty

    @damaged_qty.setter
    def damaged_qty(self, damaged_qty):
        """Sets the damaged_qty of this InventoryPurchaseItem.


        :param damaged_qty: The damaged_qty of this InventoryPurchaseItem.  # noqa: E501
        :type: str
        """

        self._damaged_qty = damaged_qty

    @property
    def empty_qty(self):
        """Gets the empty_qty of this InventoryPurchaseItem.  # noqa: E501


        :return: The empty_qty of this InventoryPurchaseItem.  # noqa: E501
        :rtype: str
        """
        return self._empty_qty

    @empty_qty.setter
    def empty_qty(self, empty_qty):
        """Sets the empty_qty of this InventoryPurchaseItem.


        :param empty_qty: The empty_qty of this InventoryPurchaseItem.  # noqa: E501
        :type: str
        """

        self._empty_qty = empty_qty

    @property
    def expired_qty(self):
        """Gets the expired_qty of this InventoryPurchaseItem.  # noqa: E501


        :return: The expired_qty of this InventoryPurchaseItem.  # noqa: E501
        :rtype: str
        """
        return self._expired_qty

    @expired_qty.setter
    def expired_qty(self, expired_qty):
        """Sets the expired_qty of this InventoryPurchaseItem.


        :param expired_qty: The expired_qty of this InventoryPurchaseItem.  # noqa: E501
        :type: str
        """

        self._expired_qty = expired_qty

    @property
    def other_qty(self):
        """Gets the other_qty of this InventoryPurchaseItem.  # noqa: E501


        :return: The other_qty of this InventoryPurchaseItem.  # noqa: E501
        :rtype: str
        """
        return self._other_qty

    @other_qty.setter
    def other_qty(self, other_qty):
        """Sets the other_qty of this InventoryPurchaseItem.


        :param other_qty: The other_qty of this InventoryPurchaseItem.  # noqa: E501
        :type: str
        """

        self._other_qty = other_qty

    @property
    def goods_damaged_qty(self):
        """Gets the goods_damaged_qty of this InventoryPurchaseItem.  # noqa: E501


        :return: The goods_damaged_qty of this InventoryPurchaseItem.  # noqa: E501
        :rtype: str
        """
        return self._goods_damaged_qty

    @goods_damaged_qty.setter
    def goods_damaged_qty(self, goods_damaged_qty):
        """Sets the goods_damaged_qty of this InventoryPurchaseItem.


        :param goods_damaged_qty: The goods_damaged_qty of this InventoryPurchaseItem.  # noqa: E501
        :type: str
        """

        self._goods_damaged_qty = goods_damaged_qty

    @property
    def deformed_qty(self):
        """Gets the deformed_qty of this InventoryPurchaseItem.  # noqa: E501


        :return: The deformed_qty of this InventoryPurchaseItem.  # noqa: E501
        :rtype: str
        """
        return self._deformed_qty

    @deformed_qty.setter
    def deformed_qty(self, deformed_qty):
        """Sets the deformed_qty of this InventoryPurchaseItem.


        :param deformed_qty: The deformed_qty of this InventoryPurchaseItem.  # noqa: E501
        :type: str
        """

        self._deformed_qty = deformed_qty

    @property
    def error_qty(self):
        """Gets the error_qty of this InventoryPurchaseItem.  # noqa: E501


        :return: The error_qty of this InventoryPurchaseItem.  # noqa: E501
        :rtype: str
        """
        return self._error_qty

    @error_qty.setter
    def error_qty(self, error_qty):
        """Sets the error_qty of this InventoryPurchaseItem.


        :param error_qty: The error_qty of this InventoryPurchaseItem.  # noqa: E501
        :type: str
        """

        self._error_qty = error_qty

    @property
    def excess_qty(self):
        """Gets the excess_qty of this InventoryPurchaseItem.  # noqa: E501


        :return: The excess_qty of this InventoryPurchaseItem.  # noqa: E501
        :rtype: str
        """
        return self._excess_qty

    @excess_qty.setter
    def excess_qty(self, excess_qty):
        """Sets the excess_qty of this InventoryPurchaseItem.


        :param excess_qty: The excess_qty of this InventoryPurchaseItem.  # noqa: E501
        :type: str
        """

        self._excess_qty = excess_qty

    @property
    def barcode_scan_fail_qty(self):
        """Gets the barcode_scan_fail_qty of this InventoryPurchaseItem.  # noqa: E501


        :return: The barcode_scan_fail_qty of this InventoryPurchaseItem.  # noqa: E501
        :rtype: str
        """
        return self._barcode_scan_fail_qty

    @barcode_scan_fail_qty.setter
    def barcode_scan_fail_qty(self, barcode_scan_fail_qty):
        """Sets the barcode_scan_fail_qty of this InventoryPurchaseItem.


        :param barcode_scan_fail_qty: The barcode_scan_fail_qty of this InventoryPurchaseItem.  # noqa: E501
        :type: str
        """

        self._barcode_scan_fail_qty = barcode_scan_fail_qty

    @property
    def expiration_date_error_qty(self):
        """Gets the expiration_date_error_qty of this InventoryPurchaseItem.  # noqa: E501


        :return: The expiration_date_error_qty of this InventoryPurchaseItem.  # noqa: E501
        :rtype: str
        """
        return self._expiration_date_error_qty

    @expiration_date_error_qty.setter
    def expiration_date_error_qty(self, expiration_date_error_qty):
        """Sets the expiration_date_error_qty of this InventoryPurchaseItem.


        :param expiration_date_error_qty: The expiration_date_error_qty of this InventoryPurchaseItem.  # noqa: E501
        :type: str
        """

        self._expiration_date_error_qty = expiration_date_error_qty

    @property
    def barcode_error_qty(self):
        """Gets the barcode_error_qty of this InventoryPurchaseItem.  # noqa: E501


        :return: The barcode_error_qty of this InventoryPurchaseItem.  # noqa: E501
        :rtype: str
        """
        return self._barcode_error_qty

    @barcode_error_qty.setter
    def barcode_error_qty(self, barcode_error_qty):
        """Sets the barcode_error_qty of this InventoryPurchaseItem.


        :param barcode_error_qty: The barcode_error_qty of this InventoryPurchaseItem.  # noqa: E501
        :type: str
        """

        self._barcode_error_qty = barcode_error_qty

    @property
    def pollution_qty(self):
        """Gets the pollution_qty of this InventoryPurchaseItem.  # noqa: E501


        :return: The pollution_qty of this InventoryPurchaseItem.  # noqa: E501
        :rtype: str
        """
        return self._pollution_qty

    @pollution_qty.setter
    def pollution_qty(self, pollution_qty):
        """Sets the pollution_qty of this InventoryPurchaseItem.


        :param pollution_qty: The pollution_qty of this InventoryPurchaseItem.  # noqa: E501
        :type: str
        """

        self._pollution_qty = pollution_qty

    @property
    def mark_unclear_qty(self):
        """Gets the mark_unclear_qty of this InventoryPurchaseItem.  # noqa: E501


        :return: The mark_unclear_qty of this InventoryPurchaseItem.  # noqa: E501
        :rtype: str
        """
        return self._mark_unclear_qty

    @mark_unclear_qty.setter
    def mark_unclear_qty(self, mark_unclear_qty):
        """Sets the mark_unclear_qty of this InventoryPurchaseItem.


        :param mark_unclear_qty: The mark_unclear_qty of this InventoryPurchaseItem.  # noqa: E501
        :type: str
        """

        self._mark_unclear_qty = mark_unclear_qty

    @property
    def remark(self):
        """Gets the remark of this InventoryPurchaseItem.  # noqa: E501


        :return: The remark of this InventoryPurchaseItem.  # noqa: E501
        :rtype: str
        """
        return self._remark

    @remark.setter
    def remark(self, remark):
        """Sets the remark of this InventoryPurchaseItem.


        :param remark: The remark of this InventoryPurchaseItem.  # noqa: E501
        :type: str
        """

        self._remark = remark

    @property
    def order_line(self):
        """Gets the order_line of this InventoryPurchaseItem.  # noqa: E501


        :return: The order_line of this InventoryPurchaseItem.  # noqa: E501
        :rtype: str
        """
        return self._order_line

    @order_line.setter
    def order_line(self, order_line):
        """Sets the order_line of this InventoryPurchaseItem.


        :param order_line: The order_line of this InventoryPurchaseItem.  # noqa: E501
        :type: str
        """

        self._order_line = order_line

    @property
    def real_goods_status(self):
        """Gets the real_goods_status of this InventoryPurchaseItem.  # noqa: E501


        :return: The real_goods_status of this InventoryPurchaseItem.  # noqa: E501
        :rtype: str
        """
        return self._real_goods_status

    @real_goods_status.setter
    def real_goods_status(self, real_goods_status):
        """Sets the real_goods_status of this InventoryPurchaseItem.


        :param real_goods_status: The real_goods_status of this InventoryPurchaseItem.  # noqa: E501
        :type: str
        """

        self._real_goods_status = real_goods_status

    @property
    def real_goods_level(self):
        """Gets the real_goods_level of this InventoryPurchaseItem.  # noqa: E501


        :return: The real_goods_level of this InventoryPurchaseItem.  # noqa: E501
        :rtype: str
        """
        return self._real_goods_level

    @real_goods_level.setter
    def real_goods_level(self, real_goods_level):
        """Sets the real_goods_level of this InventoryPurchaseItem.


        :param real_goods_level: The real_goods_level of this InventoryPurchaseItem.  # noqa: E501
        :type: str
        """

        self._real_goods_level = real_goods_level

    @property
    def check_result_str(self):
        """Gets the check_result_str of this InventoryPurchaseItem.  # noqa: E501


        :return: The check_result_str of this InventoryPurchaseItem.  # noqa: E501
        :rtype: str
        """
        return self._check_result_str

    @check_result_str.setter
    def check_result_str(self, check_result_str):
        """Sets the check_result_str of this InventoryPurchaseItem.


        :param check_result_str: The check_result_str of this InventoryPurchaseItem.  # noqa: E501
        :type: str
        """

        self._check_result_str = check_result_str

    @property
    def err_reason(self):
        """Gets the err_reason of this InventoryPurchaseItem.  # noqa: E501


        :return: The err_reason of this InventoryPurchaseItem.  # noqa: E501
        :rtype: str
        """
        return self._err_reason

    @err_reason.setter
    def err_reason(self, err_reason):
        """Sets the err_reason of this InventoryPurchaseItem.


        :param err_reason: The err_reason of this InventoryPurchaseItem.  # noqa: E501
        :type: str
        """

        self._err_reason = err_reason

    @property
    def qc_time_str(self):
        """Gets the qc_time_str of this InventoryPurchaseItem.  # noqa: E501


        :return: The qc_time_str of this InventoryPurchaseItem.  # noqa: E501
        :rtype: str
        """
        return self._qc_time_str

    @qc_time_str.setter
    def qc_time_str(self, qc_time_str):
        """Sets the qc_time_str of this InventoryPurchaseItem.


        :param qc_time_str: The qc_time_str of this InventoryPurchaseItem.  # noqa: E501
        :type: str
        """

        self._qc_time_str = qc_time_str

    @property
    def batch_code(self):
        """Gets the batch_code of this InventoryPurchaseItem.  # noqa: E501


        :return: The batch_code of this InventoryPurchaseItem.  # noqa: E501
        :rtype: str
        """
        return self._batch_code

    @batch_code.setter
    def batch_code(self, batch_code):
        """Sets the batch_code of this InventoryPurchaseItem.


        :param batch_code: The batch_code of this InventoryPurchaseItem.  # noqa: E501
        :type: str
        """

        self._batch_code = batch_code

    @property
    def isv_goods_no(self):
        """Gets the isv_goods_no of this InventoryPurchaseItem.  # noqa: E501


        :return: The isv_goods_no of this InventoryPurchaseItem.  # noqa: E501
        :rtype: str
        """
        return self._isv_goods_no

    @isv_goods_no.setter
    def isv_goods_no(self, isv_goods_no):
        """Sets the isv_goods_no of this InventoryPurchaseItem.


        :param isv_goods_no: The isv_goods_no of this InventoryPurchaseItem.  # noqa: E501
        :type: str
        """

        self._isv_goods_no = isv_goods_no

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InventoryPurchaseItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InventoryPurchaseItem):
            return True

        return self.to_dict() != other.to_dict()
