Metadata-Version: 2.1
Name: asset_extraction_framework
Version: 0.9.2
Summary: Extract multimedia assets from legacy software
Author: npjg
License: MIT License
        
        Copyright (c) 2022 Nathanael Gentry
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/npjg/asset_extraction_framework
Keywords: struct,reverse-engineering,self-document
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE

`assets` is a reverse-engineering framework for extracting multimedia assets from legacy software.

Unlike [`mrcrowbar`](https://github.com/moralrecordings/mrcrowbar) and other reverse-engineering packages, 
this library is not designed for editing data in-place. `assets` instead focuses on extraction. 

You write the code that converts the data from your application into a standard format (pixels and PCM audio). 
`assets` then provides the following:
 - A command-line extractor interface
 - Uses Pillow and ffmpeg to export images/audio in a wide variety of formats in various configurations.

For real-world examples, see my `assets`-based projects:
 - [Tonka](https://github.com/npjg/tonka)
 - ...and more coming soon!
