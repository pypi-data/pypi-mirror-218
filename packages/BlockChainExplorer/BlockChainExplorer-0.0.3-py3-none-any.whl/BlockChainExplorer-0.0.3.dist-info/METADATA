Metadata-Version: 2.1
Name: BlockChainExplorer
Version: 0.0.3
Summary: Simple package to access EVM blockchain explorers, currently supports Binance Smart Chain, Ethereum, Avalanche and Polygon
Author-email: ManiacalEngineer <unhfireboy@yahoo.com>
License: MIT License
        
        Copyright (c) 2023 Sean Bicknell
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
Project-URL: Homepage, https://github.com/ManicalEngineer/BlockChainExplorer
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE.txt
Requires-Dist: Requests (==2.31.0)

This package is a simple library to access the blockchain scanners for Ethereum, Binance Smart Chain, Polygon and Avalanche.

### getABI(self, address: str)
  Takes contract address as a string and returns the json of the ABI
### getBalance(self, address: str)
  Takes a single address as a string or a list of upto 20 addresses and returns the native token balance(s)
### getBlockByTimestamp(self, timestamp: int)
  Takes a unix timestamp as an int and turns the block number for that timestamp
### getContractCreation(self, address: str)
  Takes a single contract address as a string or a list of upto 5 contract addresses and returns the creator wallet and transaction hash as a list of dicts
### getInternalTransactionList(self, contract_address: str, address: str, start_block: int = 0, end_block: int = 99999999)
  Takes contract_address or wallet address as a string note - one needs to be set to None. Returns all the 'internal' transacations as a list of dicts
### getInternalTransactionsByTx(self, tx: str)
  Takes a transaction hash as a string and returns the internal transactions as a list of dicts
### getSource(self, address: str)
  Takes contract address as a string and returns the source code
### getTransactionList(self, contract_address: str, address: str, start_block: int = 0, end_block: int = 99999999)
  Takes contract_address or wallet address as a string note - one needs to be set to None. Returns all the 'normal' transacations as a list of dicts
### getTransactions(self, contract_address: str, address: str, start_block: int = 0, end_block: int = 99999999)
  Takes contract_address or wallet address as a string note - one needs to be set to None. Returns all the token transacations as a dict
