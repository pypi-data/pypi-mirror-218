{"version":3,"file":"lib_index_js-webpack_sharing_consume_default_jupyterlab_coreutils.c4c5385e7a8c0c90533a.js","mappings":"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","sources":["webpack://@aws/amazon-codeguru-extension/./style/icons/cg-icon.svg","webpack://@aws/amazon-codeguru-extension/./src/components/About.tsx","webpack://@aws/amazon-codeguru-extension/./src/components/CodeScanButton.tsx","webpack://@aws/amazon-codeguru-extension/./src/components/CodeScanErrorPopup.tsx","webpack://@aws/amazon-codeguru-extension/./src/components/CodeScanStatus.tsx","webpack://@aws/amazon-codeguru-extension/./src/constants/icons.ts","webpack://@aws/amazon-codeguru-extension/./src/constants/index.ts","webpack://@aws/amazon-codeguru-extension/./src/constants/policy.ts","webpack://@aws/amazon-codeguru-extension/./src/constants/region.ts","webpack://@aws/amazon-codeguru-extension/./src/index.ts","webpack://@aws/amazon-codeguru-extension/./src/utils/index.ts"],"sourcesContent":["export default \"<svg width=\\\"16\\\" height=\\\"17\\\" viewBox=\\\"0 0 16 17\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n<path d=\\\"M9.96047 14.861H6.11001C5.93183 14.861 5.84259 15.0765 5.96859 15.2025L6.7018 15.9357C6.73931 15.9732 6.79018 15.9943 6.84322 15.9943H9.22726C9.2803 15.9943 9.33118 15.9732 9.36868 15.9357L10.1019 15.2025C10.2279 15.0765 10.1387 14.861 9.96047 14.861Z\\\" stroke=\\\"var(--jp-ui-font-color0)\\\" stroke-width=\\\"0.7\\\"/>\\n<path d=\\\"M5.82716 13.8223H10.2433C10.3538 13.8223 10.4433 13.7327 10.4433 13.6223V11.5728C10.4433 11.5036 10.4789 11.44 10.5361 11.401C11.2203 10.9334 12.4264 9.65462 12.4264 7.77847C12.4264 5.32318 10.4433 3.34006 8.08246 3.34006C5.7216 3.34006 3.64404 4.85101 3.64404 7.77847C3.64404 9.97931 4.81158 11.0738 5.50089 11.4067C5.57562 11.4428 5.62716 11.5163 5.62716 11.5992V13.6223C5.62716 13.7327 5.71671 13.8223 5.82716 13.8223Z\\\" stroke=\\\"var(--jp-ui-font-color0)\\\" stroke-width=\\\"0.7\\\"/>\\n<line x1=\\\"13.4653\\\" y1=\\\"7.52457\\\" x2=\\\"15.1652\\\" y2=\\\"7.52457\\\" stroke=\\\"var(--jp-ui-font-color0)\\\" stroke-width=\\\"0.7\\\"/>\\n<line x1=\\\"12.0634\\\" y1=\\\"3.68832\\\" x2=\\\"13.0077\\\" y2=\\\"2.55511\\\" stroke=\\\"var(--jp-ui-font-color0)\\\" stroke-width=\\\"0.7\\\"/>\\n<line y1=\\\"-0.35\\\" x2=\\\"1.69982\\\" y2=\\\"-0.35\\\" transform=\\\"matrix(-1 0 0 1 2.69971 7.87457)\\\" stroke=\\\"var(--jp-ui-font-color0)\\\" stroke-width=\\\"0.7\\\"/>\\n<line y1=\\\"-0.35\\\" x2=\\\"1.47511\\\" y2=\\\"-0.35\\\" transform=\\\"matrix(-0.640184 -0.768221 -0.768221 0.640184 3.83301 3.91238)\\\" stroke=\\\"var(--jp-ui-font-color0)\\\" stroke-width=\\\"0.7\\\"/>\\n<line x1=\\\"8.33828\\\" y1=\\\"0.507812\\\" x2=\\\"8.33828\\\" y2=\\\"2.20763\\\" stroke=\\\"var(--jp-ui-font-color0)\\\" stroke-width=\\\"0.7\\\"/>\\n<path d=\\\"M8.17505 5.035L7.60844 10.5122\\\" stroke=\\\"var(--jp-ui-font-color0)\\\" stroke-width=\\\"0.7\\\"/>\\n<path d=\\\"M6.47721 6.73727L5.34399 7.87049L6.47721 9.0037\\\" stroke=\\\"var(--jp-ui-font-color0)\\\" stroke-width=\\\"0.7\\\"/>\\n<path d=\\\"M9.68783 6.73727L10.821 7.87049L9.68783 9.0037\\\" stroke=\\\"var(--jp-ui-font-color0)\\\" stroke-width=\\\"0.7\\\"/>\\n</svg>\\n\";","import {\n  ColumnLayout,\n  Container,\n  Grid,\n  Header,\n  SpaceBetween\n} from '@cloudscape-design/components';\nimport Box from '@cloudscape-design/components/box';\nimport Link from '@cloudscape-design/components/link';\nimport { ReactWidget } from '@jupyterlab/apputils';\nimport { Button } from '@jupyterlab/ui-components';\nimport React from 'react';\nimport { ReactMarkdown } from 'react-markdown/lib/react-markdown';\nimport { codeGuruIcon } from '../constants/icons';\nimport { codeGuruSecurityScanAccessPolicy } from '../constants/policy';\nimport { isLightThemeActive } from '../utils';\n\nexport class AboutCodeGuru extends ReactWidget {\n  render(): JSX.Element {\n    const steps = [\n      {\n        header: 'Step 1: Provide necessary permissions',\n        description: `Go to the [AWS IAM Console](https://us-east-1.console.aws.amazon.com/iamv2/home#/home) to update the permissions policy for each role or user that will use this extension. Use an AWS managed policy or create a policy with the following permissions:\n\n\\`\\`\\`\n${codeGuruSecurityScanAccessPolicy}\n\\`\\`\\`\n`\n      },\n      {\n        header: 'Step 2: Configure credentials',\n        headerDescription:\n          'This step is only required for JupyterLab users. SageMaker Studio users can skip this step.',\n        description: `Refresh your AWS credentials using the AWS CLI. Run the following command to update your AWS configuration:\n\n\\`\\`\\`\naws configure\n\\`\\`\\`\n`\n      }\n    ];\n\n    return (\n      <Box\n        padding=\"xxl\"\n        className={`about-codeguru ${\n          isLightThemeActive() ? '' : 'awsui-dark-mode'\n        }`}\n      >\n        <SpaceBetween direction=\"vertical\" size=\"m\">\n          <Box variant=\"h1\">Amazon CodeGuru extension</Box>\n          <ColumnLayout borders=\"horizontal\" columns={1}>\n            <Box>\n              <Box variant=\"h2\">About</Box>\n              <Box variant=\"p\">\n                <Markdown\n                  content={`This extension scans code, detects security vulnerabilities, and\n                  recommends code quality improvements, helping you to create and\n                  deploy secure, high quality ML models. With this new feature,\n                  you can quickly identify vulnerable lines of code and\n                  inefficient machine learning methods within a notebook. In\n                  addition, you will get recommendations that clearly show how to\n                  fix the identified vulnerabilities and improve the ML methods.\n                  [Learn more](\"https://docs.aws.amazon.com/codeguru/latest/security-ug/\")`}\n                />\n              </Box>\n            </Box>\n            <Box>\n              <Box variant=\"h2\">Complete CodeGuru extension installation</Box>\n              <Box variant=\"p\">\n                Once you install this extension, you must complete these steps\n                to begin scanning your code.\n              </Box>\n              <Grid gridDefinition={[{ colspan: 6 }, { colspan: 6 }]}>\n                {steps.map(step => (\n                  <Container\n                    header={\n                      <Header variant=\"h2\" description={step.headerDescription}>\n                        {step.header}\n                      </Header>\n                    }\n                    fitHeight={true}\n                  >\n                    <Markdown content={step.description} />\n                  </Container>\n                ))}\n              </Grid>\n            </Box>\n            <Box variant=\"h2\">Using the extension</Box>\n            <Box>\n              After you install the extension, you can begin using the code\n              scanning feature. You can run a scan by choosing any code cell in\n              your file and then choosing the CodeGuru icon{' '}\n              <codeGuruIcon.react className=\"cg-icon-inline\" /> in the top task\n              bar. Once a scan is complete, you see findings underlined in your\n              code. To view details about the findings, you can open the context\n              (right-click) menu for any cell and choose Show diagnostics panel.\n              You can also hold your cursor over the underlined code to see a\n              popover with a summary. For more information on using the\n              extension, see{' '}\n              <Link href=\"#\" external>\n                Getting started with the Amazon CodeGuru extension\n              </Link>\n              .\n            </Box>\n            <Box>\n              <Markdown\n                content={`\n## Pricing\n\nThe cost of the CodeGuru extension is determined by the frequency of scans in your notebook file. By default, scans run every 120 seconds. To understand how this impacts billing, visit our [pricing policy](\"https://docs.aws.amazon.com/codeguru/latest/security-ug/jupyter-sagemaker-extension\"). You can change the frequency of scans in the Advanced Settings Editor.\n              `}\n              />\n            </Box>\n          </ColumnLayout>\n        </SpaceBetween>\n      </Box>\n    );\n  }\n}\ninterface IMarkdown {\n  content: string;\n}\nexport function Markdown({ content }: IMarkdown): JSX.Element {\n  return (\n    <ReactMarkdown\n      components={{\n        a: ({ children, href }) => (\n          <Link external href={href}>\n            {children}\n          </Link>\n        ),\n        code: ({ children }) => (\n          <pre>\n            <div className=\"jp-InputArea-editor cg-code-editor\">\n              <code>{children}</code>\n            </div>\n            <div>\n              <Button\n                className=\"cg-button\"\n                onClick={() => copyToClipboard(children as string)}\n              >\n                Copy\n              </Button>\n            </div>\n          </pre>\n        )\n      }}\n    >\n      {content}\n    </ReactMarkdown>\n  );\n}\n\nfunction copyToClipboard(text: string | undefined) {\n  return navigator.clipboard.writeText(text as string);\n}\n","import { JupyterFrontEnd } from '@jupyterlab/application';\nimport { ToolbarButton } from '@jupyterlab/apputils';\nimport { DocumentRegistry } from '@jupyterlab/docregistry';\nimport { INotebookModel, NotebookPanel } from '@jupyterlab/notebook';\nimport { DisposableDelegate, IDisposable } from '@lumino/disposable';\nimport { ISignal, Signal } from '@lumino/signaling';\nimport { CODEGURU_RUN_SCAN_LABEL, RUN_CODEGURU_SCAN_ID } from '../constants';\nimport { codeGuruIcon } from '../constants/icons';\nimport { ICodeScanResponse } from '../constants/interface';\n\nexport class CreateCodeScanButtonExtension\n  implements DocumentRegistry.IWidgetExtension<NotebookPanel, INotebookModel>\n{\n  app: JupyterFrontEnd;\n  private _stateChanged: Signal<\n    CreateCodeScanButtonExtension,\n    ICodeScanResponse\n  > = new Signal<CreateCodeScanButtonExtension, ICodeScanResponse>(this);\n  constructor(app: JupyterFrontEnd) {\n    this.app = app;\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  emitStatusChange(response: ICodeScanResponse): void {\n    this._stateChanged.emit(response);\n  }\n\n  protected handleClick(): void {\n    this.app.commands.execute(`lsp:${RUN_CODEGURU_SCAN_ID}-notebook`);\n  }\n\n  createNew(panel: NotebookPanel): IDisposable {\n    const button = new ToolbarButton({\n      icon: codeGuruIcon,\n      onClick: this.handleClick,\n      tooltip: CODEGURU_RUN_SCAN_LABEL\n    });\n\n    panel.toolbar.insertItem(10, CODEGURU_RUN_SCAN_LABEL, button);\n\n    return new DisposableDelegate(() => {\n      button.dispose();\n    });\n  }\n\n  public get stateChanged(): ISignal<\n    CreateCodeScanButtonExtension,\n    ICodeScanResponse\n  > {\n    return this._stateChanged;\n  }\n}\n","import { ReactWidget } from '@jupyterlab/apputils';\n\nimport React from 'react';\nimport { codeGuruSecurityScanAccessPolicy } from '../constants/policy';\nimport { Markdown } from './About';\n\nexport enum ErrorType {\n  INSUFFICIENT_ACCESS_PERMISSIONS = 'INSUFFICIENT_ACCESS_PERMISSIONS',\n  MISSING_AWS_CREDENTIALS = 'MISSING_AWS_CREDENTIALS'\n}\n\ninterface ICodeScanError {\n  errorType: ErrorType;\n}\n\nconst CodeScanErrorComponent = ({ errorType }: ICodeScanError): JSX.Element => {\n  const missingPermissionsContent = `\n ### Missing permissions for CodeGuru extension\n\n\n You do not have the necessary permissions to run a CodeGuru scan. [Learn more](#)\n\nGo to the [AWS IAM Console](https://us-east-1.console.aws.amazon.com/iamv2/home#/home) to update the permissions policy for each user that will use this extension.\n\nUse an AWS managed policy or create a policy with the following permissions:\n\n \\`\\`\\`\n${codeGuruSecurityScanAccessPolicy}\n \\`\\`\\`\n   `;\n\n  const missingCredentialsContent = `\n ### Missing AWS credentials for CodeGuru extension\n\n\n To use Amazon CodeGuru scan, provide AWS credentials by pasting\n\n the following script in your command prompt window.\n\n \\`\\`\\`\n aws configure\n \\`\\`\\`\n   `;\n\n  return (\n    <div className=\"cg-popover\">\n      <div className=\"cg-popover-content cg-text\">\n        <Markdown\n          content={\n            errorType === ErrorType.INSUFFICIENT_ACCESS_PERMISSIONS\n              ? missingPermissionsContent\n              : missingCredentialsContent\n          }\n        />\n      </div>\n    </div>\n  );\n};\n\nexport class CodeScanErrorWidget extends ReactWidget {\n  errorType: ErrorType;\n  constructor(props: ICodeScanError) {\n    super();\n    this.addClass('jp-ReactWidget');\n    this.errorType = props.errorType;\n  }\n\n  render(): JSX.Element {\n    return <CodeScanErrorComponent errorType={this.errorType} />;\n  }\n}\n","import StatusIndicator from '@cloudscape-design/components/status-indicator';\nimport { ReactWidget } from '@jupyterlab/apputils';\nimport { Popup, TextItem, showPopup } from '@jupyterlab/statusbar';\nimport { ISignal } from '@lumino/signaling';\nimport React, { useState } from 'react';\nimport { ICodeScanResponse, Status } from '../constants/interface';\nimport { CreateCodeScanButtonExtension } from './CodeScanButton';\nimport { CodeScanErrorWidget, ErrorType } from './CodeScanErrorPopup';\n\nconst statusCleanupTimeout: Record<Exclude<Status, 'pending'>, number> = {\n  completed: 5000,\n  error: 30000,\n  idle: 0\n};\ninterface ICodeScanStatusWidget extends ICodeScanResponse {\n  listener: ISignal<CreateCodeScanButtonExtension, ICodeScanResponse>;\n}\ninterface ICodeScanStatusComponent extends ICodeScanStatusWidget {\n  handleClick: (errorType?: ErrorType) => void;\n}\n\nfunction CodeScanStatusComponent(props: ICodeScanStatusComponent): JSX.Element {\n  const [status, setStatus] = useState(props.status);\n  const [message, setMessage] = useState<string | undefined>();\n\n  props.listener.connect((_, { status, message }) => {\n    if (status !== 'pending') {\n      setTimeout(() => {\n        setStatus('idle'); // It will remove the status from footer\n      }, statusCleanupTimeout[status]);\n    }\n    setStatus(status);\n    setMessage(message);\n  });\n\n  switch (status) {\n    case 'pending': {\n      const title = 'CodeGuru: Scan in progress';\n      return (\n        <StatusIndicator type=\"in-progress\" colorOverride=\"blue\">\n          <TextItem source={title} />\n        </StatusIndicator>\n      );\n    }\n    case 'error': {\n      const errorType = parseError(String(message));\n      const title =\n        errorType === ErrorType.INSUFFICIENT_ACCESS_PERMISSIONS\n          ? 'CodeGuru: Missing permissions'\n          : errorType === ErrorType.MISSING_AWS_CREDENTIALS\n          ? 'CodeGuru: Missing credentials'\n          : 'CodeGuru: Scan failed';\n      return (\n        <div onClick={() => props.handleClick(errorType)}>\n          <StatusIndicator type=\"warning\">\n            <TextItem source={title} />\n          </StatusIndicator>\n        </div>\n      );\n    }\n    case 'completed': {\n      const title = 'CodeGuru: Scan completed';\n      return (\n        <StatusIndicator type=\"success\" colorOverride=\"blue\">\n          <TextItem source={title} />\n        </StatusIndicator>\n      );\n    }\n    case 'idle':\n    default:\n      return <></>;\n  }\n}\n\nexport class CodeScanStatus extends ReactWidget {\n  protected status: Status;\n  protected listener: ISignal<CreateCodeScanButtonExtension, ICodeScanResponse>;\n  protected _popup: Popup | null = null;\n  constructor(props: ICodeScanStatusWidget) {\n    super();\n    this.status = props.status;\n    this.listener = props.listener;\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(errorType?: ErrorType): void {\n    if (!errorType) {\n      return;\n    }\n    if (this._popup?.isVisible) {\n      this._popup.close();\n    } else {\n      if (this._popup) {\n        this._popup.dispose();\n      }\n      this._popup = showPopup({\n        body: new CodeScanErrorWidget({ errorType }),\n        anchor: this,\n        align: 'left'\n      });\n    }\n  }\n\n  render(): JSX.Element {\n    return (\n      <CodeScanStatusComponent\n        status={this.status}\n        listener={this.listener}\n        handleClick={this.handleClick}\n      />\n    );\n  }\n}\n\nexport function parseError(message: string | undefined) {\n  if (!message) {\n    return;\n  }\n\n  if (\n    message.includes('AccessDeniedException') &&\n    message.includes('not authorized to perform: codeguru-security')\n  ) {\n    return ErrorType.INSUFFICIENT_ACCESS_PERMISSIONS;\n  }\n\n  if (\n    (message.includes('UnrecognizedClientException') ||\n      message.includes('ExpiredTokenException')) &&\n    message.includes('The security token included in the request is ')\n  ) {\n    return ErrorType.MISSING_AWS_CREDENTIALS;\n  }\n  return;\n}\n","import { LabIcon } from '@jupyterlab/ui-components';\nimport codeGuruIconSVG from '../../style/icons/cg-icon.svg';\n\nconst codeGuruIcon = new LabIcon({\n  name: 'codeGuruIcon',\n  svgstr: codeGuruIconSVG\n});\n\nexport { codeGuruIcon };\n","export const PLUGIN_ID = '@aws/amazon-codeguru-extension';\n\nexport enum REGISTER_ID {\n  CREATE_CODE_SCAN = `${PLUGIN_ID}:create_scan_command`,\n  SCAN_STATUS = `${PLUGIN_ID}:scan_status`\n}\n\nexport const RUN_CODEGURU_SCAN_ID = 'run-codeguru-scan';\n\nexport const CODEGURU_RUN_SCAN_LABEL = 'Run CodeGuru scan';\n\nexport enum PLATFORM_ACRONYM {\n  SAGEMAKER = 'sm',\n  LOCALHOST = 'jl'\n}\n","export const codeGuruSecurityScanAccessPolicy = `\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"AmazonCodeGuruSecurityScanAccess\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"codeguru-security:CreateScan\",\n        \"codeguru-security:CreateUploadUrl\",\n        \"codeguru-security:GetScan\",\n        \"codeguru-security:GetFindings\"\n      ],\n      \"Resource\": \"arn:aws:codeguru-security:*:*:scans/*\"\n    }\n  ]\n}\n`;\n","export enum Region {\n  // Wave 1\n  ARN = 'eu-north-1',\n  // Wave 2\n  SYD = 'ap-southeast-2',\n  // Wave 3\n  IAD = 'us-east-1',\n  CMH = 'us-east-2',\n  PDX = 'us-west-2',\n  // Wave 4\n  NRT = 'ap-northeast-1',\n  SIN = 'ap-southeast-1',\n  FRA = 'eu-central-1',\n  DUB = 'eu-west-1',\n  LHR = 'eu-west-2'\n}\n\nexport const DEFAULT_AWS_REGION = Region.IAD;\n","import { ILSPFeatureManager } from '@jupyter-lsp/jupyterlab-lsp';\nimport { CodeMirrorIntegration } from '@jupyter-lsp/jupyterlab-lsp/lib/editor_integration/codemirror';\nimport { IFeatureCommand } from '@jupyter-lsp/jupyterlab-lsp/lib/feature';\nimport {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\n\nimport { MainAreaWidget } from '@jupyterlab/apputils';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IStateDB } from '@jupyterlab/statedb';\nimport { IStatusBar } from '@jupyterlab/statusbar';\nimport { ReadonlyJSONObject } from '@lumino/coreutils';\nimport { AboutCodeGuru } from './components/About';\nimport { CreateCodeScanButtonExtension } from './components/CodeScanButton';\nimport { CodeScanStatus } from './components/CodeScanStatus';\nimport {\n  CODEGURU_RUN_SCAN_LABEL,\n  PLUGIN_ID,\n  REGISTER_ID,\n  RUN_CODEGURU_SCAN_ID\n} from './constants';\nimport { codeGuruIcon } from './constants/icons';\nimport { AutoScan, IProgressMessageResponse } from './constants/interface';\nimport { DEFAULT_AWS_REGION, Region } from './constants/region';\nimport { getPlatformAcronym } from './utils';\n\nclass CodeGuruCM extends CodeMirrorIntegration {}\n\nlet overriddenRegion = DEFAULT_AWS_REGION;\n\nconst COMMANDS = (button: CreateCodeScanButtonExtension): IFeatureCommand[] => [\n  {\n    id: RUN_CODEGURU_SCAN_ID,\n    label: CODEGURU_RUN_SCAN_LABEL,\n    icon: codeGuruIcon,\n    execute: ({ connection, document }) => {\n      const platform = getPlatformAcronym();\n      let token: string;\n      if (connection?.isConnected) {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        const wsConnection = connection.connection;\n        void wsConnection.sendRequest('workspace/executeCommand', {\n          command: 'cgs.runScan',\n          arguments: [document.document_info.uri, overriddenRegion, platform]\n        });\n\n        wsConnection.onNotification(\n          '$/progress',\n          (response: IProgressMessageResponse) => {\n            if (response.value.title === 'command: runScan') {\n              token = response.token;\n            }\n            if (\n              token === response.token &&\n              response.value.kind === 'report' &&\n              response.value.message\n            ) {\n              button.emitStatusChange(response.value.message);\n            }\n          }\n        );\n      }\n    },\n    is_enabled: () => true,\n    rank: 4\n  }\n];\n\n/**\n * Initialization data for the @aws/amazon-codeguru-extension extension.\n */\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: `${PLUGIN_ID}:plugin`,\n  autoStart: true,\n  requires: [ILSPFeatureManager, IStatusBar, ISettingRegistry, IStateDB],\n  activate: (\n    app: JupyterFrontEnd,\n    featureManager: ILSPFeatureManager,\n    statusBar: IStatusBar,\n    settings: ISettingRegistry,\n    state: IStateDB\n  ) => {\n    const button = new CreateCodeScanButtonExtension(app);\n    const statusWidget = new CodeScanStatus({\n      status: 'idle',\n      listener: button.stateChanged\n    });\n\n    app.docRegistry.addWidgetExtension('Notebook', button);\n\n    featureManager.register({\n      feature: {\n        editorIntegrationFactory: new Map([['CodeMirrorEditor', CodeGuruCM]]),\n        id: REGISTER_ID.CREATE_CODE_SCAN,\n        name: 'CodeGuru Security',\n        commands: COMMANDS(button)\n      }\n    });\n\n    // Codescan status in footer\n    statusBar.registerStatusItem(REGISTER_ID.SCAN_STATUS, {\n      align: 'middle',\n      item: statusWidget,\n      rank: 20\n    });\n\n    // Settings\n    let scanFrequency = 240;\n    let autoScan: AutoScan = 'Disabled';\n    let timeOutToken: NodeJS.Timeout;\n    /**\n     * Load the settings for this extension\n     *\n     * @param setting Extension settings\n     */\n    function loadSetting(setting: ISettingRegistry.ISettings): void {\n      // Read the settings and convert to the correct type\n      scanFrequency = setting.get('scanFrequency').composite as number;\n      autoScan = setting.get('autoScan').composite as AutoScan;\n      overriddenRegion = setting.get('region').composite as Region;\n\n      // clearing interval before setting new interval or disabling autoscan\n      if (timeOutToken) {\n        clearInterval(timeOutToken);\n      }\n      if (autoScan === 'Enabled' && scanFrequency > 0) {\n        timeOutToken = setInterval(() => {\n          app.commands.execute(`lsp:${RUN_CODEGURU_SCAN_ID}-notebook`);\n        }, scanFrequency * 1000);\n      }\n    }\n\n    // Wait for the application to be restored and\n    // for the settings for this plugin to be loaded\n    Promise.all([app.restored, settings.load(`${PLUGIN_ID}:plugin`)])\n      .then(([, setting]) => {\n        // Read the settings\n        loadSetting(setting);\n\n        // Listen for your plugin setting changes using Signal\n        setting.changed.connect(loadSetting);\n      })\n      .catch(reason => {\n        console.error(`Error while reading the settings.\\n${reason}`);\n      });\n\n    // About page\n    const aboutCodeGuruWidget = () => {\n      // Create a blank content widget inside of a MainAreaWidget\n      const about = new AboutCodeGuru();\n      const widget = new MainAreaWidget({ content: about });\n      widget.id = 'about-codeguru';\n      widget.title.label = 'Get started with CodeGuru';\n      widget.title.icon = codeGuruIcon;\n      widget.title.closable = true;\n      return widget;\n    };\n    let widget = aboutCodeGuruWidget();\n\n    app.commands.addCommand(`${PLUGIN_ID}:about-codeguru`, {\n      label: 'About CodeGuru',\n      execute: () => {\n        // Regenerate the widget if disposed\n        if (widget.isDisposed) {\n          widget = aboutCodeGuruWidget();\n        }\n        if (!widget.isAttached) {\n          // Attach the widget to the main work area if it's not there\n          app.shell.add(widget, 'main');\n        }\n        // Activate the widget\n        app.shell.activateById(widget.id);\n      }\n    });\n\n    // // Uncomment while testing about page\n    // app.contextMenu.addItem({\n    //   command: `${PLUGIN_ID}:about-codeguru`,\n    //   selector: '.jp-Cell'\n    // });\n\n    app.restored\n      .then(() => state.fetch(`${PLUGIN_ID}:plugin`))\n      .then(value => {\n        let isFirstTime = true;\n        try {\n          isFirstTime = (value as ReadonlyJSONObject)['isFirstTime'] as boolean;\n          // eslint-disable-next-line no-empty\n        } catch {}\n        if (isFirstTime) {\n          app.commands.execute(`${PLUGIN_ID}:about-codeguru`);\n        }\n        return state.save(`${PLUGIN_ID}:plugin`, {\n          isFirstTime: false\n        });\n      });\n  }\n};\n\nexport default plugin;\n","import { PLATFORM_ACRONYM } from '../constants';\n\nexport function isLightThemeActive(): boolean {\n  return document.body.getAttribute('data-jp-theme-light') === 'true';\n}\n\nexport function getPlatformAcronym(): string {\n  const hostname = window.location.hostname;\n  if (hostname.includes('sagemaker')) {\n    return PLATFORM_ACRONYM.SAGEMAKER;\n  }\n  return PLATFORM_ACRONYM.LOCALHOST;\n}\n"],"names":[],"sourceRoot":""}