# coding: utf-8

"""
    Gigs Core API

    API to manage voice & data plans for smartphones, wearables and IoT in 200+ countries.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@gigs.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field
from gigs_client.models.plans_search_request_compatible_with import PlansSearchRequestCompatibleWith

class PlansSearchRequest(BaseModel):
    """
    PlansSearchRequest
    """
    status: Optional[Any] = Field(None, description="The status to filter plans by.")
    compatible_with: PlansSearchRequestCompatibleWith = Field(..., alias="compatibleWith")
    __properties = ["status", "compatibleWith"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PlansSearchRequest:
        """Create an instance of PlansSearchRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of compatible_with
        if self.compatible_with:
            _dict['compatibleWith'] = self.compatible_with.to_dict()
        # set to None if status (nullable) is None
        # and __fields_set__ contains the field
        if self.status is None and "status" in self.__fields_set__:
            _dict['status'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PlansSearchRequest:
        """Create an instance of PlansSearchRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PlansSearchRequest.parse_obj(obj)

        _obj = PlansSearchRequest.parse_obj({
            "status": obj.get("status"),
            "compatible_with": PlansSearchRequestCompatibleWith.from_dict(obj.get("compatibleWith")) if obj.get("compatibleWith") is not None else None
        })
        return _obj

