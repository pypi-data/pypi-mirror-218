# coding: utf-8

"""
    Gigs Core API

    API to manage voice & data plans for smartphones, wearables and IoT in 200+ countries.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@gigs.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field

class SubscriptionAddonCurrentPeriod(BaseModel):
    """
    Current subscription addon period. Only present for active subscription addons.
    """
    number: Optional[Any] = Field(..., description="Sequence number of the period.")
    start: Optional[Any] = Field(..., description="Beginning of the period.")
    end: Optional[Any] = Field(..., description="End of the period.")
    __properties = ["number", "start", "end"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SubscriptionAddonCurrentPeriod:
        """Create an instance of SubscriptionAddonCurrentPeriod from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if number (nullable) is None
        # and __fields_set__ contains the field
        if self.number is None and "number" in self.__fields_set__:
            _dict['number'] = None

        # set to None if start (nullable) is None
        # and __fields_set__ contains the field
        if self.start is None and "start" in self.__fields_set__:
            _dict['start'] = None

        # set to None if end (nullable) is None
        # and __fields_set__ contains the field
        if self.end is None and "end" in self.__fields_set__:
            _dict['end'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SubscriptionAddonCurrentPeriod:
        """Create an instance of SubscriptionAddonCurrentPeriod from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SubscriptionAddonCurrentPeriod.parse_obj(obj)

        _obj = SubscriptionAddonCurrentPeriod.parse_obj({
            "number": obj.get("number"),
            "start": obj.get("start"),
            "end": obj.get("end")
        })
        return _obj

