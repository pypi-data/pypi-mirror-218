# coding: utf-8

"""
    Gigs Core API

    API to manage voice & data plans for smartphones, wearables and IoT in 200+ countries.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@gigs.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field, validator

class ProjectPayments(BaseModel):
    """
    Configuration parameters for the project use of payments.
    """
    currency: Optional[Any] = Field(..., description="Three-letter ISO 4217 currency code representing the currency of the project. Must be a supported currency.")
    mode: Optional[Any] = Field(..., description="The mode in which the payments operate.")
    __properties = ["currency", "mode"]

    @validator('mode')
    def mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('live', 'test'):
            raise ValueError("must be one of enum values ('live', 'test')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProjectPayments:
        """Create an instance of ProjectPayments from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if currency (nullable) is None
        # and __fields_set__ contains the field
        if self.currency is None and "currency" in self.__fields_set__:
            _dict['currency'] = None

        # set to None if mode (nullable) is None
        # and __fields_set__ contains the field
        if self.mode is None and "mode" in self.__fields_set__:
            _dict['mode'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProjectPayments:
        """Create an instance of ProjectPayments from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ProjectPayments.parse_obj(obj)

        _obj = ProjectPayments.parse_obj({
            "currency": obj.get("currency"),
            "mode": obj.get("mode")
        })
        return _obj

