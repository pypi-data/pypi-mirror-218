# coding: utf-8

"""
    Gigs Core API

    API to manage voice & data plans for smartphones, wearables and IoT in 200+ countries.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@gigs.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field, validator
from gigs_client.models.addon_price import AddonPrice
from gigs_client.models.addon_validity import AddonValidity

class Addon(BaseModel):
    """
    <!-- theme: info --> > #### Preview > > This schema is currently in preview and might change in the future. > Weâ€™re excited to hear your feedback and ideas. Please send an email > to [support@gigs.com](mailto:support@gigs.com) to share your thoughts. 
    """
    object: Optional[Any] = Field(..., description="Type of object is always `addon`.")
    id: Optional[Any] = Field(..., description="Unique identifier for the addon.")
    data: Optional[Any] = Field(..., description="The data allowance included in this addon. A value of `-1` indicates unlimited data.")
    data_unit: Optional[Any] = Field(..., alias="dataUnit", description="The unit of the data value is always `byte`.")
    description: Optional[Any] = Field(..., description="The description of the addon.")
    name: Optional[Any] = Field(..., description="Name for the addon.")
    price: AddonPrice = Field(...)
    provider: Optional[Any] = Field(..., description="The ID of the network provider supported by this addon.")
    recurrence_type: Optional[Any] = Field(..., alias="recurrenceType", description="The recurrence type the addon.")
    sms: Optional[Any] = Field(..., description="The SMS allowance included in this addon. A value of `-1` indicates unlimited SMS.")
    sms_unit: Optional[Any] = Field(..., alias="smsUnit", description="The unit of the sms value is always `message`.")
    status: Optional[Any] = Field(..., description="The current status of the addon.")
    type: Optional[Any] = Field(..., description="The type of the addon.")
    validity: AddonValidity = Field(...)
    voice: Optional[Any] = Field(..., description="The voice call allowance in seconds included in this addon. A value of `-1` indicates unlimited voice calls.")
    voice_unit: Optional[Any] = Field(..., alias="voiceUnit", description="The unit of the voice value is always `second`.")
    created_at: Optional[Any] = Field(..., alias="createdAt", description="Time when the addon was created .")
    __properties = ["object", "id", "data", "dataUnit", "description", "name", "price", "provider", "recurrenceType", "sms", "smsUnit", "status", "type", "validity", "voice", "voiceUnit", "createdAt"]

    @validator('recurrence_type')
    def recurrence_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('oneTime', 'recurring'):
            raise ValueError("must be one of enum values ('oneTime', 'recurring')")
        return value

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('draft', 'available', 'archived'):
            raise ValueError("must be one of enum values ('draft', 'available', 'archived')")
        return value

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('topUp', 'other'):
            raise ValueError("must be one of enum values ('topUp', 'other')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Addon:
        """Create an instance of Addon from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['price'] = self.price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of validity
        if self.validity:
            _dict['validity'] = self.validity.to_dict()
        # set to None if object (nullable) is None
        # and __fields_set__ contains the field
        if self.object is None and "object" in self.__fields_set__:
            _dict['object'] = None

        # set to None if id (nullable) is None
        # and __fields_set__ contains the field
        if self.id is None and "id" in self.__fields_set__:
            _dict['id'] = None

        # set to None if data (nullable) is None
        # and __fields_set__ contains the field
        if self.data is None and "data" in self.__fields_set__:
            _dict['data'] = None

        # set to None if data_unit (nullable) is None
        # and __fields_set__ contains the field
        if self.data_unit is None and "data_unit" in self.__fields_set__:
            _dict['dataUnit'] = None

        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict['name'] = None

        # set to None if provider (nullable) is None
        # and __fields_set__ contains the field
        if self.provider is None and "provider" in self.__fields_set__:
            _dict['provider'] = None

        # set to None if recurrence_type (nullable) is None
        # and __fields_set__ contains the field
        if self.recurrence_type is None and "recurrence_type" in self.__fields_set__:
            _dict['recurrenceType'] = None

        # set to None if sms (nullable) is None
        # and __fields_set__ contains the field
        if self.sms is None and "sms" in self.__fields_set__:
            _dict['sms'] = None

        # set to None if sms_unit (nullable) is None
        # and __fields_set__ contains the field
        if self.sms_unit is None and "sms_unit" in self.__fields_set__:
            _dict['smsUnit'] = None

        # set to None if status (nullable) is None
        # and __fields_set__ contains the field
        if self.status is None and "status" in self.__fields_set__:
            _dict['status'] = None

        # set to None if type (nullable) is None
        # and __fields_set__ contains the field
        if self.type is None and "type" in self.__fields_set__:
            _dict['type'] = None

        # set to None if voice (nullable) is None
        # and __fields_set__ contains the field
        if self.voice is None and "voice" in self.__fields_set__:
            _dict['voice'] = None

        # set to None if voice_unit (nullable) is None
        # and __fields_set__ contains the field
        if self.voice_unit is None and "voice_unit" in self.__fields_set__:
            _dict['voiceUnit'] = None

        # set to None if created_at (nullable) is None
        # and __fields_set__ contains the field
        if self.created_at is None and "created_at" in self.__fields_set__:
            _dict['createdAt'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Addon:
        """Create an instance of Addon from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Addon.parse_obj(obj)

        _obj = Addon.parse_obj({
            "object": obj.get("object"),
            "id": obj.get("id"),
            "data": obj.get("data"),
            "data_unit": obj.get("dataUnit"),
            "description": obj.get("description"),
            "name": obj.get("name"),
            "price": AddonPrice.from_dict(obj.get("price")) if obj.get("price") is not None else None,
            "provider": obj.get("provider"),
            "recurrence_type": obj.get("recurrenceType"),
            "sms": obj.get("sms"),
            "sms_unit": obj.get("smsUnit"),
            "status": obj.get("status"),
            "type": obj.get("type"),
            "validity": AddonValidity.from_dict(obj.get("validity")) if obj.get("validity") is not None else None,
            "voice": obj.get("voice"),
            "voice_unit": obj.get("voiceUnit"),
            "created_at": obj.get("createdAt")
        })
        return _obj

