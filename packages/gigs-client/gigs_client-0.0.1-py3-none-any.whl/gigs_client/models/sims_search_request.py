# coding: utf-8

"""
    Gigs Core API

    API to manage voice & data plans for smartphones, wearables and IoT in 200+ countries.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@gigs.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field

class SimsSearchRequest(BaseModel):
    """
    SimsSearchRequest
    """
    iccid: Optional[Any] = Field(..., description="The ICCID (integrated circuit card identifier) associated with the SIM.")
    type: Optional[Any] = Field(None, description="Optional type of the SIM card, either `eSIM`, `pSIM` or both.")
    __properties = ["iccid", "type"]

    @validator('iccid')
    def iccid_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^([0-9]{19}[Ff]?|[0-9]{20})$", value):
            raise ValueError(r"must validate the regular expression /^([0-9]{19}[Ff]?|[0-9]{20})$/g")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SimsSearchRequest:
        """Create an instance of SimsSearchRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if iccid (nullable) is None
        # and __fields_set__ contains the field
        if self.iccid is None and "iccid" in self.__fields_set__:
            _dict['iccid'] = None

        # set to None if type (nullable) is None
        # and __fields_set__ contains the field
        if self.type is None and "type" in self.__fields_set__:
            _dict['type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SimsSearchRequest:
        """Create an instance of SimsSearchRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SimsSearchRequest.parse_obj(obj)

        _obj = SimsSearchRequest.parse_obj({
            "iccid": obj.get("iccid"),
            "type": obj.get("type")
        })
        return _obj

