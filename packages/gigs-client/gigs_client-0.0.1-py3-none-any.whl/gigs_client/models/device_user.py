# coding: utf-8

"""
    Gigs Core API

    API to manage voice & data plans for smartphones, wearables and IoT in 200+ countries.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@gigs.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field

class DeviceUser(BaseModel):
    """
    DeviceUser
    """
    object: Optional[Any] = Field(..., description="Type of object is always `user`.")
    id: Optional[Any] = Field(..., description="Unique identifier for the user.")
    birthday: Optional[Any] = Field(..., description="The birthday of the user.")
    email: Optional[Any] = Field(..., description="The primary email address of the user.")
    email_verified: Optional[Any] = Field(..., alias="emailVerified", description="Whether the user's primary email address is verified or not.")
    full_name: Optional[Any] = Field(..., alias="fullName", description="The user's full name. Required for some Plans.")
    preferred_locale: Optional[Any] = Field(..., alias="preferredLocale", description="The user's locale preference represented as an [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag).")
    created_at: Optional[Any] = Field(..., alias="createdAt", description="Time when the user was created.")
    __properties = ["object", "id", "birthday", "email", "emailVerified", "fullName", "preferredLocale", "createdAt"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DeviceUser:
        """Create an instance of DeviceUser from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if object (nullable) is None
        # and __fields_set__ contains the field
        if self.object is None and "object" in self.__fields_set__:
            _dict['object'] = None

        # set to None if id (nullable) is None
        # and __fields_set__ contains the field
        if self.id is None and "id" in self.__fields_set__:
            _dict['id'] = None

        # set to None if birthday (nullable) is None
        # and __fields_set__ contains the field
        if self.birthday is None and "birthday" in self.__fields_set__:
            _dict['birthday'] = None

        # set to None if email (nullable) is None
        # and __fields_set__ contains the field
        if self.email is None and "email" in self.__fields_set__:
            _dict['email'] = None

        # set to None if email_verified (nullable) is None
        # and __fields_set__ contains the field
        if self.email_verified is None and "email_verified" in self.__fields_set__:
            _dict['emailVerified'] = None

        # set to None if full_name (nullable) is None
        # and __fields_set__ contains the field
        if self.full_name is None and "full_name" in self.__fields_set__:
            _dict['fullName'] = None

        # set to None if preferred_locale (nullable) is None
        # and __fields_set__ contains the field
        if self.preferred_locale is None and "preferred_locale" in self.__fields_set__:
            _dict['preferredLocale'] = None

        # set to None if created_at (nullable) is None
        # and __fields_set__ contains the field
        if self.created_at is None and "created_at" in self.__fields_set__:
            _dict['createdAt'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DeviceUser:
        """Create an instance of DeviceUser from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DeviceUser.parse_obj(obj)

        _obj = DeviceUser.parse_obj({
            "object": obj.get("object"),
            "id": obj.get("id"),
            "birthday": obj.get("birthday"),
            "email": obj.get("email"),
            "email_verified": obj.get("emailVerified"),
            "full_name": obj.get("fullName"),
            "preferred_locale": obj.get("preferredLocale"),
            "created_at": obj.get("createdAt")
        })
        return _obj

