# coding: utf-8

"""
    Gigs Core API

    API to manage voice & data plans for smartphones, wearables and IoT in 200+ countries.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@gigs.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field

class PlanDocument(BaseModel):
    """
    PlanDocument
    """
    object: Optional[Any] = Field(..., description="Type of object is always `planDocument`.")
    id: Optional[Any] = Field(..., description="Unique identifier for the given document.")
    name: Optional[Any] = Field(..., description="The name of the document.")
    plan: Optional[Any] = Field(..., description="Unique identifier for the plan associated to this document.")
    type: Optional[Any] = Field(..., description="The MIME type for the given document.")
    url: Optional[Any] = Field(..., description="The URL at which the document can be retrieved.")
    created_at: Optional[Any] = Field(..., alias="createdAt", description="The time the document was created.")
    __properties = ["object", "id", "name", "plan", "type", "url", "createdAt"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PlanDocument:
        """Create an instance of PlanDocument from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if object (nullable) is None
        # and __fields_set__ contains the field
        if self.object is None and "object" in self.__fields_set__:
            _dict['object'] = None

        # set to None if id (nullable) is None
        # and __fields_set__ contains the field
        if self.id is None and "id" in self.__fields_set__:
            _dict['id'] = None

        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict['name'] = None

        # set to None if plan (nullable) is None
        # and __fields_set__ contains the field
        if self.plan is None and "plan" in self.__fields_set__:
            _dict['plan'] = None

        # set to None if type (nullable) is None
        # and __fields_set__ contains the field
        if self.type is None and "type" in self.__fields_set__:
            _dict['type'] = None

        # set to None if url (nullable) is None
        # and __fields_set__ contains the field
        if self.url is None and "url" in self.__fields_set__:
            _dict['url'] = None

        # set to None if created_at (nullable) is None
        # and __fields_set__ contains the field
        if self.created_at is None and "created_at" in self.__fields_set__:
            _dict['createdAt'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PlanDocument:
        """Create an instance of PlanDocument from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PlanDocument.parse_obj(obj)

        _obj = PlanDocument.parse_obj({
            "object": obj.get("object"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "plan": obj.get("plan"),
            "type": obj.get("type"),
            "url": obj.get("url"),
            "created_at": obj.get("createdAt")
        })
        return _obj

