# coding: utf-8

"""
    Gigs Core API

    API to manage voice & data plans for smartphones, wearables and IoT in 200+ countries.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@gigs.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field

class PropertyErrorDetailError(BaseModel):
    """
    PropertyErrorDetailError
    """
    object: Optional[Any] = Field(..., description="Type of object is always `propertyErrorDetail`.")
    code: Optional[Any] = Field(..., description="A machine-readable description of the error.")
    message: Optional[Any] = Field(..., description="A human readable description of the error.")
    var_property: Optional[Any] = Field(..., alias="property", description="Name of the property associated with the error.")
    suggestion: Optional[Any] = Field(..., description="Suggested alternative value for the field.")
    __properties = ["object", "code", "message", "property", "suggestion"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PropertyErrorDetailError:
        """Create an instance of PropertyErrorDetailError from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if object (nullable) is None
        # and __fields_set__ contains the field
        if self.object is None and "object" in self.__fields_set__:
            _dict['object'] = None

        # set to None if code (nullable) is None
        # and __fields_set__ contains the field
        if self.code is None and "code" in self.__fields_set__:
            _dict['code'] = None

        # set to None if message (nullable) is None
        # and __fields_set__ contains the field
        if self.message is None and "message" in self.__fields_set__:
            _dict['message'] = None

        # set to None if var_property (nullable) is None
        # and __fields_set__ contains the field
        if self.var_property is None and "var_property" in self.__fields_set__:
            _dict['property'] = None

        # set to None if suggestion (nullable) is None
        # and __fields_set__ contains the field
        if self.suggestion is None and "suggestion" in self.__fields_set__:
            _dict['suggestion'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PropertyErrorDetailError:
        """Create an instance of PropertyErrorDetailError from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PropertyErrorDetailError.parse_obj(obj)

        _obj = PropertyErrorDetailError.parse_obj({
            "object": obj.get("object"),
            "code": obj.get("code"),
            "message": obj.get("message"),
            "var_property": obj.get("property"),
            "suggestion": obj.get("suggestion")
        })
        return _obj

