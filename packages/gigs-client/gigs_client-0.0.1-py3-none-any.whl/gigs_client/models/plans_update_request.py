# coding: utf-8

"""
    Gigs Core API

    API to manage voice & data plans for smartphones, wearables and IoT in 200+ countries.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@gigs.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field

class PlansUpdateRequest(BaseModel):
    """
    PlansUpdateRequest
    """
    name: Optional[Any] = Field(None, description="The plan's name, meant to be displayable to the users.")
    description: Optional[Any] = Field(None, description="The plan's description, meant to be displayable to the users.")
    image: Optional[Any] = Field(None, description="The plan's image, meant to be displayable to the users.")
    __properties = ["name", "description", "image"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PlansUpdateRequest:
        """Create an instance of PlansUpdateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict['name'] = None

        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        # set to None if image (nullable) is None
        # and __fields_set__ contains the field
        if self.image is None and "image" in self.__fields_set__:
            _dict['image'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PlansUpdateRequest:
        """Create an instance of PlansUpdateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PlansUpdateRequest.parse_obj(obj)

        _obj = PlansUpdateRequest.parse_obj({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "image": obj.get("image")
        })
        return _obj

