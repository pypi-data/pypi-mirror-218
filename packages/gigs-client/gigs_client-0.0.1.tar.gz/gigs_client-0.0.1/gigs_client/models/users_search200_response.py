# coding: utf-8

"""
    Gigs Core API

    API to manage voice & data plans for smartphones, wearables and IoT in 200+ countries.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@gigs.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field

class UsersSearch200Response(BaseModel):
    """
    UsersSearch200Response
    """
    object: Optional[Any] = Field(..., description="Type of object is always `list`.")
    items: Optional[Any] = Field(..., description="List of objects of type `user`.")
    more_items_after: Optional[Any] = Field(..., alias="moreItemsAfter", description="A unique identifier to be used as `after` pagination parameter if more items are available sorted after the current batch of items.")
    more_items_before: Optional[Any] = Field(..., alias="moreItemsBefore", description="A unique identifier to be used as `before` pagination parameter if more items are available sorted before the current batch of items.")
    __properties = ["object", "items", "moreItemsAfter", "moreItemsBefore"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UsersSearch200Response:
        """Create an instance of UsersSearch200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if object (nullable) is None
        # and __fields_set__ contains the field
        if self.object is None and "object" in self.__fields_set__:
            _dict['object'] = None

        # set to None if items (nullable) is None
        # and __fields_set__ contains the field
        if self.items is None and "items" in self.__fields_set__:
            _dict['items'] = None

        # set to None if more_items_after (nullable) is None
        # and __fields_set__ contains the field
        if self.more_items_after is None and "more_items_after" in self.__fields_set__:
            _dict['moreItemsAfter'] = None

        # set to None if more_items_before (nullable) is None
        # and __fields_set__ contains the field
        if self.more_items_before is None and "more_items_before" in self.__fields_set__:
            _dict['moreItemsBefore'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UsersSearch200Response:
        """Create an instance of UsersSearch200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UsersSearch200Response.parse_obj(obj)

        _obj = UsersSearch200Response.parse_obj({
            "object": obj.get("object"),
            "items": obj.get("items"),
            "more_items_after": obj.get("moreItemsAfter"),
            "more_items_before": obj.get("moreItemsBefore")
        })
        return _obj

