# coding: utf-8

"""
    Gigs Core API

    API to manage voice & data plans for smartphones, wearables and IoT in 200+ countries.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@gigs.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field, validator

class Sim(BaseModel):
    """
    Sim
    """
    object: Optional[Any] = Field(..., description="Type of object is always `sim`.")
    id: Optional[Any] = Field(..., description="Unique identifier for the SIM.")
    iccid: Optional[Any] = Field(..., description="The ICCID (integrated circuit card identifier) associated with the SIM.")
    provider: Optional[Any] = Field(..., description="The ID of the network provider of the SIM.")
    status: Optional[Any] = Field(..., description="The status of the SIM. Can be `active` or `inactive`.")
    type: Optional[Any] = Field(..., description="The type of the SIM. Can be `eSIM` or `pSIM`.")
    created_at: Optional[Any] = Field(..., alias="createdAt", description="Time when the SIM was created.")
    __properties = ["object", "id", "iccid", "provider", "status", "type", "createdAt"]

    @validator('iccid')
    def iccid_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9]{19,20}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{19,20}$/g")
        return value

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('inactive', 'active', 'retired'):
            raise ValueError("must be one of enum values ('inactive', 'active', 'retired')")
        return value

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('eSIM', 'pSIM'):
            raise ValueError("must be one of enum values ('eSIM', 'pSIM')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Sim:
        """Create an instance of Sim from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if object (nullable) is None
        # and __fields_set__ contains the field
        if self.object is None and "object" in self.__fields_set__:
            _dict['object'] = None

        # set to None if id (nullable) is None
        # and __fields_set__ contains the field
        if self.id is None and "id" in self.__fields_set__:
            _dict['id'] = None

        # set to None if iccid (nullable) is None
        # and __fields_set__ contains the field
        if self.iccid is None and "iccid" in self.__fields_set__:
            _dict['iccid'] = None

        # set to None if provider (nullable) is None
        # and __fields_set__ contains the field
        if self.provider is None and "provider" in self.__fields_set__:
            _dict['provider'] = None

        # set to None if status (nullable) is None
        # and __fields_set__ contains the field
        if self.status is None and "status" in self.__fields_set__:
            _dict['status'] = None

        # set to None if type (nullable) is None
        # and __fields_set__ contains the field
        if self.type is None and "type" in self.__fields_set__:
            _dict['type'] = None

        # set to None if created_at (nullable) is None
        # and __fields_set__ contains the field
        if self.created_at is None and "created_at" in self.__fields_set__:
            _dict['createdAt'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Sim:
        """Create an instance of Sim from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Sim.parse_obj(obj)

        _obj = Sim.parse_obj({
            "object": obj.get("object"),
            "id": obj.get("id"),
            "iccid": obj.get("iccid"),
            "provider": obj.get("provider"),
            "status": obj.get("status"),
            "type": obj.get("type"),
            "created_at": obj.get("createdAt")
        })
        return _obj

