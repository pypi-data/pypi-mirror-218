# coding: utf-8

"""
    Gigs Core API

    API to manage voice & data plans for smartphones, wearables and IoT in 200+ countries.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@gigs.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field, validator
from gigs_client.models.organization import Organization
from gigs_client.models.project_legal import ProjectLegal
from gigs_client.models.project_payments import ProjectPayments
from gigs_client.models.project_support import ProjectSupport

class Project(BaseModel):
    """
    Project
    """
    object: Optional[Any] = Field(..., description="Type of object is always `project`.")
    id: Optional[Any] = Field(..., description="Globally unique identifier for the project.")
    image: Optional[Any] = Field(..., description="Small-resolution project icon with an aspect ratio of `1:1`.  <!-- theme: info --> > #### Preview > > This property is currently in preview and might change in the future. > Weâ€™re excited to hear your feedback and ideas. Please send an email > to [support@gigs.com](mailto:support@gigs.com) to share your thoughts. ")
    legal: ProjectLegal = Field(...)
    locales: Optional[Any] = Field(..., description="List of supported locales represented as [IETF language tags](https://en.wikipedia.org/wiki/IETF_language_tag), ordered by preference.")
    name: Optional[Any] = Field(..., description="A human-readable name for the project.")
    organization: Organization = Field(...)
    payments: ProjectPayments = Field(...)
    subscription_owner: Optional[Any] = Field(..., alias="subscriptionOwner", description="Indicates which entity will be registered as the owner of the subscription with the providers. When `company` is selected the legal address associated with the project will be used for the registration.")
    support: ProjectSupport = Field(...)
    created_at: Optional[Any] = Field(..., alias="createdAt", description="Time when the project was created.")
    __properties = ["object", "id", "image", "legal", "locales", "name", "organization", "payments", "subscriptionOwner", "support", "createdAt"]

    @validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-z][a-z0-9-]{1,28}[a-z0-9]$", value):
            raise ValueError(r"must validate the regular expression /^[a-z][a-z0-9-]{1,28}[a-z0-9]$/g")
        return value

    @validator('subscription_owner')
    def subscription_owner_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('user', 'company'):
            raise ValueError("must be one of enum values ('user', 'company')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Project:
        """Create an instance of Project from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of legal
        if self.legal:
            _dict['legal'] = self.legal.to_dict()
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict['organization'] = self.organization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payments
        if self.payments:
            _dict['payments'] = self.payments.to_dict()
        # override the default output from pydantic by calling `to_dict()` of support
        if self.support:
            _dict['support'] = self.support.to_dict()
        # set to None if object (nullable) is None
        # and __fields_set__ contains the field
        if self.object is None and "object" in self.__fields_set__:
            _dict['object'] = None

        # set to None if id (nullable) is None
        # and __fields_set__ contains the field
        if self.id is None and "id" in self.__fields_set__:
            _dict['id'] = None

        # set to None if image (nullable) is None
        # and __fields_set__ contains the field
        if self.image is None and "image" in self.__fields_set__:
            _dict['image'] = None

        # set to None if locales (nullable) is None
        # and __fields_set__ contains the field
        if self.locales is None and "locales" in self.__fields_set__:
            _dict['locales'] = None

        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict['name'] = None

        # set to None if subscription_owner (nullable) is None
        # and __fields_set__ contains the field
        if self.subscription_owner is None and "subscription_owner" in self.__fields_set__:
            _dict['subscriptionOwner'] = None

        # set to None if created_at (nullable) is None
        # and __fields_set__ contains the field
        if self.created_at is None and "created_at" in self.__fields_set__:
            _dict['createdAt'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Project:
        """Create an instance of Project from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Project.parse_obj(obj)

        _obj = Project.parse_obj({
            "object": obj.get("object"),
            "id": obj.get("id"),
            "image": obj.get("image"),
            "legal": ProjectLegal.from_dict(obj.get("legal")) if obj.get("legal") is not None else None,
            "locales": obj.get("locales"),
            "name": obj.get("name"),
            "organization": Organization.from_dict(obj.get("organization")) if obj.get("organization") is not None else None,
            "payments": ProjectPayments.from_dict(obj.get("payments")) if obj.get("payments") is not None else None,
            "subscription_owner": obj.get("subscriptionOwner"),
            "support": ProjectSupport.from_dict(obj.get("support")) if obj.get("support") is not None else None,
            "created_at": obj.get("createdAt")
        })
        return _obj

