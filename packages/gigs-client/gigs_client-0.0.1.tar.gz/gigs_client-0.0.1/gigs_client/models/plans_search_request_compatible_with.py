# coding: utf-8

"""
    Gigs Core API

    API to manage voice & data plans for smartphones, wearables and IoT in 200+ countries.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@gigs.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field

class PlansSearchRequestCompatibleWith(BaseModel):
    """
    Compatibility requirements for the plans. Only plans compatible with all requirements are returned. At least one requirement must be specified.
    """
    imei: Optional[Any] = Field(None, description="The IMEI (international mobile equipment identity) of the corresponding device.")
    device_model: Optional[Any] = Field(None, alias="deviceModel", description="The device model identifier of the corresponding device.")
    __properties = ["imei", "deviceModel"]

    @validator('imei')
    def imei_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9]{15,16}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{15,16}$/g")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PlansSearchRequestCompatibleWith:
        """Create an instance of PlansSearchRequestCompatibleWith from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if imei (nullable) is None
        # and __fields_set__ contains the field
        if self.imei is None and "imei" in self.__fields_set__:
            _dict['imei'] = None

        # set to None if device_model (nullable) is None
        # and __fields_set__ contains the field
        if self.device_model is None and "device_model" in self.__fields_set__:
            _dict['deviceModel'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PlansSearchRequestCompatibleWith:
        """Create an instance of PlansSearchRequestCompatibleWith from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PlansSearchRequestCompatibleWith.parse_obj(obj)

        _obj = PlansSearchRequestCompatibleWith.parse_obj({
            "imei": obj.get("imei"),
            "device_model": obj.get("deviceModel")
        })
        return _obj

