# coding: utf-8

"""
    Gigs Core API

    API to manage voice & data plans for smartphones, wearables and IoT in 200+ countries.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@gigs.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field
from gigs_client.models.device_model import DeviceModel
from gigs_client.models.device_user import DeviceUser

class Device(BaseModel):
    """
    Device
    """
    object: Optional[Any] = Field(..., description="Type of object is always `device`.")
    id: Optional[Any] = Field(..., description="Unique identifier for the device.")
    imei: Optional[Any] = Field(..., description="The IMEI (international mobile equipment identity) of the device if provided.")
    model: DeviceModel = Field(...)
    name: Optional[Any] = Field(..., description="An optional custom name for the device.")
    sims: Optional[Any] = Field(..., description="List of SIMs added to this device.")
    user: DeviceUser = Field(...)
    created_at: Optional[Any] = Field(..., alias="createdAt", description="Time when the device was created.")
    __properties = ["object", "id", "imei", "model", "name", "sims", "user", "createdAt"]

    @validator('imei')
    def imei_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9]{15,16}$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{15,16}$/g")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Device:
        """Create an instance of Device from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of model
        if self.model:
            _dict['model'] = self.model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # set to None if object (nullable) is None
        # and __fields_set__ contains the field
        if self.object is None and "object" in self.__fields_set__:
            _dict['object'] = None

        # set to None if id (nullable) is None
        # and __fields_set__ contains the field
        if self.id is None and "id" in self.__fields_set__:
            _dict['id'] = None

        # set to None if imei (nullable) is None
        # and __fields_set__ contains the field
        if self.imei is None and "imei" in self.__fields_set__:
            _dict['imei'] = None

        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict['name'] = None

        # set to None if sims (nullable) is None
        # and __fields_set__ contains the field
        if self.sims is None and "sims" in self.__fields_set__:
            _dict['sims'] = None

        # set to None if created_at (nullable) is None
        # and __fields_set__ contains the field
        if self.created_at is None and "created_at" in self.__fields_set__:
            _dict['createdAt'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Device:
        """Create an instance of Device from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Device.parse_obj(obj)

        _obj = Device.parse_obj({
            "object": obj.get("object"),
            "id": obj.get("id"),
            "imei": obj.get("imei"),
            "model": DeviceModel.from_dict(obj.get("model")) if obj.get("model") is not None else None,
            "name": obj.get("name"),
            "sims": obj.get("sims"),
            "user": DeviceUser.from_dict(obj.get("user")) if obj.get("user") is not None else None,
            "created_at": obj.get("createdAt")
        })
        return _obj

