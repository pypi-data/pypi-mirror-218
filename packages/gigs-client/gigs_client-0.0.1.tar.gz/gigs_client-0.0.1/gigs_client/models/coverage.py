# coding: utf-8

"""
    Gigs Core API

    API to manage voice & data plans for smartphones, wearables and IoT in 200+ countries.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@gigs.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field

class Coverage(BaseModel):
    """
    Coverage
    """
    object: Optional[Any] = Field(..., description="Type of object is always `coverage`.")
    id: Optional[Any] = Field(..., description="Unique identifier for the coverage configuration.")
    countries: Optional[Any] = Field(..., description="List of countries in ISO 3166-1 alpha-2 format covered by this coverage configuration.")
    name: Optional[Any] = Field(..., description="A human-readable identifier of the coverage configuration, might not be unique.")
    __properties = ["object", "id", "countries", "name"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Coverage:
        """Create an instance of Coverage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if object (nullable) is None
        # and __fields_set__ contains the field
        if self.object is None and "object" in self.__fields_set__:
            _dict['object'] = None

        # set to None if id (nullable) is None
        # and __fields_set__ contains the field
        if self.id is None and "id" in self.__fields_set__:
            _dict['id'] = None

        # set to None if countries (nullable) is None
        # and __fields_set__ contains the field
        if self.countries is None and "countries" in self.__fields_set__:
            _dict['countries'] = None

        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict['name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Coverage:
        """Create an instance of Coverage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Coverage.parse_obj(obj)

        _obj = Coverage.parse_obj({
            "object": obj.get("object"),
            "id": obj.get("id"),
            "countries": obj.get("countries"),
            "name": obj.get("name")
        })
        return _obj

