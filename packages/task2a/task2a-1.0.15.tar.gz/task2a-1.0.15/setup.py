# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['pwgen', 'pwgen.cli', 'pwgen.showcase']

package_data = \
{'': ['*']}

install_requires = \
['questionary>=1.10.0,<2.0.0']

entry_points = \
{'console_scripts': ['pwgen = pwgen:pwgen_cli',
                     'pwgen_showcase = pwgen.showcase:pwgen_showcase']}

setup_kwargs = {
    'name': 'task2a',
    'version': '1.0.15',
    'description': 'Password generation CLI and library',
    'long_description': '<p align="center">\n  <a href="https://gitlab.com/Bill-EPAM-DevOpsInt2023/devops-7-avramenko-bill">\n    <img src="https://gitlab.com/EPAM-DevOpsInt2023/devops-7-assets/-/raw/ecd2eb07b44c03c4bcdf5493b45fe46238a12e14/shared/images/title-logo-origin.svg" alt="EPAM DevOps-7 Internal Lab title logo" width="100%" height="300px">\n  </a>\n</p>\n\n<h1 align="center">\n  <div align="center" aria-colspan="0">Password generator.</div>\n  <div align="center" aria-colspan="0">Module 2: Python. Task 2A.</div>\n</h1>\n\n<p align="center">\n  <div align="center">\n    <a href="https://pypi.org/project/task2a/">\n      <img src="https://img.shields.io/pypi/v/task2a.svg?style=for-the-badge&label=task 2a" alt="PYPI v." />\n    </a>&nbsp;\n    <a href="https://gitlab.com/Bill-EPAM-DevOpsInt2023/python/task2a/-/blob/783fe98d0c073fb7de18c872eb6b2d9dfbe81dbc/LICENSE">\n      <img src="https://img.shields.io/pypi/l/task2a.svg?style=for-the-badge" alt="License" />\n    </a>&nbsp;\n    <a href="https://python-poetry.org/">\n      <img src="https://img.shields.io/pypi/v/poetry.svg?style=for-the-badge&label=poetry&color=green" alt="License" />\n    </a>&nbsp;\n    <a href="https://www.python.org/downloads/">\n      <img src="https://img.shields.io/pypi/pyversions/task2a?style=for-the-badge" alt="Python v." />\n    </a>&nbsp;\n  </div>\n</p>\n\n\n## Preface\n\nThis project contains a solution to one of the tasks of the EPAM DevOps Initial Internal Training Course #7 in 2023.\nDetailed information about the course, as well as reports on each of the completed tasks (including this one) can be found [here](https://gitlab.com/Bill-EPAM-DevOpsInt2023/devops-7-avramenko-bill) [![/^](https://gitlab.com/EPAM-DevOpsInt2023/devops-7-assets/-/raw/45ed5458fe7cf837b62a423fcdff6a52b8db3cdb/shared/images/external-link-blue-12.png)](https://gitlab.com/Bill-EPAM-DevOpsInt2023/devops-7-avramenko-bill).\n<br>\nAs mentioned above, the project contains a solution to task #2A as part of module #2 of learning the Python programming language.\nBelow you will find a detailed description of the task, as well as a brief description of the implementation.\n\n## Table of Contents\n\n- [Task description](#task-description)\n- [Detailed conditions](#detailed-conditions)\n    - [Generation Based on Character Sets](#generation-based-on-character-sets)\n    - [Generation Based on Patterns](#generation-based-on-patterns)\n    - [CLI interface arguments](#cli-interface-can-support-next-commands)\n- [Code description](#code-description)\n- [Implementation](#implementation)\n    - [Structure](#structure)\n- [Installation](#installation)\n- [Usage](#usage)\n    - [Library](#library)\n    - [CLI](#cli)\n    - [Pipes and files](#pipes-and-files)\n    - [Showcase](#showcase)\n- [General Provisions](#general-provisions)\n\n## Task description\n\nThe main goal is to implement a password generator that returns whether a randomly generated password or password generated based on the passed template.\n\n## Detailed conditions\n\nWrite a utility for generating passwords according to a given template that supports the CLI interface,\nbe able to work in PIPE and logging (-vvv – show detailed information during processing).\n\nThis password generation app should be implements two ways to generate random passwords:\n- the random method (a password of a given length is randomly generated from a set of\n  characters);\n- the pattern-based generation method is used if passwords follow special rules or fulfill certain\n  conditions.\n\n#### Generation Based on Character Sets\n\nGeneration based on a character set is very simple. You simply let Password Gen know which characters\ncan be used (e.g. upper-case letters, digits, ...) and Password Gen will randomly pick characters out of the\nset.\n\n###### Defining a character set:\n\nThe character set can be defined directly in the argument line. For convenience, PasswordGen offers to add\ncommonly used ranges of characters to the set. This is done by chouse the appropriate optional in the\nargument line. Additionally, to these predefined character ranges, you can specify characters manually: all\ncharacters that you enter in the value of the -S option will be directly added to the character set.\n\n###### Character sets are sets:\n\nIn mathematical terms, character sets are sets, not vectors. This means that characters cannot be added\ntwice to the set. Either a character is in the set or it is not.   \nFor example, if you enter \'AAAAB\' into the value of -S option argument line, this is exactly the same set as\n\'AB\'. \'A\' will not be 4 times as likely as \'B\'! If you need to follow rules like \'character A is more likely than B\',\nyou must use pattern-based generation + permuting password characters.  \nPassword Gen will \'optimize\' your character set by removing all duplicate characters. If you\'d enter the\ncharacter set \'AAAAB\' into the value of -S optional argument line, the password generator, should be\noptimized to the shorter character set \'AB\'. Similarly, if you set the \'\\d\' optional check box and enter \'3\' into\nthe value of the \'-S\' option, \'3\' will be ignored because it is already included in the \'Digits\' character range.\n\n###### Supported characters:\n\nAll Unicode characters in the ranges [U+0001, U+D7FF] and [U+E000, U+FFFF] except { U+0009 / \'\\t\', U+000A\n/ \'\\n\', U+000D / \'\\r\' } are supported. Characters in the range [U+010000, U+10FFFF] (which need to be\nencoded in UTF-16 using surrogate pairs from [0xD800, 0xDFFF]) are not supported. Subsequent processing\nof passwords may have further limitations (for example, the character U+FFFF is forbidden in XML files and\nwill be replaced or removed).\n\n#### Generation Based on Patterns\n\nThe password generator can create passwords using patterns. A pattern is a string defining the layout of\nthe new password. The following placeholders are supported:\n\n<span id="placeholders"/>\n\n| Placeholder | Type                | Character Set                                         |\n|-------------|---------------------|-------------------------------------------------------|\n| d           | Digit               | 0123456789                                            |\n| l           | Lower-Case Letter   | abcdefghijklmnopqrstuvwxyz                            |\n| L           | Mixed-Case Letter   | ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz |\n| u           | Upper-Case Letter   | ABCDEFGHIJKLMNOPQRSTUVWXYZ                            |\n| p           | Punctuation         | ,.;:u                                                 |\n| \\           | Escape (Fixed Char) | Use following character as is.                        |                                   |\n| {n}         | Escape (Repeat)     | Repeat the previous placeholder n times.              |\n| [...]       | Custom Char Set     | Define a custom character set.                        |\n\nThe \\ placeholder is special: it\'s an escape character. The next character that follows the \\ is written directly\ninto the generated password. If you want a \\ in your password at a specific place, you must write \\\\.\n\nUsing the {n} code you can define how many times the previous placeholder should occur. The { } operator duplicates\nplaceholders, not generated characters. Examples:\n- d{4} is equivalent to dddd,\n- dL{4}a is equivalent to dLLLLa and\n- udl{1}du is equivalent to udldu.\n\nThe [...] notation can be used to define a custom character set, from which the password generator will pick one\ncharacter randomly. All characters between the \'[\' and \']\' brackets follow the same rules as the placeholders above.\nThe \'^\' character removes the next placeholders from the character set. Examples:\n- [dp] generates exactly 1 random character out of the set digits + punctuation,\n- [d\\m\\\\@^\\3]{5} generates 5 characters out of the set "012456789m@",\n- [u\\\\_][u\\\\_] generates 2 characters out of the set upper-case + \'_\'.\n\n###### More examples:\n\nddddd => generates for example: 41922, 12733, 43960, 07660, 12390, 74680, ...  \nu{4}d{3}\\-l{2} => DHRF345-st  \nu{4}[dl]{3}\\-l{2} => DHRF3s4-st | FHGFds4-vt | DERS774-sd\n\n###### Generating Passwords that Follow Rules\n\nBelow are some examples of how the pattern generator can be used to generate passwords that follow certain rules.\nImportant! For all the following examples you must enable the \'Randomly permute characters of password\' option (-p)!\n\n| Rule                                                                                                | Pattern   |\n|-----------------------------------------------------------------------------------------------------|-----------|\n| Must consist of 2 upper-case letters, 2 lower-case letters and 2 digits.                            | uullddd   |\n| Must consist of 9 digits and 1 letter.                                                              | d{9}L     |\n| Must consist of 10 alphanumeric characters, where at least 1 is a letter and at least 1 is a digit. | ld[Ld]{8} |\n\n#### CLI interface can support next commands:\n\n- n: Set length of password and generate random password from set {small lateral ASCII, big lateral ASCII,\n  digit}\n- t: Set template for generate passwords\n- f: Getting list of patterns from file and generate for each random password\n- c: number of passwords\n- vvv: Verbose mode (-v |-vv |-vvv )\n- h: help\n- S: character set\n- p: Randomly permute characters of password\n\n**Output:** Can be support pipe redirect (output must view by formatted column or table).\n\n## Code description\n<small>* To better understand the gist, some segments of the actual code may be excluded or simplified in the following snippets.</small>\n\nTo describe the solution of the task in general terms, the following sequence of actions happens:\n- transform the template into a set of placeholders\n- transform the set of placeholders into a set of characters\n- select a random character from the list of characters repeatedly until the password reaches the desired length\n- if necessary permute the characters in the password, then randomly select symbols to shuffle them\n\n```python \ndef generate_passwords(length: int = 8, count: int = 1, template: Optional[str] = None,\n                       placeholders_set: Optional[str] = None, permute: Optional[bool] = False) -> List[str]:\n    # Library entry point \n\ndef generate_password_from_pattern(pattern: str) -> str:\n    # Transform pattern to the list placeholders set\n\ndef generate_character_set(placeholders: str) -> Optional[str]:\n    # Transform placeholders set to character set\n\ndef generate_password_from_character_set(character_set: str, length: int = 1) -> str:\n    # Randomly choose as mach symbols as it needs bases on a password length  \n```\n\nThe process of transformation, whether a template or placeholder-based generation follows some simple steps.\n- split template or placeholder-based string to a list of single placeholder elements\n- multiply on n the previous element if a special placeholder like [{n}](#placeholders) is present\n- convert placeholder set to a character set, using for this set type to avoid duplication of characters\n- exclude some character sets or a particular character from the character set\n\n```python \npat_ls = split_pattern(n_pattern)\n\nwhile any([el for el in pat_ls if <...list contains {n} placeholder ...>]):  # Multiply previous element while tuples present in the list\n  pat_ls = [dup for i, el in enumerate(pat_ls)\n            for dup in ([pat_ls[i - 1]] * el[0] if type(el) is tuple and type(pat_ls[i - 1]) is str else [el])]\n\npat_ls = [generate_character_set(el) for el in pat_ls]  # Replace placeholders to character sets\n```\n\nIf there is a need to create a password using the designated placeholders, we execute our algorithm at a lower level.\nUltimately, the process comes down to randomly selecting characters from a list and repeating it until the desired password length is achieved.\n\n```python \ndef generate_password_from_character_set(length: int, character_set: str) -> str:\n    password = \'\'.join(random.choice(character_set) for _ in range(length))\n    return password \n```\n\nThe character set can be formed both on the basis of `CHARACTER_SETS` dictionary (by default, all placeholders from this dictionary are used),\nand on the basis of explicitly specified characters by using a special symbol in front of them [\\\\](#placeholders).\n\n```python \nCHARACTER_SETS = {\n  \'d\': string.digits,  # Digits\n  \'l\': string.ascii_lowercase,  # Small lateral ASCII\n  \'L\': string.ascii_letters,  # Mixed-case lateral ASCII\n  \'u\': string.ascii_uppercase,  # Big lateral ASCII\n  \'p\': \',.;:\',\n}\n```\n\nWhen considering the implementation required to fulfill the conditions for the application to operate as a [CLI](#cli-interface-can-support-next-commands)\nwith a list of incoming arguments also, it can be seen that the task algorithm is wrapped by a wrapper.\n\n```python \ndef main():\n  parser = argparse.ArgumentParser(description=\'Password Generator\')\n  [parser.add_argument(\'-\' + key, **ARGUMENTS[key].to_argparse()) for key, val in ARGUMENTS.items()]\n  args = parser.parse_args()\n\n  if args.t:\n    generate_passwords(length=args.n, count=args.c, template=args.t, permute=args.p)\n  elif args.f:\n    for i, pattern in enumerate(patterns):\n      generate_passwords(length=args.n, count=args.c, template=pattern, permute=args.p)\n  elif args.S:\n    generate_passwords(length=args.n, count=args.c, placeholders_set=args.S, permute=args.p)\n  else:\n    generate_passwords(length=args.n, count=args.c, permute=args.p)\n```\n\n###### Examining the template transformation algorithm through an example\n\nLet\'s examine the template transformation behavior with the following example `u{2}p{5}l{2}d{2}L\\-[Ld^l^\\4^\\5^\\6^\\7^\\8\\@\\$\\%\\&\\#\\*\\!]{3}`.\n\n**Step #1:** Separate the template into individual placeholders, while keeping elements like {n}, \\<some character>, or [...] intact for the future list.\nThe result will be a list of `[\'u\', \'{2}\', \'p\', \'{5}\', \'d\', \'{2}\', \'L\', \'\\-\', \'[Ld^l^\\4^\\5^\\6^\\7^\\8\\@\\$\\%\\&\\#\\*\\!]\', \'{3}\']`.\n\n```python\nt = \'\'\nfor el in list(pattern):\n    if el in \'[{\\\\\' and not t:\n        t = el\n    elif el in \'}]\' or t == \'\\\\\':\n        t += el\n        split_list.append(t)\n        t = \'\'\n    elif t:\n        t += el\n    else:\n        split_list.append(el)\n```\n\n**Step #2:** Multiply previous elements when {n} element occurs by n. The result will be a list of `[\'u\', \'u\', \'p\', \'p\', \'p\', \'p\', \'p\', \'d\', \'d\', \'L\', \'\\-\', \'[Ld^l^\\4^\\5^\\6^\\7^\\8\\@\\$\\%\\&\\#\\*\\!]\', \'[Ld^l^\\4^\\5^\\6^\\7^\\8\\@\\$\\%\\&\\#\\*\\!]\', \'[Ld^l^\\4^\\5^\\6^\\7^\\8\\@\\$\\%\\&\\#\\*\\!]\']`  \n<br>**Step #3:** Replace all the elements with a character set using [the placeholder set transformation algorithm](#examining-the-placeholder-set-transformation-algorithm-through-an-example).\nFor \\<some character> elements just omit the \\ symbol and leave <some character>. The result will be a list of\n\n```python\n[\n  \'ABCDEFGHIJKLMNOPQRSTUVWXYZ\',\n  \'ABCDEFGHIJKLMNOPQRSTUVWXYZ\',\n  \',.;:\',\n  \',.;:\',\n  \',.;:\',\n  \',.;:\',\n  \',.;:\',\n  \'0123456789\',\n  \'0123456789\',\n  \'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\',\n  \'-\',\n  \'ABCDEFGHIJKLMNOPQRSTUVWXYZ01239@$%&#*!\',\n  \'ABCDEFGHIJKLMNOPQRSTUVWXYZ01239@$%&#*!\',\n  \'ABCDEFGHIJKLMNOPQRSTUVWXYZ01239@$%&#*!\'\n]`\n````\n<br>**Step #4:** Randomly choose one character from a character set for each element of the list and join the list. The final result will be a string like `\'BA,.,:.43g-F$W\'`.\n\n###### Examining the placeholder set transformation algorithm through an example\n\nLet\'s examine the placeholder set transformation behavior with the following example `Ld^l^\\4^\\5^\\6^\\7^\\8\\@\\$\\%\\&\\#\\*\\!d`.\n\n**Step #1:** Separate the placeholders string into individual placeholders, while keeping elements like \\<some character>, ^<some placeholder> or ^\\<some character> intact for the future list.\nThe result will be a list of `[\'L\', \'d\', \'^l\', \'^\\4\', \'^\\5\', \'^\\6\', \'^\\7\', \'^\\8\', \'\\@\', \'\\$\', \'\\%\', \'\\&\', \'\\#\', \'\\*\', \'\\!\', \'d\']`.\n\n```python\nt = \'\'\nfor el in list(placeholders):\n    if el in \'^\\\\\' and not t:\n        t = el\n    elif t == \'^\' and el == \'\\\\\':\n        t += el\n    elif t == \'^\' or t == \'\\\\\' or t == \'^\\\\\':\n        t += el\n        split_list.append(t)\n        t = \'\'\n    else:\n        split_list.append(el)\n```\n\n**Step #2:** Replace placeholders with character sets and decouple list to two lists - the first one for included characters and the second one for excluded characters.\nIncluded character list\n```python\n[\n    \'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\',\n    \'0123456789\',\n    \'@\',\n    \'$\',\n    \'%\',\n    \'&\',\n    \'#\',\n    \'*\',\n    \'!\',\n    \'0123456789\',\n]\n```\nExcluded character list will be\n```python\n[\n    \'abcdefghijklmnopqrstuvwxyz\',\n    \'4\',\n    \'5\',\n    \'6\',\n    \'7\',\n    \'8\',\n]\n```\n\n**Step #3:** Convert lists to sets of characters to eliminate the repetitions.\nIncluded character set will be\n```python\n{\n    \'a\', \'b\', \'c\', \'d\', \'e\', \'f\', \'g\', \'h\', \'i\', \'j\', \'k\', \'l\', \'m\', \'n\', \'o\', \'p\', \'q\', \'r\', \'s\', \'t\', \'u\', \'v\', \'w\', \'x\', \'y\', \'z\', \'A\', \'B\', \'C\', \'D\', \'E\', \'F\',\n    \'G\', \'H\', \'I\', \'J\', \'K\', \'L\', \'M\', \'N\', \'O\', \'P\', \'Q\', \'R\', \'S\', \'T\', \'U\', \'V\', \'W\', \'X\', \'Y\', \'Z\', \'0\', \'1\', \'2\', \'3\', \'4\', \'5\', \'6\', \'7\', \'8\', \'9\', \'@\', \'$\',\n    \'%\', \'&\', \'#\', \'*\', \'!\',  \n}\n```\nExcluded character set will be\n```python\n{\n    \'a\', \'b\', \'c\', \'d\', \'e\', \'f\', \'g\', \'h\', \'i\', \'j\', \'k\', \'l\', \'m\', \'n\', \'o\', \'p\', \'q\', \'r\', \'s\', \'t\', \'u\', \'v\', \'w\', \'x\', \'y\', \'z\', \'4\', \'5\', \'6\', \'7\', \'8\',\n}\n```\n\n**Step #4:** Subtract the excluded character set from the included character set to leave the differences of them and join it to the string.\n```python\ncharacter_set -= excluded_character_set\n\nreturn \'\'.join(str(c) for c in character_set)\n```\nThe differences and the final string will be\n```python\n{\n    \'A\', \'B\', \'C\', \'D\', \'E\', \'F\', \'G\', \'H\', \'I\', \'J\', \'K\', \'L\', \'M\', \'N\', \'O\', \'P\', \'Q\', \'R\', \'S\', \'T\', \'U\', \'V\', \'W\', \'X\', \'Y\', \'Z\', \'0\', \'1\', \'2\', \'3\', \'4\', \'9\',\n    \'@\', \'$\', \'%\', \'&\', \'#\', \'*\', \'!\',\n}\n\n\'\'.join(str(c) for c in character_set)  # \'ABCDEFGHIJKLMNOPQRSTUVWXYZ012349@$%&#*!\'\n```\n\n## Implementation\n\n[Pwgen](https://pypi.org/project/task2a/)[![/^](https://gitlab.com/EPAM-DevOpsInt2023/devops-7-assets/-/raw/45ed5458fe7cf837b62a423fcdff6a52b8db3cdb/shared/images/external-link-blue-12.png)](https://pypi.org/project/task2a/)\nis a Python package that could be added to your global or virtual environment by preferable package manager pip, pipenv, poetry, etc.\nThe project itself was managed and built using the [Poetry library](https://python-poetry.org/)[![/^](https://gitlab.com/EPAM-DevOpsInt2023/devops-7-assets/-/raw/45ed5458fe7cf837b62a423fcdff6a52b8db3cdb/shared/images/external-link-blue-12.png)](https://python-poetry.org/),\nso if you intend to clone this repo and make some changes for your own purposes, please install [Poetry](https://python-poetry.org/docs/#installation)[![/^](https://gitlab.com/EPAM-DevOpsInt2023/devops-7-assets/-/raw/45ed5458fe7cf837b62a423fcdff6a52b8db3cdb/shared/images/external-link-blue-12.png)](https://python-poetry.org/docs/#installation)\nor migrate to your preferred package management library.\n\nBased on the need to build and the possibility of using both the library and the CLI, the code was split into a library for importing and a script for execution\nvia the command line. Additionally, the package contains a showcase that demonstrates all use cases when run through the command line.\n\nTo enhance the command line\'s functionality and expand showcase capabilities, the [Questionary](https://questionary.readthedocs.io/en/stable/)[![/^](https://gitlab.com/EPAM-DevOpsInt2023/devops-7-assets/-/raw/45ed5458fe7cf837b62a423fcdff6a52b8db3cdb/shared/images/external-link-blue-12.png)](https://questionary.readthedocs.io/en/stable/)\nlibrary is used and will be installed through a dependency link upon package installation.\n\n### Structure\n\n```markdown\ntask_2a/\n├── README.md (You are here now)\n├── task_2a.toml # Poetry package management file\n└── pwgen/ (Module 1. Git)\n    ├── __init__.py # library entry point\n    ├── __main__.py # CLI entry point\n    ├── __version__.py \n    ├── pwgen.py # library implementation\n    ├── cli/\n    │   ├── __init__.py\n    │   ├── __main__.py\n    │   └── cli.py # CLI code implementation\n    │\n    └── showcase/\n        ├── __init__.py \n        ├── __main__.py # showcase entry point when using python -m showcase\n        ├── pattern-list.txt # input pattern examples file \n        ├── pattern-list-error.txt # input pattern examples file with intentional errors\n        └── showcase.py # showcase implementation\n```\n\n## Installation\n\nUse your preferred installation method via different package installation managers to install Pwgen.\n\n###### Pip\n\nTo install Pwgen packet to your environment using pip manager invoke `pip install task2a`.\n\n```bash\n$ pip install task2a\nCollecting task2a\n  Using cached task2a-0.1.N-py3-none-any.whl (10 kB)\nCollecting questionary<2.0.0,>=1.10.0 (from task2a)\n  Downloading questionary-1.10.0-py3-none-any.whl (31 kB)\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 31.1/31.1 kB N.N MB/s eta 0:00:00\nCollecting prompt_toolkit<4.0,>=2.0 (from questionary<2.0.0,>=1.10.0->task2a)\n  Downloading prompt_toolkit-3.0.39-py3-none-any.whl (385 kB)\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 385.2/385.2 kB N.N MB/s eta 0:00:00\nRequirement already satisfied: wcwidth in <your environment folder>\\.venv\\lib\\site-packages (from prompt_toolkit<4.0,>=2.0->questionary<2.0.0,>=1.10.0->task2a) (0.2.6)\nInstalling collected packages: prompt_toolkit, questionary, task2a\nSuccessfully installed prompt_toolkit-3.0.39 questionary-1.10.0 task2a-0.1.N\n```\n\nTo uninstall Pwgen from your environment invoke `pip uninstall task2a`.\n\n```bash\n$ pip uninstall task2a\nFound existing installation: task2a 0.1.N\nUninstalling task2a-0.1.N:\n  Would remove:\n    <your environment folder>\\.venv\\lib\\site-packages\\task2a-0.1.N.dist-info\\*\n    <your environment folder>\\.venv\\lib\\site-packages\\task2a\\*\n    <your environment folder>\\.venv\\scripts\\pwgen.exe\n    <your environment folder>\\.venv\\scripts\\pwgen_showcase.exe\nProceed (Y/n)? y\n  Successfully uninstalled task2a-0.1.N\n```\n\nIt\'s important to note that the pip manager does not uninstall dependent packages. Therefore, if you wish to remove them, you\'ll need to take\nthe initiative and perform the task yourself. You can do this by using the commands `pip uninstall questionary` and `pip uninstall prompt-toolkit`.\n\n```bash\n$ pip uninstall questionary\nFound existing installation: questionary 1.10.0\nUninstalling questionary-1.10.0:\n  Would remove:\n    <your environment folder>\\.venv\\lib\\site-packages\\questionary-1.10.0.dist-info\\*\n    <your environment folder>\\.venv\\lib\\site-packages\\questionary\\*\nProceed (Y/n)? y\n  Successfully uninstalled questionary-1.10.0\n```\n\n```bash\n$ pip uninstall prompt-toolkit\nFound existing installation: prompt-toolkit 3.0.39\nUninstalling prompt-toolkit-3.0.39:\n  Would remove:\n    <your environment folder>\\.venv\\lib\\site-packages\\prompt_toolkit-3.0.39.dist-info\\*\n    <your environment folder>\\.venv\\lib\\site-packages\\prompt_toolkit\\*\nProceed (Y/n)? y\n  Successfully uninstalled prompt-toolkit-3.0.39\n```\n\n###### Poetry\n\nTo install Pwgen packet to your environment using poetry manager invoke `poetry add task2a`.\n\n```bash\n$ poetry add task2a\nUsing version ^0.1.N for task2a\n\nUpdating dependencies\nResolving dependencies...\n\nPackage operations: 4 installs, 0 updates, 0 removals\n\n  • Installing wcwidth (0.2.6)\n  • Installing prompt-toolkit (3.0.39)\n  • Installing questionary (1.10.0)\n  • Installing task2a (0.1.N)\n\nWriting lock file\n```\n\nBy taking this action, a new dependency line will be added to your <project name>.toml file.\n\n```toml\n[tool.poetry.dependencies]\ntask2a = "^0.1.N"\n```\n\nTo uninstall Pwgen from your environment invoke `poetry remove task2a`.\nOne of the benefits of utilizing Poetry is that it allows for the removal of all dependent packages with a single command.\n\n```bash\n$ poetry remove task2a\nUpdating dependencies\nResolving dependencies...\n\nPackage operations: 0 installs, 0 updates, 4 removals\n\n  • Removing prompt-toolkit (3.0.39)\n  • Removing questionary (1.10.0)\n  • Removing task2a (0.1.N)\n  • Removing wcwidth (0.2.6)\n\nWriting lock file\n```\n\n## Usage\n\nThere are various ways to use this library, as mentioned earlier.\n- Utilize it like a library you can just import it into your .py file and use generate password methods within your code.\n- Utilize CLI via the command shell, either as a Python module or as a standalone command.\n- Utilize CLI command in a pipe by passing stdout of other commands to the stdin of the pwgen command, writing stdout and stderr to files, or passing them to following commands.\n- The library contains rich showcase command that allows you to test all the use cases and even perform them in batches.\n\n\n#### Library\n\nBelow is a code snippet that demonstrates how to be able to use the pwgen library in your code.\n\n```python\nimport logging\nfrom task2a.pwgen import generate_passwords\n\nclass User:\n    def __init__(self, login: str, name: str, surname:str, department:Optional[str] = None, phone:Optional[str] = None,\n                 one_time_pwd: bool = False, pw_charset:Optional[str] = None, pw_template:Optional[str] = None):\n        self.login = login\n        self.name = name\n        self.surname = surname\n        self.department = department\n        self.phone = phone\n        if one_time_pwd:\n            if  pw_charset:\n                self.password = generate_passwords(placeholders_set=pw_charset)\n            elif pw_pattern:\n                self.password = generate_passwords(template=pw_template)\n            else:\n                self.password = generate_passwords()\n        \n# Interactively gather user information\nlogin = input("Enter login: ")\nname = input("Enter name: ")\nsurname = input("Enter surname: ")\ndepartment = input("Enter department: ")\nphone = input("Enter phone: ")\n\n# Create an instance of the User class\nuser = User(login, name, surname, department, phone)\n```\n#### CLI\n\nThe CLI interface has a single command called "pwgen." It can be invoked using two methods: `python -m pwgen` or simply `pwgen`.\nPwgen accepts various arguments, which are described in the "ARGUMENT" dictionary.\n\n```python\nARGUMENTS = {\n    \'n\': Argument(\'Password length\', \'Set length of password and generate random password from character sets\',\n                  metavar=\'\', type=int, default=8),\n    \'t\': Argument(\'Password pattern\', \'Set template for generating passwords\', metavar=\'\', type=str),\n    \'f\': Argument(\'File with list of patterns\', \'Get list of patterns from file and generate passwords for each pattern\',\n                  metavar=\'\', type=str),\n    \'c\': Argument(\'Number of passwords\', \'Number of passwords to generate\', metavar=\'\', type=int, default=1),\n    \'S\': Argument(\'Custom character set\', \'Define custom character set\', metavar=\'\', type=str),\n    \'p\': Argument(\'Permutation\', \'Randomly permute characters of password\', action=\'store_true\'),\n    \'v\': Argument(\'Verbosity level\', \'Increase verbosity level\', action=\'count\', default=0),\n}\n```\n\nThere are some rules for argument handling:\n- if you pass argument -f, the -t and -S arguments will be ignored\n- if you pass argument -t, the -S arguments will be ignored\n- if no -f, -t, -S arguments are passed, passwords are generated based on the default character set\n\nWhen using input files or stdin via the pipe, it\'s important to pass patterns or lists of patterns only (avoid character sets and other variations).\nEach line in the file will be treated as one pattern.\n\nTo handle the arguments, the [argparse](https://docs.python.org/3/library/argparse.html)[![/^](https://gitlab.com/EPAM-DevOpsInt2023/devops-7-assets/-/raw/45ed5458fe7cf837b62a423fcdff6a52b8db3cdb/shared/images/external-link-blue-12.png)](https://docs.python.org/3/library/argparse.html)\nmodule is used. If you are already acquainted with it, you will have no difficulty in passing the arguments along with their values and comprehending their behavior.\n\nHere is an example list of CLI using, more examples in a more convenient form you could find in the [showcase](#showcase):\n\n| Call example                                                             | Outcome explanation                                                                                                                                                                             |\n|--------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `pwgen` or `python -m pwgen`                                             | One eight-character (default value) password will be generated based on the default character set.                                                                                              |\n| `pwgen -n5` or `pwgen -n 5`                                              | One five-character password will be generated based on the default character set.                                                                                                               |\n| `pwgen -c3`                                                              | Three eight-character passwords will be generated based on the default character set.                                                                                                           |\n| `pwgen -n5 -c3 -p`                                                       | Three five-character passwords will be generated based on the default character set and permutate.                                                                                              |\n| `pwgen -n5 -c3 -v`                                                       | Three five-character passwords will be generated based on the default character set. Warning messages will also be displayed during the generation.                                             |\n| `pwgen -n5 -c3 -vv`                                                      | Three five-character passwords will be generated based on the default character set. Warning and info messages will also be displayed during the generation.                                    |\n| `pwgen -n5 -c3 -vvv`                                                     | Three five-character passwords will be generated based on the default character set. All types of messages will be displayed during the generation.                                             |\n| `pwgen -f .venv/Lib/site-packages/pwgen/test/pattern-list.txt`           | N passwords (based on text lines in the file) will be generated based on each line given template. Pattern length sets the password length.                                                     |\n| `pwgen -f .venv/Lib/site-packages/pwgen/test/pattern-list.txt -n5 -c3`   | N * 3 passwords will be generated based on each line given template. The -n flag will be ignored.                                                                                               |\n| `pwgen -t u{2}p{5}l{2}d{2}L -n5 -c3 -p`                                  | Three passwords will be generated based on a given template and will be permutate after the generation. The -n flag will be ignored.                                                            |\n| `pwgen -S Ld^l^\\\\4^\\\\5^\\\\6^\\\\7^\\\\8 -n5 -c3`                              | Three five-character passwords will be generated based on the given character set. (Please note that in certain cases, you may need to double the \\ symbol to prevent any errors in execution). |\n| `pwgen -t u{2}p{5}l{2}d{2}L -S Ld^l^\\\\4^\\\\5^\\\\6^\\\\7^\\\\8 -n5 -c3`         | N * 3 passwords will be generated based on each line given template. The -n and -s flags will be ignored.                                                                                       |\n\n\n#### Pipes and files\n\nThe pwgen command could be used inside the pipe of the BASH commands. It can be used in various ways within a pipeline:\n- receiving input\n- direct output to a file\n- direct logging also to a file\n- direct output to the next command in the pipeline\n\nHere is an example list of pipeline using, more examples in a more convenient form you could find in the [showcase](#showcase):\n\n| Call example                                                                                                                                                       | Outcome explanation                                                                                                                                                                                                                                                                                      |\n|--------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `cat .venv/Lib/site-packages/pwgen/test/pattern-list.txt \\| pwgen -n5 -c3` or `cat .venv/Lib/site-packages/pwgen/test/pattern-list.txt \\| python -m pwgen -n5 -c3` | A template list is taken from a file and passed as input to pwgen.  Three passwords on each template will be generated. The -n flag will be ignored.                                                                                                                                                     |\n| `pwgen -S "Ld^l^\\\\4^\\\\5^\\\\6^\\\\7^\\\\8" -n5 -c3 -vv > ./pwd-lst.txt`                                                                                                  | Three five-character passwords will be generated based on the given character set. The generated passwords will not be displayed on the screen and will be saved to a file. Warning and info messages will also be displayed during the generation.                                                      |\n| `pwgen -S "Ld^l^\\\\4^\\\\5^\\\\6^\\\\7^\\\\8" -n5 -c3 -vvv 2> ./pwgen.log`                                                                                                  | Three five-character passwords will be generated based on the given character set. The generated passwords will be displayed. All types of messages will not be displayed during the generation and will be saved to a file.                                                                             |\n| `echo u{4}[Ld^l^\\\\4^\\\\5^\\\\6^\\\\7^\\\\8]{3}l{2} \\| pwgen -c6 -n5 \\| sort -r`                                                                                           | The echo message will not be displayed and passed as input to pwgen. Six passwords will be generated based on the echo template, will not be displayed, and passed as input to the sort command. The sort command will sort passwords in reverse order and print them out. The -n flag will be ignored.  |\n\n\n#### Showcase\n\nTo showcase the behavior of the pwgen library, an interactive command called "pwgen_showcase" has been created.\nThis command utilizes both the pwgen CLI and the pwgen library. It\'s an interactive command you can invoke via `pwgen_showcase` or `python -m pwgen.showcase`.\nIt has an optional flag that allows you to view all use cases at once without any interaction.\nYou can use the command `pwgen_showcase --all` to activate this feature.\n\n![showcase_demo.gif](https://gitlab.com/EPAM-DevOpsInt2023/devops-7-assets/-/raw/45ed5458fe7cf837b62a423fcdff6a52b8db3cdb/m2-python/task-2a/images/showcase_demo.gif)\n\n## General provisions\n\nAll materials provided and/or made available contain EPAM’s proprietary and confidential information and must not to be copied,\nreproduced or disclosed to any third party or to any other person, other than those persons who have a bona fide need to review it\nfor the purpose of participation in the online courses being provided by EPAM.\nThe intellectual property rights in all materials (including any trademarks) are owned by EPAM Systems Inc or its associated companies,\nand a limited license, terminable at the discretion of EPAM without notice, is hereby granted to you solely for the purpose of participating\nin the online courses being provided by EPAM. Neither you nor any other party shall acquire any intellectual property rights of any kind\nin such materials.\n\n\n',
    'author': 'Bill.Avramenko',
    'author_email': 'billavramenko@gmail.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://gitlab.com/Bill-EPAM-DevOpsInt2023/python/task2a',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.10,<4.0',
}


setup(**setup_kwargs)
