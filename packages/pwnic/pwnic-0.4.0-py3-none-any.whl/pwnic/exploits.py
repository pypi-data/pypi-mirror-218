import importlib
import sys
from abc import ABC, abstractmethod
from enum import Enum
from pathlib import Path
from threading import Thread

from pwnic.utils import install_package

try:
    from icecream import ic
except ImportError:  # Graceful fallback if IceCream isn't installed.
    ic = lambda *a: None if not a else (a[0] if len(a) == 1 else a)  # noqa


exploits = {}


class ExploitTypes(Enum):
    PYTHON = "python"
    DOCKER = "docker"
    EXECUTABLE = "executable"


class Exploit(ABC):
    def __init__(self, name):
        self.name: str = name

    @abstractmethod
    def run(self, Target):
        pass


class PythonExploit(Exploit):
    def __init__(self, name):
        super().__init__(name)
        self.check_imports()

    def check_imports(self):
        files = list(Path("exploits", self.name).glob("**/[!_]*.py"))
        if len(files) == 1:
            file = files[0]
        else:
            if "__main__.py" in files:
                file = Path("exploits", self.name, "__main__.py")
            elif "main.py" in files:
                file = Path("exploits", self.name, "main.py")
            elif "__init__.py" in file:
                file = Path("exploits", self.name, "__init__.py")
            else:
                raise Exception(
                    f"{self.name} is defined as a python exploit but has more than one .py file and none is '__main__.py', 'main.py' or '__init__.py'. \
                Please define an entrypoint."
                )

        retries = 2
        while retries > 0:
            try:
                spec = importlib.util.spec_from_file_location(
                    self.name, file.resolve()
                )
                module = importlib.util.module_from_spec(spec)  # type: ignore
                sys.modules[self.name] = module
                spec.loader.exec_module(module)  # type: ignore
                self.exploitfun = getattr(sys.modules[self.name], "main")
                exploits[self.name] = self
                break
            except ModuleNotFoundError as e:
                modulename = (
                    e.msg.split()[-1].replace("'", "").replace('"', "")
                )
                ic(e)
                install_package(modulename)
            except Exception:
                ic(e)
            retries -= 1

    def run(self, Target):
        t = Thread(target=self.exploitfun, args=Target)
        t.start()
