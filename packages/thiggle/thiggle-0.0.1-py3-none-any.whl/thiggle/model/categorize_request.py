# coding: utf-8

"""
    Thiggle API

    API for categorizing data with LLMs  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from thiggle import schemas  # noqa: F401


class CategorizeRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "categories",
            "prompt",
        }
        
        class properties:
            prompt = schemas.StrSchema
            
            
            class categories(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'categories':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            allow_null_category = schemas.BoolSchema
            allow_multiple_classes = schemas.BoolSchema
            __annotations__ = {
                "prompt": prompt,
                "categories": categories,
                "allow_null_category": allow_null_category,
                "allow_multiple_classes": allow_multiple_classes,
            }
    
    categories: MetaOapg.properties.categories
    prompt: MetaOapg.properties.prompt
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prompt"]) -> MetaOapg.properties.prompt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["categories"]) -> MetaOapg.properties.categories: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allow_null_category"]) -> MetaOapg.properties.allow_null_category: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allow_multiple_classes"]) -> MetaOapg.properties.allow_multiple_classes: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["prompt", "categories", "allow_null_category", "allow_multiple_classes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prompt"]) -> MetaOapg.properties.prompt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["categories"]) -> MetaOapg.properties.categories: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allow_null_category"]) -> typing.Union[MetaOapg.properties.allow_null_category, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allow_multiple_classes"]) -> typing.Union[MetaOapg.properties.allow_multiple_classes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["prompt", "categories", "allow_null_category", "allow_multiple_classes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        categories: typing.Union[MetaOapg.properties.categories, list, tuple, ],
        prompt: typing.Union[MetaOapg.properties.prompt, str, ],
        allow_null_category: typing.Union[MetaOapg.properties.allow_null_category, bool, schemas.Unset] = schemas.unset,
        allow_multiple_classes: typing.Union[MetaOapg.properties.allow_multiple_classes, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CategorizeRequest':
        return super().__new__(
            cls,
            *_args,
            categories=categories,
            prompt=prompt,
            allow_null_category=allow_null_category,
            allow_multiple_classes=allow_multiple_classes,
            _configuration=_configuration,
            **kwargs,
        )
