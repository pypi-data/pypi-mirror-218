#!/usr/bin/env python3

# imports from normal python site packages
import sys
from pathlib import Path
import comarch.bss.bssenv as BSSENV_PKG

# add custom paths to python site packages
SCRIPT_DIR_PATH = Path(__file__).resolve().parent
LIBS_DIR = SCRIPT_DIR_PATH / '..' / 'lib' / 'python'
BSSENV_PYT_SITE_PKGS = Path(BSSENV_PKG.__file__).resolve().parent / 'data' / 'python_site_packages'
sys.path = [str(BSSENV_PYT_SITE_PKGS), str(LIBS_DIR)] + sys.path

# import from custom site packages
import blessed
import local.env
import local.install
import local.uninstall
from local.commandline import arg
from local.logging import debug
from local.terminal import DictDataUpdater, DictTabularDataPrinter, Screen


def print_help():
    print(
        'Show list of installed and uninstalled config maps\n'
        '\n'
        'configMaps - show list of all installed and uninstalled config maps')


if any(_ in ['?', '--help', '-h'] for _ in arg[1:]):
    print_help()
    exit()

debug(f'Start script {Path(__file__).resolve()}')

if not local.env.is_activated():
    exit('Environment is not activated. Exit\n')

try:
    term = blessed.Terminal()
    screen = Screen(
        term,
        DictDataUpdater(),
        DictTabularDataPrinter(),
        use_secondary_screen_buffer=False)

    # installed config maps
    table = {
        '_METADATA_': {
                'title': 'Installed config maps:',
                'headers': [{'name': 'Config map name', 'overflow': 'fold', 'no_wrap': True}],
                'show_header': True,
                'type': 'table'}}
    rows = []
    for _ in local.install.get_installed_config_maps_entries().values():
        rows.append({'Config map name': _.key})
    table['_ROWS_'] = sorted(rows, key=lambda _: _['Config map name'])
    stdout = {'Installed config maps': table}

    # uninstalled config maps
    table = {
        '_METADATA_': {
                'title': 'Uninstalled config maps:',
                'headers': [{'name': 'Config map name', 'overflow': 'fold', 'no_wrap': True}],
                'show_header': True,
                'type': 'table'},
        '_ROWS_': []}
    rows = []
    for _ in sorted(local.uninstall.get_uninstalled_config_maps()):
        rows.append({'Config map name': _})
    table['_ROWS_'] = rows
    stdout['Uninstalled config maps'] = table
    screen.update(stdout, False, False)
finally:  # TODO: zrobic tak zeby screen byl context managerem
    if screen is not None:
        screen.destroy()
