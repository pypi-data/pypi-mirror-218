#!/usr/bin/env python3

# imports from normal python site packages
import sys
from pathlib import Path
import comarch.bss.bssenv as BSSENV_PKG

# add custom paths to python site packages
SCRIPT_DIR_PATH = Path(__file__).resolve().parent
LIBS_DIR = SCRIPT_DIR_PATH / '..' / 'lib' / 'python'
BSSENV_PYT_SITE_PKGS = Path(BSSENV_PKG.__file__).resolve().parent / \
    'data' / 'python_site_packages'

sys.path = [str(BSSENV_PYT_SITE_PKGS), str(LIBS_DIR)] + sys.path

# import from custom site packages
import local.env
from local.commandline import arg
from local.logging import debug
from local.docker import \
    dockerRegistry, dockerClient, split_image_name, \
    get_remote_name_for_local_image_name, \
    entity_image_to_bssenv_descriptor_image


def print_help():
    print(
        'Retag stable descriptor for service image\n'
        '\n'
        'retagStableDescriptorForImage service_image version [solution]\n'
        '\n'
        'Examples:\n'
        '\tretagStableDescriptorForImage backend:7.7.1.0-SNAPSHOT-ngena 7.7.1.0 ngena\n'  # noqa: E501
        '\tretagStableDescriptorForImage nexus.czk.comarch/repository/telco-bss-docker/backend:7.7.1.0-0-olu 7.7.1.0 olu\n'  # noqa: E501
        '\tretagStableDescriptorForImage dps:7.7.1.0-0 7.7.1.0')


if any(_ in ['?', '--help', '-h'] for _ in arg[1:]):
    print_help()
    exit()

debug(f'Start script {Path(__file__).resolve()}')

if not local.env.is_activated():
    exit('Environment is not activated. Exit\n')

image_name: str = arg(1)
version: str = arg(2)
solution: str = arg(3)

if image_name is None:
    print_help()
    print('\n')
    exit('Please provide service image name argument')

if version is None:
    print_help()
    print('\n')
    exit('Please provide version for stable image')

debug(f'image_name: {image_name}')
debug(f'version: {version}')
debug(f'solution: {solution}')

registry, namespace, repository, tag = split_image_name(image_name)
stable_image_name = f'{repository}:{version}'

if solution is not None:
    stable_image_name += f'-{solution}'

stable_image_name = \
    get_remote_name_for_local_image_name(stable_image_name)
debug(f'stable_image_name: {stable_image_name}')

stable_descriptor_name = \
    entity_image_to_bssenv_descriptor_image(stable_image_name)
debug(f'stable_descriptor_name: {stable_descriptor_name}')

if dockerRegistry.image_exists(stable_descriptor_name):
    dockerClient.pull_image(stable_descriptor_name)
    descriptor_name = entity_image_to_bssenv_descriptor_image(image_name)
    dockerClient.tag_image(stable_descriptor_name, descriptor_name)
else:
    print(f'Descriptor image "{stable_descriptor_name}" do not exist')
    exit(1)
