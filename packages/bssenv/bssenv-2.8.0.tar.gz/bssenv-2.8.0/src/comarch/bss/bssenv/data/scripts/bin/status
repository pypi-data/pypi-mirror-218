#!/usr/bin/env python3

# imports from normal python site packages
import sys
import time
import traceback
from itertools import repeat, chain
from pathlib import Path
import comarch.bss.bssenv as BSSENV_PKG

# add custom paths to python site packages
SCRIPT_DIR_PATH = Path(__file__).resolve().parent
LIBS_DIR = SCRIPT_DIR_PATH / '..' / 'lib' / 'python'
BSSENV_PYT_SITE_PKGS = Path(BSSENV_PKG.__file__).resolve().parent / 'data' / 'python_site_packages'
sys.path = [str(BSSENV_PYT_SITE_PKGS), str(LIBS_DIR)] + sys.path

# import from custom site packages
import blessed
import local.env
import local.install
from local.docker import dockerClient
from local.commandline import arg
from local.terminal import DictDataUpdater, DictTabularDataPrinter, InteractiveScreen, Screen
from local.logging import debug
from local.os import use_raw_output


def print_help():
    print(
        'Show environment status (realtime states and healthchecks)\n'
        '\n'
        'status - show environment status')


if any(_ in ['?', '--help', '-h'] for _ in arg[1:]):
    print_help()
    exit()

debug(f'Start script {Path(__file__).resolve()}')

if not local.env.is_activated():
    exit('Environment is not activated. Exit\n')

try:
    term = blessed.Terminal()
    if use_raw_output() is True:
        screen = Screen(
            term,
            DictDataUpdater(),
            DictTabularDataPrinter()
        )
    else:
        screen = InteractiveScreen(
            term,
            DictDataUpdater(),
            DictTabularDataPrinter())

    while True:
        try:
            status = {
                '_METADATA_':
                    {
                        'title': 'Environment status',
                        'headers': [
                            {'name': 'Name', 'overflow': 'fold', 'no_wrap': True},
                            {'name': 'State', 'overflow': 'fold', 'no_wrap': True},
                            {'name': 'Healthcheck', 'overflow': 'fold', 'no_wrap': True},
                            {'name': 'Image', 'overflow': 'fold', 'no_wrap': True},
                            {'name': 'Container name', 'overflow': 'fold', 'no_wrap': True},
                            {'name': 'Version', 'overflow': 'fold', 'no_wrap': True},
                            {'name': 'Ports', 'overflow': 'ellipsis', 'no_wrap': False}],
                        'show_header': True,
                        'type': 'table'
                    }
            }
            rows = []
            for container in dockerClient.containers(
                all=True, ignore_removed=True, filters={'label': f'bssenv.environment.id={local.env.id()}'}):

                debug(f'container: {container.name}')

                if container.labels.get('bssenv.container.type', None) != 'service':
                    continue

                service_key = container.labels['bssenv.service.key']
                service_name = container.labels['bssenv.service.name']
                command_key = container.labels.get('bssenv.service.command.key', None)

                entity_key = f'{service_key}:{command_key}'

                service, command = None, None
                if local.install.is_installed_service(service_key):
                    service = local.install.get_installed_service(service_key)
                    if command_key:
                        command = (service.commands or {}).get(command_key, None)

                name = service_key
                if command_key:
                    name = entity_key
                elif service:
                    name = service.status_name

                image = container.image.id
                if service:
                    if service.image_name in container.image.tags:
                        image = service.image_name

                ports = dockerClient.container_ports(container.name)
                ports = ', '.join(chain.from_iterable(
                    map(lambda _, __: f'{__["HostIp"]}:{__["HostPort"]}->{_}', repeat(_), __)
                    for _, __ in ports.items() if __ is not None))

                rows.append({
                    'Name': name,
                    'State': container.status,
                    'Healthcheck': dockerClient.container_healthcheck(container.name),
                    'Image': image,
                    'Container name': container.name,
                    'Version': container.labels.get('VERSION', ''),
                    'Ports': ports
                })
                debug(str(rows[-1]))

            status['_ROWS_'] = sorted(rows,key=lambda _: _['Name'])
            debug(str(status['_ROWS_']))

            if screen.update({'status': status}) is None or use_raw_output() is True:
                break
            else:
                time.sleep(1)
        except Exception:
            debug(traceback.format_exc())
finally:
    if screen is not None:
        screen.destroy()
