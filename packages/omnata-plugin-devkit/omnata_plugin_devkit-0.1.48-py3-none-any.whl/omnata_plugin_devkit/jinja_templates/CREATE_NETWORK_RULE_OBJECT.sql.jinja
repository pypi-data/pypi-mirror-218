create or replace procedure PLUGIN.CREATE_NETWORK_RULE_OBJECT(RULE_NAME VARCHAR,VALUE_LIST ARRAY)
   returns object
   language javascript
   execute as owner
as
$$
try{
   // cannot seem to get bindings to work with the network rule value list.
   // unfortunately we'll just have to sanitise the input manually and interpolate
   VALUE_LIST.forEach(function(domainName) {
        if (!isValidDomainName(domainName)){
         throw `Invalid address: ${domainName}`
        }
    });
   var networkAddressList = VALUE_LIST.map(x => `'${x}'`)
   var valueListString = networkAddressList.join(',')

   var networkAddressBindingQmarks = VALUE_LIST.map(x => `?`)
   snowflake.createStatement( {
      sqlText: `CREATE OR REPLACE NETWORK RULE IDENTIFIER(?)
                  MODE = EGRESS
                  TYPE = HOST_PORT
                  VALUE_LIST = (${valueListString})`,
      binds:[RULE_NAME]
   } ).execute();
   snowflake.createStatement( {
      sqlText: `grant usage on network rule IDENTIFIER(?) to application role OMNATA_MANAGEMENT`,
      binds:[RULE_NAME]
   } ).execute();
   return {
        "success": true,
        "data": null
   }
}
catch(e){
   return {
      "success": false,
      "error": `CREATE_NETWORK_RULE_OBJECT: ${String(e)}`
   }
}

function isValidDomainName(domainName) {
    // Domain names must be between 1 and 253 characters long
    if (domainName.length < 1 || domainName.length > 253) {
        return false;
    }

    // Split the domain into its labels (parts separated by periods)
    let labels = domainName.split('.');

    // Each label must be between 1 and 63 characters long
    for (let i = 0; i < labels.length; i++) {
        if (labels[i].length < 1 || labels[i].length > 63) {
            return false;
        }
    }

    // Check each character of the domain name
    let regex = /^[a-z0-9]([-a-z0-9]*[a-z0-9])?$/i;
    for (let label of labels) {
        // If any character is not valid, return false
        if (!regex.test(label)) {
            return false;
        }
    }

    // If we've made it this far without returning false, the domain is valid
    return true;
}

$$
;

grant usage on procedure PLUGIN.CREATE_NETWORK_RULE_OBJECT(VARCHAR,ARRAY)
to application role OMNATA_MANAGEMENT;

