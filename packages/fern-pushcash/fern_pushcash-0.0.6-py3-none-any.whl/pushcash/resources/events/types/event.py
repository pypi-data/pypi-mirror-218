# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ....core.datetime_utils import serialize_datetime
from .event_source_type import EventSourceType
from .event_type import EventType


class Event(pydantic.BaseModel):
    id: str = pydantic.Field(description=("the identifier for the event\n"))
    created_at: typing.Optional[str] = pydantic.Field(description=("when the event occurred\n"))
    source_id: str = pydantic.Field(description=("the identifier of the resource who's status has updated\n"))
    source_type: EventSourceType = pydantic.Field(description=("the type of the resource which has been updated\n"))
    event_type: EventType = pydantic.Field(
        description=("the type of event indicates how the status of the resource has changed\n")
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
