# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ....core.datetime_utils import serialize_datetime
from ...commons.types.currency import Currency
from ...commons.types.direction import Direction
from .transfer_status import TransferStatus


class Transfer(pydantic.BaseModel):
    id: str = pydantic.Field(description=('The unique identifier assigned by Push, prefix is "transfer_"\n'))
    amount: int = pydantic.Field(description=("Amount of the transfer\n"))
    direction: Direction
    currency: Currency
    arrival_date: str = pydantic.Field(description=('Date the funds will arrive, formatted "YYYY-MM-DD"\n'))
    status: TransferStatus

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
