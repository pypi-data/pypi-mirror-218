# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx
import pydantic

from ...core.api_error import ApiError
from ...core.datetime_utils import serialize_datetime
from ...core.remove_none_from_headers import remove_none_from_headers
from ...environment import PushCashEnvironment
from .types.event import Event
from .types.list_events_response import ListEventsResponse


class EventsClient:
    def __init__(self, *, environment: PushCashEnvironment = PushCashEnvironment.PRODUCTION, token: str):
        self._environment = environment
        self._token = token

    def get(self, id: str) -> Event:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", f"event/{id}"),
            headers=remove_none_from_headers(
                {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Event, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list(
        self,
        *,
        created_at_after: typing.Optional[dt.datetime] = None,
        created_at_before: typing.Optional[dt.datetime] = None,
        cursor: typing.Optional[str] = None,
    ) -> ListEventsResponse:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", "event/list"),
            params={
                "created_at.after": serialize_datetime(created_at_after) if created_at_after is not None else None,
                "created_at.before": serialize_datetime(created_at_before) if created_at_before is not None else None,
                "cursor": cursor,
            },
            headers=remove_none_from_headers(
                {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ListEventsResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncEventsClient:
    def __init__(self, *, environment: PushCashEnvironment = PushCashEnvironment.PRODUCTION, token: str):
        self._environment = environment
        self._token = token

    async def get(self, id: str) -> Event:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET",
                urllib.parse.urljoin(f"{self._environment.value}/", f"event/{id}"),
                headers=remove_none_from_headers(
                    {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Event, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list(
        self,
        *,
        created_at_after: typing.Optional[dt.datetime] = None,
        created_at_before: typing.Optional[dt.datetime] = None,
        cursor: typing.Optional[str] = None,
    ) -> ListEventsResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET",
                urllib.parse.urljoin(f"{self._environment.value}/", "event/list"),
                params={
                    "created_at.after": serialize_datetime(created_at_after) if created_at_after is not None else None,
                    "created_at.before": serialize_datetime(created_at_before)
                    if created_at_before is not None
                    else None,
                    "cursor": cursor,
                },
                headers=remove_none_from_headers(
                    {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ListEventsResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
