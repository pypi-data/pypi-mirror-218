# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class EventType(str, enum.Enum):
    """
    the type of event indicates how the status of the resource has changed
    """

    INTENT_PROCESSED = "intent.processed"
    INTENT_CHARGEDBACK = "intent.chargedback"
    TRANSACTION_AVAILABLE = "transaction.available"

    def visit(
        self,
        intent_processed: typing.Callable[[], T_Result],
        intent_chargedback: typing.Callable[[], T_Result],
        transaction_available: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is EventType.INTENT_PROCESSED:
            return intent_processed()
        if self is EventType.INTENT_CHARGEDBACK:
            return intent_chargedback()
        if self is EventType.TRANSACTION_AVAILABLE:
            return transaction_available()
