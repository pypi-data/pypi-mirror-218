# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class IntentStatus(str, enum.Enum):
    REQUIRES_INIT = "requires_init"
    INITIALIZED = "initialized"
    APPROVED = "approved"
    CANCELED = "canceled"
    DECLINED = "declined"
    ERROR = "error"
    PROCESSED = "processed"
    TIMEDOUT = "timedout"
    CHARGEDBACK = "chargedback"

    def visit(
        self,
        requires_init: typing.Callable[[], T_Result],
        initialized: typing.Callable[[], T_Result],
        approved: typing.Callable[[], T_Result],
        canceled: typing.Callable[[], T_Result],
        declined: typing.Callable[[], T_Result],
        error: typing.Callable[[], T_Result],
        processed: typing.Callable[[], T_Result],
        timedout: typing.Callable[[], T_Result],
        chargedback: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is IntentStatus.REQUIRES_INIT:
            return requires_init()
        if self is IntentStatus.INITIALIZED:
            return initialized()
        if self is IntentStatus.APPROVED:
            return approved()
        if self is IntentStatus.CANCELED:
            return canceled()
        if self is IntentStatus.DECLINED:
            return declined()
        if self is IntentStatus.ERROR:
            return error()
        if self is IntentStatus.PROCESSED:
            return processed()
        if self is IntentStatus.TIMEDOUT:
            return timedout()
        if self is IntentStatus.CHARGEDBACK:
            return chargedback()
