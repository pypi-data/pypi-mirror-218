# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx
import pydantic

from ...core.api_error import ApiError
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_headers import remove_none_from_headers
from ...environment import PushCashEnvironment
from ..commons.types.currency import Currency
from ..commons.types.direction import Direction
from .types.list_transfers_response import ListTransfersResponse
from .types.transfer import Transfer
from .types.transfer_status import TransferStatus


class TransferClient:
    def __init__(self, *, environment: PushCashEnvironment = PushCashEnvironment.PRODUCTION, token: str):
        self._environment = environment
        self._token = token

    def create(self, *, direction: Direction, amount: int, currency: Currency, idempotency_key: str) -> Transfer:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "transfer"),
            json=jsonable_encoder({"direction": direction, "amount": amount, "currency": currency}),
            headers=remove_none_from_headers(
                {
                    "X-Idempotency-Key": idempotency_key,
                    "Authorization": f"Bearer {self._token}" if self._token is not None else None,
                }
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Transfer, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list(
        self,
        *,
        created_at_after: typing.Optional[str] = None,
        created_at_before: typing.Optional[str] = None,
        cursor: typing.Optional[str] = None,
        status: typing.Union[typing.Optional[TransferStatus], typing.List[TransferStatus]],
    ) -> ListTransfersResponse:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", "transfer/list"),
            params={
                "created_at.after": created_at_after,
                "created_at.before": created_at_before,
                "cursor": cursor,
                "status": status,
            },
            headers=remove_none_from_headers(
                {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ListTransfersResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(self, id: str) -> Transfer:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", f"transfer/{id}"),
            headers=remove_none_from_headers(
                {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Transfer, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncTransferClient:
    def __init__(self, *, environment: PushCashEnvironment = PushCashEnvironment.PRODUCTION, token: str):
        self._environment = environment
        self._token = token

    async def create(self, *, direction: Direction, amount: int, currency: Currency, idempotency_key: str) -> Transfer:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "transfer"),
                json=jsonable_encoder({"direction": direction, "amount": amount, "currency": currency}),
                headers=remove_none_from_headers(
                    {
                        "X-Idempotency-Key": idempotency_key,
                        "Authorization": f"Bearer {self._token}" if self._token is not None else None,
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Transfer, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list(
        self,
        *,
        created_at_after: typing.Optional[str] = None,
        created_at_before: typing.Optional[str] = None,
        cursor: typing.Optional[str] = None,
        status: typing.Union[typing.Optional[TransferStatus], typing.List[TransferStatus]],
    ) -> ListTransfersResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET",
                urllib.parse.urljoin(f"{self._environment.value}/", "transfer/list"),
                params={
                    "created_at.after": created_at_after,
                    "created_at.before": created_at_before,
                    "cursor": cursor,
                    "status": status,
                },
                headers=remove_none_from_headers(
                    {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ListTransfersResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(self, id: str) -> Transfer:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET",
                urllib.parse.urljoin(f"{self._environment.value}/", f"transfer/{id}"),
                headers=remove_none_from_headers(
                    {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Transfer, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
