# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ....core.datetime_utils import serialize_datetime
from ...commons.types.currency import Currency
from .transaction_fee_detail import TransactionFeeDetail
from .transaction_source import TransactionSource
from .transaction_status import TransactionStatus


class Transaction(pydantic.BaseModel):
    id: str = pydantic.Field(description=("The unique identifier assigned by Push\n"))
    amount: int = pydantic.Field(description=("Gross amount of the transaction\n"))
    net: int = pydantic.Field(description=("Net amount of the transaction\n"))
    fee: int = pydantic.Field(description=("Fee paid to Push for the transaction\n"))
    fee_details: typing.List[TransactionFeeDetail] = pydantic.Field(description=("Details on the fees paid\n"))
    currency: Currency
    status: TransactionStatus
    created_at: str = pydantic.Field(description=("When the transaction was created (ISO 8061 date string)\n"))
    available_at: str = pydantic.Field(
        description=(
            "When the funds from the transaction will be made available in the account balance (ISO 8061 date string)\n"
        )
    )
    source: TransactionSource

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
