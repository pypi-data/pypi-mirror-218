# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ....core.datetime_utils import serialize_datetime
from ...commons.types.currency import Currency


class AccountBalance(pydantic.BaseModel):
    available: int = pydantic.Field(
        description=(
            "Funds that are available to be transferred to your primary business checking account, or used to fund your users “cash-out” transactions.\n"
        )
    )
    pending: int = pydantic.Field(
        description=(
            "Funds that are not yet available to be used for a bank_transfer or used for cash_out.  Examples of transactions that would impact this balance type include pending bank_transfers  (e.g. ACH credit not yet initiated, ACH debit has not yet settled).\n"
        )
    )
    currency: Currency

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
