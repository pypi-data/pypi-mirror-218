# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ....core.datetime_utils import serialize_datetime
from .payment_credential_account import PaymentCredentialAccount
from .payment_credential_card import PaymentCredentialCard


class PaymentCredential(pydantic.BaseModel):
    """
    The array will be empty until the user completes their first transaction. Additional transactions will utilize stored payment credentials
    """

    bank_name: str = pydantic.Field(description=("the name of the bank associated with the credential\n"))
    account: PaymentCredentialAccount
    card: PaymentCredentialCard
    created_at: str = pydantic.Field(
        description=("Datetime for when the payment credential was created for the user\n")
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
