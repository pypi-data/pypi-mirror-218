# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx
import pydantic

from ...core.api_error import ApiError
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_headers import remove_none_from_headers
from ...environment import PushCashEnvironment
from .types.kyc import Kyc
from .types.list_users_response import ListUsersResponse
from .types.update_user_request_status import UpdateUserRequestStatus
from .types.user import User

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class UserClient:
    def __init__(self, *, environment: PushCashEnvironment = PushCashEnvironment.PRODUCTION, token: str):
        self._environment = environment
        self._token = token

    def create(
        self,
        *,
        tag: typing.Optional[str] = OMIT,
        name: str,
        address: str,
        email: typing.Optional[str] = OMIT,
        phone: typing.Optional[str] = OMIT,
        kyc: Kyc,
        idempotency_key: str,
    ) -> User:
        _request: typing.Dict[str, typing.Any] = {"name": name, "address": address, "kyc": kyc}
        if tag is not OMIT:
            _request["tag"] = tag
        if email is not OMIT:
            _request["email"] = email
        if phone is not OMIT:
            _request["phone"] = phone
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "user"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers(
                {
                    "X-Idempotency-Key": idempotency_key,
                    "Authorization": f"Bearer {self._token}" if self._token is not None else None,
                }
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(User, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list(
        self, *, created_at_after: typing.Optional[str] = None, created_at_before: typing.Optional[str] = None
    ) -> ListUsersResponse:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", "user/list"),
            params={"created_at.after": created_at_after, "created_at.before": created_at_before},
            headers=remove_none_from_headers(
                {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ListUsersResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(self, id: str) -> User:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment.value}/", f"user/{id}"),
            headers=remove_none_from_headers(
                {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(User, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(self, id: str, *, status: UpdateUserRequestStatus) -> User:
        _response = httpx.request(
            "PUT",
            urllib.parse.urljoin(f"{self._environment.value}/", f"user/{id}"),
            json=jsonable_encoder({"status": status}),
            headers=remove_none_from_headers(
                {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(User, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncUserClient:
    def __init__(self, *, environment: PushCashEnvironment = PushCashEnvironment.PRODUCTION, token: str):
        self._environment = environment
        self._token = token

    async def create(
        self,
        *,
        tag: typing.Optional[str] = OMIT,
        name: str,
        address: str,
        email: typing.Optional[str] = OMIT,
        phone: typing.Optional[str] = OMIT,
        kyc: Kyc,
        idempotency_key: str,
    ) -> User:
        _request: typing.Dict[str, typing.Any] = {"name": name, "address": address, "kyc": kyc}
        if tag is not OMIT:
            _request["tag"] = tag
        if email is not OMIT:
            _request["email"] = email
        if phone is not OMIT:
            _request["phone"] = phone
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment.value}/", "user"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers(
                    {
                        "X-Idempotency-Key": idempotency_key,
                        "Authorization": f"Bearer {self._token}" if self._token is not None else None,
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(User, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list(
        self, *, created_at_after: typing.Optional[str] = None, created_at_before: typing.Optional[str] = None
    ) -> ListUsersResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET",
                urllib.parse.urljoin(f"{self._environment.value}/", "user/list"),
                params={"created_at.after": created_at_after, "created_at.before": created_at_before},
                headers=remove_none_from_headers(
                    {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ListUsersResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(self, id: str) -> User:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET",
                urllib.parse.urljoin(f"{self._environment.value}/", f"user/{id}"),
                headers=remove_none_from_headers(
                    {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(User, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(self, id: str, *, status: UpdateUserRequestStatus) -> User:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "PUT",
                urllib.parse.urljoin(f"{self._environment.value}/", f"user/{id}"),
                json=jsonable_encoder({"status": status}),
                headers=remove_none_from_headers(
                    {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(User, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
