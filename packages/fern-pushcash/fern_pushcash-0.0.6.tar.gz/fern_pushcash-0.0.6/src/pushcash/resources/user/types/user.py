# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ....core.datetime_utils import serialize_datetime
from .kyc import Kyc
from .payment_credential import PaymentCredential
from .user_status import UserStatus


class User(pydantic.BaseModel):
    id: str = pydantic.Field(description=("Push's identifier assigned to the user\n"))
    tag: str = pydantic.Field(description=("the tag for the user\n"))
    name: str
    address: str
    email: typing.Optional[str]
    phone: typing.Optional[str]
    kyc: Kyc
    payment_credentials: typing.List[PaymentCredential] = pydantic.Field(
        description=(
            "The array will be empty until the user completes their first transaction. Additional transactions will utilize stored payment credentials\n"
        )
    )
    created_at: str = pydantic.Field(description=("Date and time in which user was first created in system\n"))
    status: UserStatus

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
