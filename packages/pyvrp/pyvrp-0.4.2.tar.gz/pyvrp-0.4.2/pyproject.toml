[tool.poetry]
name = "pyvrp"
version = "0.4.2"
description = "A state-of-the-art vehicle routing problem solver."
authors = [
    "Niels Wouda <nielswouda@gmail.com>",
    "Leon Lan <leon.lanyidong@gmail.com>",
    "Wouter Kool <wouter.kool@ortec.com>",
]
license = "MIT"
readme = "README.md"
repository = "https://github.com/PyVRP/PyVRP"
include = [
    { path = "LICENSE.md" },
    { path = "meson.build", format = "sdist" },
    { path = "meson_options.txt", format = "sdist" },
    { path = "build_extensions.py", format = "sdist" },
    { path = "pyvrp/**/*.so", format = "wheel" },
    { path = "pyvrp/**/*.pyd", format = "wheel" },
]
packages = [
    { include = "pyvrp" },
]
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Development Status :: 5 - Production/Stable",
    "Topic :: Software Development",
    "Topic :: Scientific/Engineering",
]


[tool.poetry.urls]
"Tracker" = "https://github.com/PyVRP/PyVRP/issues"


[tool.poetry.dependencies]
python = "^3.8,<4.0"
numpy = ">=1.15.2"
matplotlib = ">=2.2.0"
vrplib = "^1.0.0"
tqdm = "^4.64.1"
tomli = "^2.0.1"


[tool.poetry.group.docs]
optional = true


[tool.poetry.group.docs.dependencies]
tomli = ">=2.0.1"
nbsphinx = ">=0.8.9"
ipython = ">=8.6.0"
numpydoc = ">=1.5.0"
sphinx_rtd_theme = ">=0.5.1"
sphinx-autoapi = ">=2.0.1"
docutils = "==0.16"


[tool.poetry.group.examples]
optional = true


[tool.poetry.group.examples.dependencies]
jupyter = ">=1.0.0"
tabulate = "^0.9.0"


[tool.poetry.group.dev.dependencies]
pre-commit = "^2.20.0"
pytest = ">=6.0.0"
pytest-cov = ">=2.6.1"
codecov = "*"

# These are used in the build script: for compiling the library (meson, ninja)
# and for generating type stubs (mypy).
meson = "^1.0.0"
ninja = "^1.11.1"
mypy = "^0.991"


[tool.poetry.scripts]
pyvrp = "pyvrp.cli:main"


[tool.black]
line-length = 79


[tool.isort]
case_sensitive = true
line_length = 79
profile = "black"


[tool.mypy]
ignore_missing_imports = true


[tool.pytest.ini_options]
addopts = "--cov=. --cov-report=xml --cov-report=term"
testpaths = "pyvrp"


[tool.coverage.run]
omit = [
    "build_extensions.py",  # build entrypoint
    "pyvrp/show_versions.py",  # only prints debug information
    "pyvrp/cli.py",  # tested in other ways than unit tests
    "*/tests/*",
    "venv/*",
    "docs/*",
]


[tool.coverage.report]
exclude_lines = [
    # This excludes all abstract methods from code coverage checks as they are
    # never instantiated directly anyway.
    "pragma: no cover",
    "@abstract",
]


[tool.cibuildwheel]
# We do not support old Python versions (<3.8) and somewhat uncommon platforms.
# For musllinux-based builds we assume users can compile the thing themselves.
skip = "cp36-* cp37-* pp* *_ppc64le *_i686 *_s390x *-win32 *-musllinux*"
build-verbosity = "3"
build-frontend = "build"


[tool.poetry.build]
generate-setup-file = false
script = "build_extensions.py"


[build-system]
# meson and ninja are needed to build the C++ extensions.
requires = ["poetry-core", "meson", "ninja"]
build-backend = "poetry.core.masonry.api"
