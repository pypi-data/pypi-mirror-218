{"version":3,"sources":["Screen.tsx","index.tsx"],"names":["getWindowSize","_window","window","innerWidth","innerHeight","Screen","_StreamlitComponentBa","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","state","render","_jsx","_handleWindowResize","bind","_assertThisInitialized","_createClass","key","value","addEventListener","this","removeEventListener","Math","abs","setState","Streamlit","setComponentValue","StreamlitComponentBase","withStreamlitConnection","ReactDOM","React","StrictMode","children","document","getElementById"],"mappings":"6NASMA,EAAgB,WACpB,IAAAC,EAAoCC,OACpC,MAAO,CAAEC,WADSF,EAAVE,WACaC,YADUH,EAAXG,YAGtB,EACMC,EAAM,SAAAC,GAAAC,YAAAF,EAAAC,GAAA,IAAAE,EAAAC,YAAAJ,GACV,SAAAA,EAAYK,GAAa,IAADC,EAEwC,OAFxCC,YAAA,KAAAP,IACtBM,EAAAH,EAAAK,KAAA,KAAMH,IAIDI,MAAQ,CAAEZ,OAAQ,GAAGS,EAqBrBI,OAAS,WAId,OACEC,cAAA,SAGJ,EAhCEL,EAAKM,oBAAsBN,EAAKM,oBAAoBC,KAAIC,YAAAR,IAAMA,CAChE,CAqBC,OArBAS,YAAAf,EAAA,EAAAgB,IAAA,oBAAAC,MAID,WACEpB,OAAOqB,iBAAiB,SAAUC,KAAKP,qBACvCO,KAAKP,qBACP,GAAC,CAAAI,IAAA,uBAAAC,MACD,WACEpB,OAAOuB,oBAAoB,SAAUD,KAAKP,qBAC1CO,KAAKP,qBACP,GAAC,CAAAI,IAAA,sBAAAC,MAED,YAC2B,GAArBE,KAAKV,MAAMZ,QAAewB,KAAKC,IAAKH,KAAKV,MAAMZ,OAASF,IAAgBG,YAAc,MACxFqB,KAAKI,UAAS,iBAAO,CACnB1B,OAAQF,IAAgBG,WACzB,IACD0B,IAAUC,kBAAkB9B,KAGhC,KAACK,CAAA,CAzBS,CAAS0B,KAuCNC,cAAwB3B,GCjDvC4B,IAASlB,OACPC,cAACkB,IAAMC,WAAU,CAAAC,SACfpB,cAACX,EAAM,MAETgC,SAASC,eAAe,Q","file":"static/js/main.cba499ab.chunk.js","sourcesContent":["import {\r\n  Streamlit,\r\n  StreamlitComponentBase,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\"\r\nimport React, { ReactNode } from \"react\"\r\n\r\n// the `render()` function is called when component is re-rendered\r\n\r\nconst getWindowSize = () => {\r\n  const { innerWidth, innerHeight } = window\r\n  return { innerWidth, innerHeight }\r\n  \r\n}\r\nclass Screen extends StreamlitComponentBase<any> {\r\n  constructor(props: any) {\r\n    super(props)\r\n    this._handleWindowResize = this._handleWindowResize.bind(this)\r\n  }\r\n\r\n  public state = { window: 0 }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener(\"resize\", this._handleWindowResize)\r\n    this._handleWindowResize()\r\n  }\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", this._handleWindowResize)\r\n    this._handleWindowResize()\r\n  }\r\n\r\n  _handleWindowResize() {\r\n    if (this.state.window == 0 || Math.abs( this.state.window - getWindowSize().innerWidth) > 10) {\r\n      this.setState(() => ({\r\n        window: getWindowSize().innerWidth,\r\n      }))\r\n      Streamlit.setComponentValue(getWindowSize())\r\n    }\r\n    \r\n  }\r\n\r\n  public render = (): ReactNode => {\r\n    // Arguments that are passed to the plugin in Python are accessible\r\n    // via `this.props.args`\r\n    \r\n    return (\r\n      <div >\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n// connection between component and Streamlit\r\nexport default withStreamlitConnection(Screen)\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport Screen from \"./Screen\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Screen />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n"],"sourceRoot":""}