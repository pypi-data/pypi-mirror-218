# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import cli_pb2 as cli__pb2


class CliStub(object):
  """The greeting service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Command = channel.unary_unary(
        '/dingman.Cli/Command',
        request_serializer=cli__pb2.CliRequest.SerializeToString,
        response_deserializer=cli__pb2.CliReply.FromString,
        )


class CliServicer(object):
  """The greeting service definition.
  """

  def Command(self, request, context):
    """Sends a greeting
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_CliServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Command': grpc.unary_unary_rpc_method_handler(
          servicer.Command,
          request_deserializer=cli__pb2.CliRequest.FromString,
          response_serializer=cli__pb2.CliReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'dingman.Cli', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
