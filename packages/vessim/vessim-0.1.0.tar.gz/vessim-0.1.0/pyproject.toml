[project]
name = "vessim"
dynamic = ["version", "description"]
readme = "README.md"
requires-python = ">=3.8"
license = {file = "LICENSE"}
keywords = ["simulation", "energy system", "testbed", "carbon-aware"]
authors = [{name = "Philipp Wiesner", email = "wiesner@tu-berlin.de"}]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Science/Research",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Topic :: Scientific/Engineering",
  "Topic :: Software Development :: Testing",
  "Topic :: Education",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3 :: Only",
]

dependencies = [
  "pandas",
  "mosaik",
  "mosaik-api",
  "loguru",  # TODO shall we remove this?
]

[project.optional-dependencies]
sil = [
  "requests",
  "fastapi",
  "docker",
  "uvicorn",
]
dev = [
  # testing
  "pytest",
  # typechecking
  "mypy",
  "types-psutil",
  "pandas-stubs",
  "types-requests",
  # linting
  "black",
  "ruff",
  # build
  "flit",
]
analysis = [
  "jupyterlab",
  "matplotlib",
  "seaborn==0.12.2",
]


[project.urls]  # Optional
"Homepage" = "https://github.com/dos-group/vessim"
"Source" = "https://github.com/dos-group/vessim"
"Bug Reports" = "https://github.com/dos-group/vessim/issues"

# The following would provide a command line executable called `sample`
# which executes the function `main` from this package when invoked.
# [project.scripts]  # Optional
# sample = "sample:main"

[build-system]
requires = ["flit_core >=3.2,<4"]
build-backend = "flit_core.buildapi"

[tool.flit.sdist]
exclude = ["data"]

[tool.flit.module]
name = "vessim"

[tool.black]
line-length = 90  # Set the maximum characters per line
target-version = ['py38']   # Set python versions that black should format the code for
include = '\.py$'  # Format only python files

[tool.ruff]
# Enable Ruff to check for issues (https://beta.ruff.rs/docs/rules)
select = [
  "E", "W",  # pycodestyle (error and warning)
  "D",  # docstrings
  "F",  # Pyflakes
  "N",  # variable naming
  #  "B",  # flake8-bugbear
]

# For now the following rules are disabled:
#   D100: Missing docstring in public module
#   D101: Missing docstring in public class
#   D102: Missing docstring in public method
#   D103: Missing docstring in public function
#   D107: Missing docstring in __init__
ignore = ["D100", "D101", "D102", "D103", "D107"]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["D", "E", "W"]
unfixable = ["F"]

line-length = 90  # Set the maximum characters per line (similar to black)
target-version = "py38"  # Set python version for linting (similar to black)
include = ["*.py"]  # Only enable linting for python files (similar to black)

# Exclude specific directories and all defaults
extend-exclude = ["example_node", "simulator/power_meter.py", "carbon-aware_control_unit"]

# Configure Ruff to enforce Google-style docstrings when checking documentation
[tool.ruff.pydocstyle]
convention = "google"

# Configure mypy to ignore missing imports
[mypy]
ignore_missing_imports = true
