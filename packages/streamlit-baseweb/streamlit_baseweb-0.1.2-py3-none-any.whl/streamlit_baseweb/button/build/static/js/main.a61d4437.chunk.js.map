{"version":3,"sources":["Button.tsx","webpack:///./src/index.tsx?d986"],"names":["state","BaseWebButton","_StreamlitComponentBa","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","render","React","createElement","Button","disabled","props","size","shape","kind","onClick","onClicked","Streamlit","setComponentValue","_createClass","key","value","setFrameHeight","StreamlitComponentBase","withStreamlitConnection","engine","Styletron","ReactDOM","StrictMode","StyletronProvider","document","getElementById"],"mappings":"iQASIA,EAAQ,OAENC,EAAa,SAAAC,GAAAC,YAAAF,EAAAC,GAAA,IAAAE,EAAAC,YAAAJ,GAAA,SAAAA,IAAA,IAAAK,EAAAC,YAAA,KAAAN,GAAA,QAAAO,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GA8Bd,OA9BcP,EAAAF,EAAAU,KAAAC,MAAAX,EAAA,OAAAY,OAAAL,KAcRM,OAAS,WACZ,OACIC,IAAAC,cAACC,IAAM,CACHC,SAAUf,EAAKgB,MAAMX,KAAe,SACpCY,KAAMjB,EAAKgB,MAAMX,KAAW,KAC5Ba,MAAOlB,EAAKgB,MAAMX,KAAY,MAC9Bc,KAAMnB,EAAKgB,MAAMX,KAAW,KAC5Be,QAASpB,EAAKqB,WACbrB,EAAKgB,MAAMX,KAAY,QAGnCL,EAEMqB,UAAY,WACfC,IAAUC,mBAAkB,GAC5B7B,EAAQ,WACXM,EAlBA,OAkBAwB,YAAA7B,EAAA,EAAA8B,IAAA,oBAAAC,MA7BD,WACIJ,IAAUK,eAAe,MAC5B,CAAAF,IAAA,qBAAAC,MACD,WACkB,YAAVhC,EACAA,EAAQ,QAEO,UAAVA,IACL4B,IAAUC,mBAAkB,GAC5B7B,EAAQ,YAEfC,EAZc,CAASiC,KAkCbC,cAAwBlC,G,QCtCjCmC,EAAS,I,MAAIC,GAEnBC,IAASrB,OACPC,IAAAC,cAACD,IAAMqB,WAAU,KACfrB,IAAAC,cAACqB,IAAiB,CAACR,MAAOI,GACxBlB,IAAAC,cAAClB,EAAa,QAGlBwC,SAASC,eAAe,W","file":"static/js/main.a61d4437.chunk.js","sourcesContent":["import {\r\n    Streamlit,\r\n    StreamlitComponentBase,\r\n    withStreamlitConnection,\r\n} from \"streamlit-component-lib\"\r\nimport React, { useEffect, ReactNode, useState } from \"react\"\r\nimport { Button } from \"baseui/button\";\r\n\r\n\r\nlet state = \"idle\";\r\n\r\nclass BaseWebButton extends StreamlitComponentBase {\r\n    public componentDidMount() {\r\n        Streamlit.setFrameHeight(70);\r\n    }\r\n    public componentDidUpdate(): void {\r\n        if (state === \"clicked\") {\r\n            state = \"reset\"\r\n        }\r\n        else if (state === \"reset\") {\r\n            Streamlit.setComponentValue(false);\r\n            state = \"idle\"\r\n        }\r\n    }\r\n\r\n    public render = (): ReactNode => {\r\n        return (\r\n            <Button\r\n                disabled={this.props.args[\"disabled\"]}\r\n                size={this.props.args[\"size\"]}\r\n                shape={this.props.args[\"shape\"]}\r\n                kind={this.props.args[\"kind\"]}\r\n                onClick={this.onClicked}>\r\n                {this.props.args[\"label\"]}\r\n            </Button>\r\n        );\r\n    }\r\n\r\n    public onClicked = () => {\r\n        Streamlit.setComponentValue(true);\r\n        state = \"clicked\"\r\n    }\r\n\r\n}\r\n\r\nexport default withStreamlitConnection(BaseWebButton)","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport BaseWebButton from \"./Button\"\r\nimport { Provider as StyletronProvider } from \"styletron-react\";\r\nimport { Client as Styletron } from \"styletron-engine-atomic\";\r\n\r\n\r\nconst engine = new Styletron();\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <StyletronProvider value={engine}>\r\n      <BaseWebButton />\r\n    </StyletronProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)"],"sourceRoot":""}