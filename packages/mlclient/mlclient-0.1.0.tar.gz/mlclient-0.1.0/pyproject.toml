[build-system]
requires = ["setuptools>=61.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mlclient"
version = "0.1.0"
description = "A python client managing your MarkLogic instance"
readme = "README.md"
requires-python = ">=3.7"
authors = [{ name = "T.A. Programming Svcs.", email = "tomasz.maciej.aniolowski@gmail.com" }]
license = { file = "LICENSE" }
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "License :: OSI Approved :: MIT License",
    "Topic :: Database",
    "Topic :: Database :: Database Engines/Servers",
    "Topic :: Software Development",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
]
keywords = ["MarkLogic", "marklogic", "database", "client", "data", "xml", "json", "NoSQL", "nosql"]
dependencies = [
    "requests",
    "python-dateutil"
]

[project.urls]
GitHub = "https://github.com/TomaszAniolowski/ml-py"

[project.optional-dependencies]
dev = [
    "bumpver",
    "build",
    "twine",
    "ruff",
    "isort",
    "pytest",
    "pytest-cov"
]
test = [
    "pytest",
    "pytest-cov"
]

[tool.bumpver]
current_version = "0.1.0"
version_pattern = "MAJOR.MINOR.PATCH"
commit_message  = "Bump version {old_version} to {new_version}"
commit          = true
tag             = false
push            = false

[tool.bumpver.file_patterns]
"pyproject.toml" = ['current_version = "{version}"', 'version = "{version}"']
"mlclient/__init__.py" = ["{version}"]

[tool.pytest.ini_options]
pythonpath = ["."]
addopts = "--strict-markers"
markers = [
    "ml_access" # marks tests requiring an ML access
]

[tool.coverage.report]
show_missing = true
skip_covered = true
exclude_lines = [
    # Don't complain if non-runnable code isn't run:
    "if __name__ == .__main__.:",
    # Don't complain about abstract methods, they aren't run:
    "raise NotImplementedError$"
]

[tool.isort]
skip_glob=[
    # Disable imports' sorting when the import order is important
    "mlclient/calls/__init__.py"
]

[tool.ruff]
select = [
    "F", "E", "W", "C90", "N", "D", "UP", "B", "A", "COM", "C4", "EM", "EXE", "ISC", "G", "PIE", "T20",
    "PT", "Q", "RSE", "RET", "SLF", "SIM", "ARG", "PTH", "ERA", "PD", "PGH", "PL", "TRY", "RUF", "FLY",
    "ASYNC", "FA", "FIX", "CPY", "PERF"
]
ignore = []
exclude = [
    ".git",
    ".github",
    ".idea",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "__pycache__",
    "dist",
    "venv"
]
ignore-init-module-imports = true

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.per-file-ignores]
"tests/*" = [
    "D", # disable pydocstyle for tests
    "EM101", # allow string literals in exceptions' tests
    "PLC1901", # allow comparison to blank string in tests
    "PLR2004", # allow magic values in tests
    "SLF001" # allow private members access in tests
]
