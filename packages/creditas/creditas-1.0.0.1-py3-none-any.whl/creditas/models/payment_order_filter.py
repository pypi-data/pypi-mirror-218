# coding: utf-8

"""
    Creditas OpenAPI

    This is specification of the Creditas OpenAPI. It contains definitions of Creditas banking services exposed via API accessible on the internet.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: is@creditas.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from creditas.configuration import Configuration


class PaymentOrderFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'type': 'str',
        'partner_account': 'PaymentOrderFilterPartnerAccount',
        'amount_from': 'str',
        'amount_to': 'str',
        'date_from': 'date',
        'date_to': 'date',
        'variable_symbol': 'str',
        'bulk_payment_order_id': 'str'
    }

    attribute_map = {
        'state': 'state',
        'type': 'type',
        'partner_account': 'partnerAccount',
        'amount_from': 'amountFrom',
        'amount_to': 'amountTo',
        'date_from': 'dateFrom',
        'date_to': 'dateTo',
        'variable_symbol': 'variableSymbol',
        'bulk_payment_order_id': 'bulkPaymentOrderId'
    }

    def __init__(self, state=None, type=None, partner_account=None, amount_from=None, amount_to=None, date_from=None, date_to=None, variable_symbol=None, bulk_payment_order_id=None, _configuration=None):  # noqa: E501
        """PaymentOrderFilter - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._state = None
        self._type = None
        self._partner_account = None
        self._amount_from = None
        self._amount_to = None
        self._date_from = None
        self._date_to = None
        self._variable_symbol = None
        self._bulk_payment_order_id = None
        self.discriminator = None

        if state is not None:
            self.state = state
        if type is not None:
            self.type = type
        if partner_account is not None:
            self.partner_account = partner_account
        if amount_from is not None:
            self.amount_from = amount_from
        if amount_to is not None:
            self.amount_to = amount_to
        if date_from is not None:
            self.date_from = date_from
        if date_to is not None:
            self.date_to = date_to
        if variable_symbol is not None:
            self.variable_symbol = variable_symbol
        if bulk_payment_order_id is not None:
            self.bulk_payment_order_id = bulk_payment_order_id

    @property
    def state(self):
        """Gets the state of this PaymentOrderFilter.  # noqa: E501

        The payment order state  # noqa: E501

        :return: The state of this PaymentOrderFilter.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PaymentOrderFilter.

        The payment order state  # noqa: E501

        :param state: The state of this PaymentOrderFilter.  # noqa: E501
        :type: str
        """
        allowed_values = ["PENDING", "PROCESSED", "FAILED", "CANCELLED", "AUTHORIZATION_REQUIRED"]  # noqa: E501
        if (self._configuration.client_side_validation and
                state not in allowed_values):
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def type(self):
        """Gets the type of this PaymentOrderFilter.  # noqa: E501

        The payment order type  # noqa: E501

        :return: The type of this PaymentOrderFilter.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PaymentOrderFilter.

        The payment order type  # noqa: E501

        :param type: The type of this PaymentOrderFilter.  # noqa: E501
        :type: str
        """
        allowed_values = ["DOMESTIC", "FOREIGN", "SEPA", "DIRECTDEBIT"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def partner_account(self):
        """Gets the partner_account of this PaymentOrderFilter.  # noqa: E501


        :return: The partner_account of this PaymentOrderFilter.  # noqa: E501
        :rtype: PaymentOrderFilterPartnerAccount
        """
        return self._partner_account

    @partner_account.setter
    def partner_account(self, partner_account):
        """Sets the partner_account of this PaymentOrderFilter.


        :param partner_account: The partner_account of this PaymentOrderFilter.  # noqa: E501
        :type: PaymentOrderFilterPartnerAccount
        """

        self._partner_account = partner_account

    @property
    def amount_from(self):
        """Gets the amount_from of this PaymentOrderFilter.  # noqa: E501

        The minimal payment amount for filtering  # noqa: E501

        :return: The amount_from of this PaymentOrderFilter.  # noqa: E501
        :rtype: str
        """
        return self._amount_from

    @amount_from.setter
    def amount_from(self, amount_from):
        """Sets the amount_from of this PaymentOrderFilter.

        The minimal payment amount for filtering  # noqa: E501

        :param amount_from: The amount_from of this PaymentOrderFilter.  # noqa: E501
        :type: str
        """

        self._amount_from = amount_from

    @property
    def amount_to(self):
        """Gets the amount_to of this PaymentOrderFilter.  # noqa: E501

        The maximal payment amount for filtering  # noqa: E501

        :return: The amount_to of this PaymentOrderFilter.  # noqa: E501
        :rtype: str
        """
        return self._amount_to

    @amount_to.setter
    def amount_to(self, amount_to):
        """Sets the amount_to of this PaymentOrderFilter.

        The maximal payment amount for filtering  # noqa: E501

        :param amount_to: The amount_to of this PaymentOrderFilter.  # noqa: E501
        :type: str
        """

        self._amount_to = amount_to

    @property
    def date_from(self):
        """Gets the date_from of this PaymentOrderFilter.  # noqa: E501

        The minimal effective/value date for filtering  # noqa: E501

        :return: The date_from of this PaymentOrderFilter.  # noqa: E501
        :rtype: date
        """
        return self._date_from

    @date_from.setter
    def date_from(self, date_from):
        """Sets the date_from of this PaymentOrderFilter.

        The minimal effective/value date for filtering  # noqa: E501

        :param date_from: The date_from of this PaymentOrderFilter.  # noqa: E501
        :type: date
        """

        self._date_from = date_from

    @property
    def date_to(self):
        """Gets the date_to of this PaymentOrderFilter.  # noqa: E501

        The maximal effective/value date for filtering  # noqa: E501

        :return: The date_to of this PaymentOrderFilter.  # noqa: E501
        :rtype: date
        """
        return self._date_to

    @date_to.setter
    def date_to(self, date_to):
        """Sets the date_to of this PaymentOrderFilter.

        The maximal effective/value date for filtering  # noqa: E501

        :param date_to: The date_to of this PaymentOrderFilter.  # noqa: E501
        :type: date
        """

        self._date_to = date_to

    @property
    def variable_symbol(self):
        """Gets the variable_symbol of this PaymentOrderFilter.  # noqa: E501

        The variable symbol (exact match)  # noqa: E501

        :return: The variable_symbol of this PaymentOrderFilter.  # noqa: E501
        :rtype: str
        """
        return self._variable_symbol

    @variable_symbol.setter
    def variable_symbol(self, variable_symbol):
        """Sets the variable_symbol of this PaymentOrderFilter.

        The variable symbol (exact match)  # noqa: E501

        :param variable_symbol: The variable_symbol of this PaymentOrderFilter.  # noqa: E501
        :type: str
        """

        self._variable_symbol = variable_symbol

    @property
    def bulk_payment_order_id(self):
        """Gets the bulk_payment_order_id of this PaymentOrderFilter.  # noqa: E501

        The unique identifier for bulk order the payment is associated with  # noqa: E501

        :return: The bulk_payment_order_id of this PaymentOrderFilter.  # noqa: E501
        :rtype: str
        """
        return self._bulk_payment_order_id

    @bulk_payment_order_id.setter
    def bulk_payment_order_id(self, bulk_payment_order_id):
        """Sets the bulk_payment_order_id of this PaymentOrderFilter.

        The unique identifier for bulk order the payment is associated with  # noqa: E501

        :param bulk_payment_order_id: The bulk_payment_order_id of this PaymentOrderFilter.  # noqa: E501
        :type: str
        """

        self._bulk_payment_order_id = bulk_payment_order_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentOrderFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentOrderFilter):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PaymentOrderFilter):
            return True

        return self.to_dict() != other.to_dict()
