# coding: utf-8

"""
    Creditas OpenAPI

    This is specification of the Creditas OpenAPI. It contains definitions of Creditas banking services exposed via API accessible on the internet.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: is@creditas.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from creditas.configuration import Configuration


class InlineResponse20027(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'item_count': 'int',
        'item_count_error': 'int',
        'error_log': 'str',
        'status': 'str',
        'reference': 'str',
        'bulk_payment_order_id': 'str'
    }

    attribute_map = {
        'item_count': 'itemCount',
        'item_count_error': 'itemCountError',
        'error_log': 'errorLog',
        'status': 'status',
        'reference': 'reference',
        'bulk_payment_order_id': 'bulkPaymentOrderId'
    }

    def __init__(self, item_count=None, item_count_error=None, error_log=None, status=None, reference=None, bulk_payment_order_id=None, _configuration=None):  # noqa: E501
        """InlineResponse20027 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._item_count = None
        self._item_count_error = None
        self._error_log = None
        self._status = None
        self._reference = None
        self._bulk_payment_order_id = None
        self.discriminator = None

        if item_count is not None:
            self.item_count = item_count
        if item_count_error is not None:
            self.item_count_error = item_count_error
        if error_log is not None:
            self.error_log = error_log
        if status is not None:
            self.status = status
        if reference is not None:
            self.reference = reference
        if bulk_payment_order_id is not None:
            self.bulk_payment_order_id = bulk_payment_order_id

    @property
    def item_count(self):
        """Gets the item_count of this InlineResponse20027.  # noqa: E501

        The number of Imported Items  # noqa: E501

        :return: The item_count of this InlineResponse20027.  # noqa: E501
        :rtype: int
        """
        return self._item_count

    @item_count.setter
    def item_count(self, item_count):
        """Sets the item_count of this InlineResponse20027.

        The number of Imported Items  # noqa: E501

        :param item_count: The item_count of this InlineResponse20027.  # noqa: E501
        :type: int
        """

        self._item_count = item_count

    @property
    def item_count_error(self):
        """Gets the item_count_error of this InlineResponse20027.  # noqa: E501

        The number of invalid items  # noqa: E501

        :return: The item_count_error of this InlineResponse20027.  # noqa: E501
        :rtype: int
        """
        return self._item_count_error

    @item_count_error.setter
    def item_count_error(self, item_count_error):
        """Sets the item_count_error of this InlineResponse20027.

        The number of invalid items  # noqa: E501

        :param item_count_error: The item_count_error of this InlineResponse20027.  # noqa: E501
        :type: int
        """

        self._item_count_error = item_count_error

    @property
    def error_log(self):
        """Gets the error_log of this InlineResponse20027.  # noqa: E501

        Error log  # noqa: E501

        :return: The error_log of this InlineResponse20027.  # noqa: E501
        :rtype: str
        """
        return self._error_log

    @error_log.setter
    def error_log(self, error_log):
        """Sets the error_log of this InlineResponse20027.

        Error log  # noqa: E501

        :param error_log: The error_log of this InlineResponse20027.  # noqa: E501
        :type: str
        """

        self._error_log = error_log

    @property
    def status(self):
        """Gets the status of this InlineResponse20027.  # noqa: E501

        The import processing status IN_PROGRESS, COMPLETE, CANCELLED, FAILED  # noqa: E501

        :return: The status of this InlineResponse20027.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse20027.

        The import processing status IN_PROGRESS, COMPLETE, CANCELLED, FAILED  # noqa: E501

        :param status: The status of this InlineResponse20027.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def reference(self):
        """Gets the reference of this InlineResponse20027.  # noqa: E501

        The import user defined name/id  # noqa: E501

        :return: The reference of this InlineResponse20027.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this InlineResponse20027.

        The import user defined name/id  # noqa: E501

        :param reference: The reference of this InlineResponse20027.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def bulk_payment_order_id(self):
        """Gets the bulk_payment_order_id of this InlineResponse20027.  # noqa: E501

        The unique identifier for bulk payment order created from the import. It can be used in filter of transaction or payment search APIs  # noqa: E501

        :return: The bulk_payment_order_id of this InlineResponse20027.  # noqa: E501
        :rtype: str
        """
        return self._bulk_payment_order_id

    @bulk_payment_order_id.setter
    def bulk_payment_order_id(self, bulk_payment_order_id):
        """Sets the bulk_payment_order_id of this InlineResponse20027.

        The unique identifier for bulk payment order created from the import. It can be used in filter of transaction or payment search APIs  # noqa: E501

        :param bulk_payment_order_id: The bulk_payment_order_id of this InlineResponse20027.  # noqa: E501
        :type: str
        """

        self._bulk_payment_order_id = bulk_payment_order_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20027, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20027):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse20027):
            return True

        return self.to_dict() != other.to_dict()
