# coding: utf-8

"""
    Creditas OpenAPI

    This is specification of the Creditas OpenAPI. It contains definitions of Creditas banking services exposed via API accessible on the internet.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: is@creditas.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from creditas.configuration import Configuration


class Body8(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'format': 'str',
        'filter': 'AccountTransactionFilter'
    }

    attribute_map = {
        'account_id': 'accountId',
        'format': 'format',
        'filter': 'filter'
    }

    def __init__(self, account_id=None, format=None, filter=None, _configuration=None):  # noqa: E501
        """Body8 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._account_id = None
        self._format = None
        self._filter = None
        self.discriminator = None

        self.account_id = account_id
        self.format = format
        if filter is not None:
            self.filter = filter

    @property
    def account_id(self):
        """Gets the account_id of this Body8.  # noqa: E501

        The unique identifier for the account  # noqa: E501

        :return: The account_id of this Body8.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Body8.

        The unique identifier for the account  # noqa: E501

        :param account_id: The account_id of this Body8.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                account_id is not None and len(account_id) > 40):
            raise ValueError("Invalid value for `account_id`, length must be less than or equal to `40`")  # noqa: E501

        self._account_id = account_id

    @property
    def format(self):
        """Gets the format of this Body8.  # noqa: E501

        The export format  # noqa: E501

        :return: The format of this Body8.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this Body8.

        The export format  # noqa: E501

        :param format: The format of this Body8.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and format is None:
            raise ValueError("Invalid value for `format`, must not be `None`")  # noqa: E501
        allowed_values = ["PDF", "CSV", "XML"]  # noqa: E501
        if (self._configuration.client_side_validation and
                format not in allowed_values):
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"  # noqa: E501
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def filter(self):
        """Gets the filter of this Body8.  # noqa: E501


        :return: The filter of this Body8.  # noqa: E501
        :rtype: AccountTransactionFilter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this Body8.


        :param filter: The filter of this Body8.  # noqa: E501
        :type: AccountTransactionFilter
        """

        self._filter = filter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body8, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body8):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Body8):
            return True

        return self.to_dict() != other.to_dict()
