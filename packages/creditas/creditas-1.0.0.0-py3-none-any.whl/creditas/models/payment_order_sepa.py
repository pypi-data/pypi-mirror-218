# coding: utf-8

"""
    Creditas OpenAPI

    This is specification of the Creditas OpenAPI. It contains definitions of Creditas banking services exposed via API accessible on the internet.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: is@creditas.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from creditas.configuration import Configuration


class PaymentOrderSepa(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'payment_order_id': 'str',
        'state': 'str',
        'type': 'str',
        'source_account': 'SourceAccount',
        'partner_account': 'PaymentOrderSepaPartnerAccount',
        'amount': 'Money',
        'payers_reference': 'str',
        'remittance_info': 'str',
        'user_note': 'str',
        'due_date': 'date',
        'created': 'datetime'
    }

    attribute_map = {
        'payment_order_id': 'paymentOrderId',
        'state': 'state',
        'type': 'type',
        'source_account': 'sourceAccount',
        'partner_account': 'partnerAccount',
        'amount': 'amount',
        'payers_reference': 'payersReference',
        'remittance_info': 'remittanceInfo',
        'user_note': 'userNote',
        'due_date': 'dueDate',
        'created': 'created'
    }

    def __init__(self, payment_order_id=None, state=None, type=None, source_account=None, partner_account=None, amount=None, payers_reference=None, remittance_info=None, user_note=None, due_date=None, created=None, _configuration=None):  # noqa: E501
        """PaymentOrderSepa - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._payment_order_id = None
        self._state = None
        self._type = None
        self._source_account = None
        self._partner_account = None
        self._amount = None
        self._payers_reference = None
        self._remittance_info = None
        self._user_note = None
        self._due_date = None
        self._created = None
        self.discriminator = None

        if payment_order_id is not None:
            self.payment_order_id = payment_order_id
        if state is not None:
            self.state = state
        if type is not None:
            self.type = type
        if source_account is not None:
            self.source_account = source_account
        if partner_account is not None:
            self.partner_account = partner_account
        if amount is not None:
            self.amount = amount
        if payers_reference is not None:
            self.payers_reference = payers_reference
        if remittance_info is not None:
            self.remittance_info = remittance_info
        if user_note is not None:
            self.user_note = user_note
        if due_date is not None:
            self.due_date = due_date
        if created is not None:
            self.created = created

    @property
    def payment_order_id(self):
        """Gets the payment_order_id of this PaymentOrderSepa.  # noqa: E501

        The unique identifier for the payment order  # noqa: E501

        :return: The payment_order_id of this PaymentOrderSepa.  # noqa: E501
        :rtype: str
        """
        return self._payment_order_id

    @payment_order_id.setter
    def payment_order_id(self, payment_order_id):
        """Sets the payment_order_id of this PaymentOrderSepa.

        The unique identifier for the payment order  # noqa: E501

        :param payment_order_id: The payment_order_id of this PaymentOrderSepa.  # noqa: E501
        :type: str
        """

        self._payment_order_id = payment_order_id

    @property
    def state(self):
        """Gets the state of this PaymentOrderSepa.  # noqa: E501

        The payment order state  # noqa: E501

        :return: The state of this PaymentOrderSepa.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PaymentOrderSepa.

        The payment order state  # noqa: E501

        :param state: The state of this PaymentOrderSepa.  # noqa: E501
        :type: str
        """
        allowed_values = ["PENDING", "PROCESSED", "FAILED", "CANCELLED", "AUTHORIZATION_REQUIRED"]  # noqa: E501
        if (self._configuration.client_side_validation and
                state not in allowed_values):
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def type(self):
        """Gets the type of this PaymentOrderSepa.  # noqa: E501

        The payment order type  # noqa: E501

        :return: The type of this PaymentOrderSepa.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PaymentOrderSepa.

        The payment order type  # noqa: E501

        :param type: The type of this PaymentOrderSepa.  # noqa: E501
        :type: str
        """
        allowed_values = ["DOMESTIC", "FOREIGN", "SEPA", "DIRECTDEBIT"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def source_account(self):
        """Gets the source_account of this PaymentOrderSepa.  # noqa: E501


        :return: The source_account of this PaymentOrderSepa.  # noqa: E501
        :rtype: SourceAccount
        """
        return self._source_account

    @source_account.setter
    def source_account(self, source_account):
        """Sets the source_account of this PaymentOrderSepa.


        :param source_account: The source_account of this PaymentOrderSepa.  # noqa: E501
        :type: SourceAccount
        """

        self._source_account = source_account

    @property
    def partner_account(self):
        """Gets the partner_account of this PaymentOrderSepa.  # noqa: E501


        :return: The partner_account of this PaymentOrderSepa.  # noqa: E501
        :rtype: PaymentOrderSepaPartnerAccount
        """
        return self._partner_account

    @partner_account.setter
    def partner_account(self, partner_account):
        """Sets the partner_account of this PaymentOrderSepa.


        :param partner_account: The partner_account of this PaymentOrderSepa.  # noqa: E501
        :type: PaymentOrderSepaPartnerAccount
        """

        self._partner_account = partner_account

    @property
    def amount(self):
        """Gets the amount of this PaymentOrderSepa.  # noqa: E501


        :return: The amount of this PaymentOrderSepa.  # noqa: E501
        :rtype: Money
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PaymentOrderSepa.


        :param amount: The amount of this PaymentOrderSepa.  # noqa: E501
        :type: Money
        """

        self._amount = amount

    @property
    def payers_reference(self):
        """Gets the payers_reference of this PaymentOrderSepa.  # noqa: E501

        Information allowing the beneficiary to identify the payment  # noqa: E501

        :return: The payers_reference of this PaymentOrderSepa.  # noqa: E501
        :rtype: str
        """
        return self._payers_reference

    @payers_reference.setter
    def payers_reference(self, payers_reference):
        """Sets the payers_reference of this PaymentOrderSepa.

        Information allowing the beneficiary to identify the payment  # noqa: E501

        :param payers_reference: The payers_reference of this PaymentOrderSepa.  # noqa: E501
        :type: str
        """

        self._payers_reference = payers_reference

    @property
    def remittance_info(self):
        """Gets the remittance_info of this PaymentOrderSepa.  # noqa: E501

        The remittance information - additional information for the payment beneficiary  # noqa: E501

        :return: The remittance_info of this PaymentOrderSepa.  # noqa: E501
        :rtype: str
        """
        return self._remittance_info

    @remittance_info.setter
    def remittance_info(self, remittance_info):
        """Sets the remittance_info of this PaymentOrderSepa.

        The remittance information - additional information for the payment beneficiary  # noqa: E501

        :param remittance_info: The remittance_info of this PaymentOrderSepa.  # noqa: E501
        :type: str
        """

        self._remittance_info = remittance_info

    @property
    def user_note(self):
        """Gets the user_note of this PaymentOrderSepa.  # noqa: E501

        The user defined note (it is not sent to beneficiary‘s bank)  # noqa: E501

        :return: The user_note of this PaymentOrderSepa.  # noqa: E501
        :rtype: str
        """
        return self._user_note

    @user_note.setter
    def user_note(self, user_note):
        """Sets the user_note of this PaymentOrderSepa.

        The user defined note (it is not sent to beneficiary‘s bank)  # noqa: E501

        :param user_note: The user_note of this PaymentOrderSepa.  # noqa: E501
        :type: str
        """

        self._user_note = user_note

    @property
    def due_date(self):
        """Gets the due_date of this PaymentOrderSepa.  # noqa: E501

        The payment order due date  # noqa: E501

        :return: The due_date of this PaymentOrderSepa.  # noqa: E501
        :rtype: date
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this PaymentOrderSepa.

        The payment order due date  # noqa: E501

        :param due_date: The due_date of this PaymentOrderSepa.  # noqa: E501
        :type: date
        """

        self._due_date = due_date

    @property
    def created(self):
        """Gets the created of this PaymentOrderSepa.  # noqa: E501

        The date and time the payment order has been created  # noqa: E501

        :return: The created of this PaymentOrderSepa.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this PaymentOrderSepa.

        The date and time the payment order has been created  # noqa: E501

        :param created: The created of this PaymentOrderSepa.  # noqa: E501
        :type: datetime
        """

        self._created = created

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentOrderSepa, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentOrderSepa):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PaymentOrderSepa):
            return True

        return self.to_dict() != other.to_dict()
