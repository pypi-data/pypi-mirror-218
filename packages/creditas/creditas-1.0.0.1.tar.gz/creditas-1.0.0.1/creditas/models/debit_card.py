# coding: utf-8

"""
    Creditas OpenAPI

    This is specification of the Creditas OpenAPI. It contains definitions of Creditas banking services exposed via API accessible on the internet.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: is@creditas.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from creditas.configuration import Configuration


class DebitCard(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'card_id': 'str',
        'number': 'str',
        'currency': 'str',
        'status': 'str',
        'holder': 'str',
        'alias': 'str',
        'product_i18_n': 'str',
        'available_balance': 'str',
        'brand': 'str',
        'expiration': 'date'
    }

    attribute_map = {
        'card_id': 'cardId',
        'number': 'number',
        'currency': 'currency',
        'status': 'status',
        'holder': 'holder',
        'alias': 'alias',
        'product_i18_n': 'productI18N',
        'available_balance': 'availableBalance',
        'brand': 'brand',
        'expiration': 'expiration'
    }

    def __init__(self, card_id=None, number=None, currency=None, status=None, holder=None, alias=None, product_i18_n=None, available_balance=None, brand=None, expiration=None, _configuration=None):  # noqa: E501
        """DebitCard - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._card_id = None
        self._number = None
        self._currency = None
        self._status = None
        self._holder = None
        self._alias = None
        self._product_i18_n = None
        self._available_balance = None
        self._brand = None
        self._expiration = None
        self.discriminator = None

        if card_id is not None:
            self.card_id = card_id
        if number is not None:
            self.number = number
        if currency is not None:
            self.currency = currency
        if status is not None:
            self.status = status
        if holder is not None:
            self.holder = holder
        if alias is not None:
            self.alias = alias
        if product_i18_n is not None:
            self.product_i18_n = product_i18_n
        if available_balance is not None:
            self.available_balance = available_balance
        if brand is not None:
            self.brand = brand
        if expiration is not None:
            self.expiration = expiration

    @property
    def card_id(self):
        """Gets the card_id of this DebitCard.  # noqa: E501

        The unique identifier for the card  # noqa: E501

        :return: The card_id of this DebitCard.  # noqa: E501
        :rtype: str
        """
        return self._card_id

    @card_id.setter
    def card_id(self, card_id):
        """Sets the card_id of this DebitCard.

        The unique identifier for the card  # noqa: E501

        :param card_id: The card_id of this DebitCard.  # noqa: E501
        :type: str
        """

        self._card_id = card_id

    @property
    def number(self):
        """Gets the number of this DebitCard.  # noqa: E501

        The card number masked  # noqa: E501

        :return: The number of this DebitCard.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this DebitCard.

        The card number masked  # noqa: E501

        :param number: The number of this DebitCard.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def currency(self):
        """Gets the currency of this DebitCard.  # noqa: E501

        The card's currency code in ISO 4217 format (CZK, EUR, USD, ...)  # noqa: E501

        :return: The currency of this DebitCard.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this DebitCard.

        The card's currency code in ISO 4217 format (CZK, EUR, USD, ...)  # noqa: E501

        :param currency: The currency of this DebitCard.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def status(self):
        """Gets the status of this DebitCard.  # noqa: E501

        The status of the card (ACTIVE, INACTIVE, BLOCKED, CLOSED, TO_BE_CLOSED)  # noqa: E501

        :return: The status of this DebitCard.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DebitCard.

        The status of the card (ACTIVE, INACTIVE, BLOCKED, CLOSED, TO_BE_CLOSED)  # noqa: E501

        :param status: The status of this DebitCard.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def holder(self):
        """Gets the holder of this DebitCard.  # noqa: E501

        Name of the card holder  # noqa: E501

        :return: The holder of this DebitCard.  # noqa: E501
        :rtype: str
        """
        return self._holder

    @holder.setter
    def holder(self, holder):
        """Sets the holder of this DebitCard.

        Name of the card holder  # noqa: E501

        :param holder: The holder of this DebitCard.  # noqa: E501
        :type: str
        """

        self._holder = holder

    @property
    def alias(self):
        """Gets the alias of this DebitCard.  # noqa: E501

        The consumer preferred card name  # noqa: E501

        :return: The alias of this DebitCard.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this DebitCard.

        The consumer preferred card name  # noqa: E501

        :param alias: The alias of this DebitCard.  # noqa: E501
        :type: str
        """

        self._alias = alias

    @property
    def product_i18_n(self):
        """Gets the product_i18_n of this DebitCard.  # noqa: E501

        The localized bank card product description (business product name)  # noqa: E501

        :return: The product_i18_n of this DebitCard.  # noqa: E501
        :rtype: str
        """
        return self._product_i18_n

    @product_i18_n.setter
    def product_i18_n(self, product_i18_n):
        """Sets the product_i18_n of this DebitCard.

        The localized bank card product description (business product name)  # noqa: E501

        :param product_i18_n: The product_i18_n of this DebitCard.  # noqa: E501
        :type: str
        """

        self._product_i18_n = product_i18_n

    @property
    def available_balance(self):
        """Gets the available_balance of this DebitCard.  # noqa: E501

        The available balance for the card (may include pending transactions and overdraft limit)  # noqa: E501

        :return: The available_balance of this DebitCard.  # noqa: E501
        :rtype: str
        """
        return self._available_balance

    @available_balance.setter
    def available_balance(self, available_balance):
        """Sets the available_balance of this DebitCard.

        The available balance for the card (may include pending transactions and overdraft limit)  # noqa: E501

        :param available_balance: The available_balance of this DebitCard.  # noqa: E501
        :type: str
        """

        self._available_balance = available_balance

    @property
    def brand(self):
        """Gets the brand of this DebitCard.  # noqa: E501

        The card brand (VISA, MASTER, MAESTRO, ...)  # noqa: E501

        :return: The brand of this DebitCard.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this DebitCard.

        The card brand (VISA, MASTER, MAESTRO, ...)  # noqa: E501

        :param brand: The brand of this DebitCard.  # noqa: E501
        :type: str
        """

        self._brand = brand

    @property
    def expiration(self):
        """Gets the expiration of this DebitCard.  # noqa: E501

        The expiration date  # noqa: E501

        :return: The expiration of this DebitCard.  # noqa: E501
        :rtype: date
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this DebitCard.

        The expiration date  # noqa: E501

        :param expiration: The expiration of this DebitCard.  # noqa: E501
        :type: date
        """

        self._expiration = expiration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DebitCard, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DebitCard):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DebitCard):
            return True

        return self.to_dict() != other.to_dict()
