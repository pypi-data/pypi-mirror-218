# coding: utf-8

"""
    Creditas OpenAPI

    This is specification of the Creditas OpenAPI. It contains definitions of Creditas banking services exposed via API accessible on the internet.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: is@creditas.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from creditas.configuration import Configuration


class ClientregistrationcreateClientApplication(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'version': 'str',
        'type': 'str',
        'profile': 'str',
        'environment_type': 'str',
        'homepage': 'str',
        'contact_email': 'str',
        'redirect_uris': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'version': 'version',
        'type': 'type',
        'profile': 'profile',
        'environment_type': 'environmentType',
        'homepage': 'homepage',
        'contact_email': 'contactEmail',
        'redirect_uris': 'redirectUris'
    }

    def __init__(self, name=None, version=None, type=None, profile=None, environment_type=None, homepage=None, contact_email=None, redirect_uris=None, _configuration=None):  # noqa: E501
        """ClientregistrationcreateClientApplication - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._version = None
        self._type = None
        self._profile = None
        self._environment_type = None
        self._homepage = None
        self._contact_email = None
        self._redirect_uris = None
        self.discriminator = None

        self.name = name
        if version is not None:
            self.version = version
        self.type = type
        self.profile = profile
        self.environment_type = environment_type
        self.homepage = homepage
        self.contact_email = contact_email
        self.redirect_uris = redirect_uris

    @property
    def name(self):
        """Gets the name of this ClientregistrationcreateClientApplication.  # noqa: E501

        Name of the client application  # noqa: E501

        :return: The name of this ClientregistrationcreateClientApplication.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClientregistrationcreateClientApplication.

        Name of the client application  # noqa: E501

        :param name: The name of this ClientregistrationcreateClientApplication.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def version(self):
        """Gets the version of this ClientregistrationcreateClientApplication.  # noqa: E501

        Version of the client application  # noqa: E501

        :return: The version of this ClientregistrationcreateClientApplication.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ClientregistrationcreateClientApplication.

        Version of the client application  # noqa: E501

        :param version: The version of this ClientregistrationcreateClientApplication.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def type(self):
        """Gets the type of this ClientregistrationcreateClientApplication.  # noqa: E501

        confidential/public (OAuth 2 client type)  # noqa: E501

        :return: The type of this ClientregistrationcreateClientApplication.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ClientregistrationcreateClientApplication.

        confidential/public (OAuth 2 client type)  # noqa: E501

        :param type: The type of this ClientregistrationcreateClientApplication.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def profile(self):
        """Gets the profile of this ClientregistrationcreateClientApplication.  # noqa: E501

        web application/user-agent-based application/native application (OAuth 2 client profile)  # noqa: E501

        :return: The profile of this ClientregistrationcreateClientApplication.  # noqa: E501
        :rtype: str
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this ClientregistrationcreateClientApplication.

        web application/user-agent-based application/native application (OAuth 2 client profile)  # noqa: E501

        :param profile: The profile of this ClientregistrationcreateClientApplication.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and profile is None:
            raise ValueError("Invalid value for `profile`, must not be `None`")  # noqa: E501

        self._profile = profile

    @property
    def environment_type(self):
        """Gets the environment_type of this ClientregistrationcreateClientApplication.  # noqa: E501

        development/test/production  # noqa: E501

        :return: The environment_type of this ClientregistrationcreateClientApplication.  # noqa: E501
        :rtype: str
        """
        return self._environment_type

    @environment_type.setter
    def environment_type(self, environment_type):
        """Sets the environment_type of this ClientregistrationcreateClientApplication.

        development/test/production  # noqa: E501

        :param environment_type: The environment_type of this ClientregistrationcreateClientApplication.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and environment_type is None:
            raise ValueError("Invalid value for `environment_type`, must not be `None`")  # noqa: E501

        self._environment_type = environment_type

    @property
    def homepage(self):
        """Gets the homepage of this ClientregistrationcreateClientApplication.  # noqa: E501

        Homepage of the application  # noqa: E501

        :return: The homepage of this ClientregistrationcreateClientApplication.  # noqa: E501
        :rtype: str
        """
        return self._homepage

    @homepage.setter
    def homepage(self, homepage):
        """Sets the homepage of this ClientregistrationcreateClientApplication.

        Homepage of the application  # noqa: E501

        :param homepage: The homepage of this ClientregistrationcreateClientApplication.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and homepage is None:
            raise ValueError("Invalid value for `homepage`, must not be `None`")  # noqa: E501

        self._homepage = homepage

    @property
    def contact_email(self):
        """Gets the contact_email of this ClientregistrationcreateClientApplication.  # noqa: E501

        Contact email of the application provider  # noqa: E501

        :return: The contact_email of this ClientregistrationcreateClientApplication.  # noqa: E501
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email):
        """Sets the contact_email of this ClientregistrationcreateClientApplication.

        Contact email of the application provider  # noqa: E501

        :param contact_email: The contact_email of this ClientregistrationcreateClientApplication.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and contact_email is None:
            raise ValueError("Invalid value for `contact_email`, must not be `None`")  # noqa: E501

        self._contact_email = contact_email

    @property
    def redirect_uris(self):
        """Gets the redirect_uris of this ClientregistrationcreateClientApplication.  # noqa: E501

        redirection URIs which is validated when client accesses the authorization endpoint  # noqa: E501

        :return: The redirect_uris of this ClientregistrationcreateClientApplication.  # noqa: E501
        :rtype: list[str]
        """
        return self._redirect_uris

    @redirect_uris.setter
    def redirect_uris(self, redirect_uris):
        """Sets the redirect_uris of this ClientregistrationcreateClientApplication.

        redirection URIs which is validated when client accesses the authorization endpoint  # noqa: E501

        :param redirect_uris: The redirect_uris of this ClientregistrationcreateClientApplication.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and redirect_uris is None:
            raise ValueError("Invalid value for `redirect_uris`, must not be `None`")  # noqa: E501

        self._redirect_uris = redirect_uris

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientregistrationcreateClientApplication, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientregistrationcreateClientApplication):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ClientregistrationcreateClientApplication):
            return True

        return self.to_dict() != other.to_dict()
