# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class OrmPipelineStepRun(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cluster_id': 'int',
        'created_dt': 'datetime',
        'description': 'str',
        'edges': 'OrmPipelineStepRunEdges',
        'env_vars': 'dict[str, object]',
        'id': 'int',
        'image_id': 'int',
        'kernel_cluster_select_policies': 'dict[str, object]',
        'output_volume_claim_id': 'int',
        'pipeline_spec_id': 'int',
        'resource_spec_id': 'int',
        'start_command': 'str',
        'step_key': 'str',
        'title': 'str',
        'updated_dt': 'datetime',
        'variable_specs': 'dict[str, object]',
        'volume_claim_tree': 'dict[str, object]'
    }

    attribute_map = {
        'cluster_id': 'cluster_id',
        'created_dt': 'created_dt',
        'description': 'description',
        'edges': 'edges',
        'env_vars': 'env_vars',
        'id': 'id',
        'image_id': 'image_id',
        'kernel_cluster_select_policies': 'kernel_cluster_select_policies',
        'output_volume_claim_id': 'output_volume_claim_id',
        'pipeline_spec_id': 'pipeline_spec_id',
        'resource_spec_id': 'resource_spec_id',
        'start_command': 'start_command',
        'step_key': 'step_key',
        'title': 'title',
        'updated_dt': 'updated_dt',
        'variable_specs': 'variable_specs',
        'volume_claim_tree': 'volume_claim_tree'
    }

    def __init__(self, cluster_id=None, created_dt=None, description=None, edges=None, env_vars=None, id=None, image_id=None, kernel_cluster_select_policies=None, output_volume_claim_id=None, pipeline_spec_id=None, resource_spec_id=None, start_command=None, step_key=None, title=None, updated_dt=None, variable_specs=None, volume_claim_tree=None, local_vars_configuration=None):  # noqa: E501
        """OrmPipelineStepRun - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._cluster_id = None
        self._created_dt = None
        self._description = None
        self._edges = None
        self._env_vars = None
        self._id = None
        self._image_id = None
        self._kernel_cluster_select_policies = None
        self._output_volume_claim_id = None
        self._pipeline_spec_id = None
        self._resource_spec_id = None
        self._start_command = None
        self._step_key = None
        self._title = None
        self._updated_dt = None
        self._variable_specs = None
        self._volume_claim_tree = None
        self.discriminator = None

        if cluster_id is not None:
            self.cluster_id = cluster_id
        if created_dt is not None:
            self.created_dt = created_dt
        if description is not None:
            self.description = description
        if edges is not None:
            self.edges = edges
        if env_vars is not None:
            self.env_vars = env_vars
        if id is not None:
            self.id = id
        if image_id is not None:
            self.image_id = image_id
        if kernel_cluster_select_policies is not None:
            self.kernel_cluster_select_policies = kernel_cluster_select_policies
        self.output_volume_claim_id = output_volume_claim_id
        self.pipeline_spec_id = pipeline_spec_id
        self.resource_spec_id = resource_spec_id
        if start_command is not None:
            self.start_command = start_command
        if step_key is not None:
            self.step_key = step_key
        if title is not None:
            self.title = title
        if updated_dt is not None:
            self.updated_dt = updated_dt
        if variable_specs is not None:
            self.variable_specs = variable_specs
        if volume_claim_tree is not None:
            self.volume_claim_tree = volume_claim_tree

    @property
    def cluster_id(self):
        """Gets the cluster_id of this OrmPipelineStepRun.  # noqa: E501


        :return: The cluster_id of this OrmPipelineStepRun.  # noqa: E501
        :rtype: int
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this OrmPipelineStepRun.


        :param cluster_id: The cluster_id of this OrmPipelineStepRun.  # noqa: E501
        :type cluster_id: int
        """

        self._cluster_id = cluster_id

    @property
    def created_dt(self):
        """Gets the created_dt of this OrmPipelineStepRun.  # noqa: E501


        :return: The created_dt of this OrmPipelineStepRun.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this OrmPipelineStepRun.


        :param created_dt: The created_dt of this OrmPipelineStepRun.  # noqa: E501
        :type created_dt: datetime
        """

        self._created_dt = created_dt

    @property
    def description(self):
        """Gets the description of this OrmPipelineStepRun.  # noqa: E501


        :return: The description of this OrmPipelineStepRun.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OrmPipelineStepRun.


        :param description: The description of this OrmPipelineStepRun.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def edges(self):
        """Gets the edges of this OrmPipelineStepRun.  # noqa: E501


        :return: The edges of this OrmPipelineStepRun.  # noqa: E501
        :rtype: OrmPipelineStepRunEdges
        """
        return self._edges

    @edges.setter
    def edges(self, edges):
        """Sets the edges of this OrmPipelineStepRun.


        :param edges: The edges of this OrmPipelineStepRun.  # noqa: E501
        :type edges: OrmPipelineStepRunEdges
        """

        self._edges = edges

    @property
    def env_vars(self):
        """Gets the env_vars of this OrmPipelineStepRun.  # noqa: E501


        :return: The env_vars of this OrmPipelineStepRun.  # noqa: E501
        :rtype: dict[str, object]
        """
        return self._env_vars

    @env_vars.setter
    def env_vars(self, env_vars):
        """Sets the env_vars of this OrmPipelineStepRun.


        :param env_vars: The env_vars of this OrmPipelineStepRun.  # noqa: E501
        :type env_vars: dict[str, object]
        """

        self._env_vars = env_vars

    @property
    def id(self):
        """Gets the id of this OrmPipelineStepRun.  # noqa: E501


        :return: The id of this OrmPipelineStepRun.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrmPipelineStepRun.


        :param id: The id of this OrmPipelineStepRun.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def image_id(self):
        """Gets the image_id of this OrmPipelineStepRun.  # noqa: E501


        :return: The image_id of this OrmPipelineStepRun.  # noqa: E501
        :rtype: int
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this OrmPipelineStepRun.


        :param image_id: The image_id of this OrmPipelineStepRun.  # noqa: E501
        :type image_id: int
        """

        self._image_id = image_id

    @property
    def kernel_cluster_select_policies(self):
        """Gets the kernel_cluster_select_policies of this OrmPipelineStepRun.  # noqa: E501


        :return: The kernel_cluster_select_policies of this OrmPipelineStepRun.  # noqa: E501
        :rtype: dict[str, object]
        """
        return self._kernel_cluster_select_policies

    @kernel_cluster_select_policies.setter
    def kernel_cluster_select_policies(self, kernel_cluster_select_policies):
        """Sets the kernel_cluster_select_policies of this OrmPipelineStepRun.


        :param kernel_cluster_select_policies: The kernel_cluster_select_policies of this OrmPipelineStepRun.  # noqa: E501
        :type kernel_cluster_select_policies: dict[str, object]
        """

        self._kernel_cluster_select_policies = kernel_cluster_select_policies

    @property
    def output_volume_claim_id(self):
        """Gets the output_volume_claim_id of this OrmPipelineStepRun.  # noqa: E501


        :return: The output_volume_claim_id of this OrmPipelineStepRun.  # noqa: E501
        :rtype: int
        """
        return self._output_volume_claim_id

    @output_volume_claim_id.setter
    def output_volume_claim_id(self, output_volume_claim_id):
        """Sets the output_volume_claim_id of this OrmPipelineStepRun.


        :param output_volume_claim_id: The output_volume_claim_id of this OrmPipelineStepRun.  # noqa: E501
        :type output_volume_claim_id: int
        """

        self._output_volume_claim_id = output_volume_claim_id

    @property
    def pipeline_spec_id(self):
        """Gets the pipeline_spec_id of this OrmPipelineStepRun.  # noqa: E501


        :return: The pipeline_spec_id of this OrmPipelineStepRun.  # noqa: E501
        :rtype: int
        """
        return self._pipeline_spec_id

    @pipeline_spec_id.setter
    def pipeline_spec_id(self, pipeline_spec_id):
        """Sets the pipeline_spec_id of this OrmPipelineStepRun.


        :param pipeline_spec_id: The pipeline_spec_id of this OrmPipelineStepRun.  # noqa: E501
        :type pipeline_spec_id: int
        """

        self._pipeline_spec_id = pipeline_spec_id

    @property
    def resource_spec_id(self):
        """Gets the resource_spec_id of this OrmPipelineStepRun.  # noqa: E501


        :return: The resource_spec_id of this OrmPipelineStepRun.  # noqa: E501
        :rtype: int
        """
        return self._resource_spec_id

    @resource_spec_id.setter
    def resource_spec_id(self, resource_spec_id):
        """Sets the resource_spec_id of this OrmPipelineStepRun.


        :param resource_spec_id: The resource_spec_id of this OrmPipelineStepRun.  # noqa: E501
        :type resource_spec_id: int
        """

        self._resource_spec_id = resource_spec_id

    @property
    def start_command(self):
        """Gets the start_command of this OrmPipelineStepRun.  # noqa: E501


        :return: The start_command of this OrmPipelineStepRun.  # noqa: E501
        :rtype: str
        """
        return self._start_command

    @start_command.setter
    def start_command(self, start_command):
        """Sets the start_command of this OrmPipelineStepRun.


        :param start_command: The start_command of this OrmPipelineStepRun.  # noqa: E501
        :type start_command: str
        """

        self._start_command = start_command

    @property
    def step_key(self):
        """Gets the step_key of this OrmPipelineStepRun.  # noqa: E501


        :return: The step_key of this OrmPipelineStepRun.  # noqa: E501
        :rtype: str
        """
        return self._step_key

    @step_key.setter
    def step_key(self, step_key):
        """Sets the step_key of this OrmPipelineStepRun.


        :param step_key: The step_key of this OrmPipelineStepRun.  # noqa: E501
        :type step_key: str
        """

        self._step_key = step_key

    @property
    def title(self):
        """Gets the title of this OrmPipelineStepRun.  # noqa: E501


        :return: The title of this OrmPipelineStepRun.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this OrmPipelineStepRun.


        :param title: The title of this OrmPipelineStepRun.  # noqa: E501
        :type title: str
        """

        self._title = title

    @property
    def updated_dt(self):
        """Gets the updated_dt of this OrmPipelineStepRun.  # noqa: E501


        :return: The updated_dt of this OrmPipelineStepRun.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_dt

    @updated_dt.setter
    def updated_dt(self, updated_dt):
        """Sets the updated_dt of this OrmPipelineStepRun.


        :param updated_dt: The updated_dt of this OrmPipelineStepRun.  # noqa: E501
        :type updated_dt: datetime
        """

        self._updated_dt = updated_dt

    @property
    def variable_specs(self):
        """Gets the variable_specs of this OrmPipelineStepRun.  # noqa: E501


        :return: The variable_specs of this OrmPipelineStepRun.  # noqa: E501
        :rtype: dict[str, object]
        """
        return self._variable_specs

    @variable_specs.setter
    def variable_specs(self, variable_specs):
        """Sets the variable_specs of this OrmPipelineStepRun.


        :param variable_specs: The variable_specs of this OrmPipelineStepRun.  # noqa: E501
        :type variable_specs: dict[str, object]
        """

        self._variable_specs = variable_specs

    @property
    def volume_claim_tree(self):
        """Gets the volume_claim_tree of this OrmPipelineStepRun.  # noqa: E501


        :return: The volume_claim_tree of this OrmPipelineStepRun.  # noqa: E501
        :rtype: dict[str, object]
        """
        return self._volume_claim_tree

    @volume_claim_tree.setter
    def volume_claim_tree(self, volume_claim_tree):
        """Sets the volume_claim_tree of this OrmPipelineStepRun.


        :param volume_claim_tree: The volume_claim_tree of this OrmPipelineStepRun.  # noqa: E501
        :type volume_claim_tree: dict[str, object]
        """

        self._volume_claim_tree = volume_claim_tree

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmPipelineStepRun):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmPipelineStepRun):
            return True

        return self.to_dict() != other.to_dict()
