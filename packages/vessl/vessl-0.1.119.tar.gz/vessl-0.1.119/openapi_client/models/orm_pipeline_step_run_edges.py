# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class OrmPipelineStepRunEdges(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cluster': 'OrmKernelCluster',
        'image': 'OrmKernelImage',
        'output_volume_claim': 'OrmVolumeClaim',
        'pipeline_spec': 'OrmPipelineSpec',
        'resource_spec': 'OrmKernelResourceSpec'
    }

    attribute_map = {
        'cluster': 'cluster',
        'image': 'image',
        'output_volume_claim': 'output_volume_claim',
        'pipeline_spec': 'pipeline_spec',
        'resource_spec': 'resource_spec'
    }

    def __init__(self, cluster=None, image=None, output_volume_claim=None, pipeline_spec=None, resource_spec=None, local_vars_configuration=None):  # noqa: E501
        """OrmPipelineStepRunEdges - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._cluster = None
        self._image = None
        self._output_volume_claim = None
        self._pipeline_spec = None
        self._resource_spec = None
        self.discriminator = None

        if cluster is not None:
            self.cluster = cluster
        if image is not None:
            self.image = image
        if output_volume_claim is not None:
            self.output_volume_claim = output_volume_claim
        if pipeline_spec is not None:
            self.pipeline_spec = pipeline_spec
        if resource_spec is not None:
            self.resource_spec = resource_spec

    @property
    def cluster(self):
        """Gets the cluster of this OrmPipelineStepRunEdges.  # noqa: E501


        :return: The cluster of this OrmPipelineStepRunEdges.  # noqa: E501
        :rtype: OrmKernelCluster
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this OrmPipelineStepRunEdges.


        :param cluster: The cluster of this OrmPipelineStepRunEdges.  # noqa: E501
        :type cluster: OrmKernelCluster
        """

        self._cluster = cluster

    @property
    def image(self):
        """Gets the image of this OrmPipelineStepRunEdges.  # noqa: E501


        :return: The image of this OrmPipelineStepRunEdges.  # noqa: E501
        :rtype: OrmKernelImage
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this OrmPipelineStepRunEdges.


        :param image: The image of this OrmPipelineStepRunEdges.  # noqa: E501
        :type image: OrmKernelImage
        """

        self._image = image

    @property
    def output_volume_claim(self):
        """Gets the output_volume_claim of this OrmPipelineStepRunEdges.  # noqa: E501


        :return: The output_volume_claim of this OrmPipelineStepRunEdges.  # noqa: E501
        :rtype: OrmVolumeClaim
        """
        return self._output_volume_claim

    @output_volume_claim.setter
    def output_volume_claim(self, output_volume_claim):
        """Sets the output_volume_claim of this OrmPipelineStepRunEdges.


        :param output_volume_claim: The output_volume_claim of this OrmPipelineStepRunEdges.  # noqa: E501
        :type output_volume_claim: OrmVolumeClaim
        """

        self._output_volume_claim = output_volume_claim

    @property
    def pipeline_spec(self):
        """Gets the pipeline_spec of this OrmPipelineStepRunEdges.  # noqa: E501


        :return: The pipeline_spec of this OrmPipelineStepRunEdges.  # noqa: E501
        :rtype: OrmPipelineSpec
        """
        return self._pipeline_spec

    @pipeline_spec.setter
    def pipeline_spec(self, pipeline_spec):
        """Sets the pipeline_spec of this OrmPipelineStepRunEdges.


        :param pipeline_spec: The pipeline_spec of this OrmPipelineStepRunEdges.  # noqa: E501
        :type pipeline_spec: OrmPipelineSpec
        """

        self._pipeline_spec = pipeline_spec

    @property
    def resource_spec(self):
        """Gets the resource_spec of this OrmPipelineStepRunEdges.  # noqa: E501


        :return: The resource_spec of this OrmPipelineStepRunEdges.  # noqa: E501
        :rtype: OrmKernelResourceSpec
        """
        return self._resource_spec

    @resource_spec.setter
    def resource_spec(self, resource_spec):
        """Sets the resource_spec of this OrmPipelineStepRunEdges.


        :param resource_spec: The resource_spec of this OrmPipelineStepRunEdges.  # noqa: E501
        :type resource_spec: OrmKernelResourceSpec
        """

        self._resource_spec = resource_spec

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmPipelineStepRunEdges):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmPipelineStepRunEdges):
            return True

        return self.to_dict() != other.to_dict()
