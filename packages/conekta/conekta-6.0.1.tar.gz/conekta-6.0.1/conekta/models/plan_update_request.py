# coding: utf-8

"""
    Conekta API

    Conekta sdk  # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Contact: engineering@conekta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conint, constr

class PlanUpdateRequest(BaseModel):
    """
    a plan
    """
    amount: Optional[conint(strict=True, ge=1)] = Field(None, description="The amount in cents that will be charged on the interval specified.")
    currency: Optional[constr(strict=True, max_length=3)] = Field(None, description="ISO 4217 for currencies, for the Mexican peso it is MXN/USD")
    expiry_count: Optional[StrictInt] = Field(None, description="Number of repetitions of the frequency NUMBER OF CHARGES TO BE MADE, considering the interval and frequency, this evolves over time, but is subject to the expiration count.")
    name: Optional[StrictStr] = Field(None, description="The name of the plan.")
    __properties = ["amount", "currency", "expiry_count", "name"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PlanUpdateRequest:
        """Create an instance of PlanUpdateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PlanUpdateRequest:
        """Create an instance of PlanUpdateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PlanUpdateRequest.parse_obj(obj)

        _obj = PlanUpdateRequest.parse_obj({
            "amount": obj.get("amount"),
            "currency": obj.get("currency"),
            "expiry_count": obj.get("expiry_count"),
            "name": obj.get("name")
        })
        return _obj

