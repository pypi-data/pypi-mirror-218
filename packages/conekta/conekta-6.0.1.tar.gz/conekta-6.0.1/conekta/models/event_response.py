# coding: utf-8

"""
    Conekta API

    Conekta sdk  # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Contact: engineering@conekta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, conlist
from conekta.models.webhook_log import WebhookLog

class EventResponse(BaseModel):
    """
    event model
    """
    created_at: Optional[StrictInt] = None
    data: Optional[Dict[str, Any]] = None
    id: Optional[StrictStr] = None
    livemode: Optional[StrictBool] = None
    object: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    webhook_logs: Optional[conlist(WebhookLog)] = None
    webhook_status: Optional[StrictStr] = None
    __properties = ["created_at", "data", "id", "livemode", "object", "type", "webhook_logs", "webhook_status"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EventResponse:
        """Create an instance of EventResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in webhook_logs (list)
        _items = []
        if self.webhook_logs:
            for _item in self.webhook_logs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['webhook_logs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EventResponse:
        """Create an instance of EventResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EventResponse.parse_obj(obj)

        _obj = EventResponse.parse_obj({
            "created_at": obj.get("created_at"),
            "data": obj.get("data"),
            "id": obj.get("id"),
            "livemode": obj.get("livemode"),
            "object": obj.get("object"),
            "type": obj.get("type"),
            "webhook_logs": [WebhookLog.from_dict(_item) for _item in obj.get("webhook_logs")] if obj.get("webhook_logs") is not None else None,
            "webhook_status": obj.get("webhook_status")
        })
        return _obj

