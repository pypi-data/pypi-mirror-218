# coding: utf-8

"""
    Conekta API

    Conekta sdk  # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Contact: engineering@conekta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr

class TokenCard(BaseModel):
    """
    TokenCard
    """
    cvc: constr(strict=True, max_length=4) = Field(..., description="It is a value that allows identifying the security code of the card.")
    device_fingerprint: Optional[StrictStr] = Field(None, description="It is a value that allows identifying the device fingerprint.")
    exp_month: constr(strict=True, max_length=2) = Field(..., description="It is a value that allows identifying the expiration month of the card.")
    exp_year: constr(strict=True, max_length=2) = Field(..., description="It is a value that allows identifying the expiration year of the card.")
    name: StrictStr = Field(..., description="It is a value that allows identifying the name of the cardholder.")
    number: StrictStr = Field(..., description="It is a value that allows identifying the number of the card.")
    __properties = ["cvc", "device_fingerprint", "exp_month", "exp_year", "name", "number"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TokenCard:
        """Create an instance of TokenCard from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TokenCard:
        """Create an instance of TokenCard from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TokenCard.parse_obj(obj)

        _obj = TokenCard.parse_obj({
            "cvc": obj.get("cvc"),
            "device_fingerprint": obj.get("device_fingerprint"),
            "exp_month": obj.get("exp_month"),
            "exp_year": obj.get("exp_year"),
            "name": obj.get("name"),
            "number": obj.get("number")
        })
        return _obj

