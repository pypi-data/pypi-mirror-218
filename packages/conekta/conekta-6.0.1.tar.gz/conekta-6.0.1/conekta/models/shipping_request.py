# coding: utf-8

"""
    Conekta API

    Conekta sdk  # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Contact: engineering@conekta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr, conint

class ShippingRequest(BaseModel):
    """
    ShippingRequest
    """
    amount: conint(strict=True, ge=0) = Field(..., description="Shipping amount in cents")
    carrier: Optional[StrictStr] = Field(None, description="Carrier name for the shipment")
    tracking_number: Optional[StrictStr] = Field(None, description="Tracking number can be used to track the shipment")
    method: Optional[StrictStr] = Field(None, description="Method of shipment")
    metadata: Optional[Dict[str, Any]] = Field(None, description="Hash where the user can send additional information for each 'shipping'.")
    __properties = ["amount", "carrier", "tracking_number", "method", "metadata"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ShippingRequest:
        """Create an instance of ShippingRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ShippingRequest:
        """Create an instance of ShippingRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ShippingRequest.parse_obj(obj)

        _obj = ShippingRequest.parse_obj({
            "amount": obj.get("amount"),
            "carrier": obj.get("carrier"),
            "tracking_number": obj.get("tracking_number"),
            "method": obj.get("method"),
            "metadata": obj.get("metadata")
        })
        return _obj

