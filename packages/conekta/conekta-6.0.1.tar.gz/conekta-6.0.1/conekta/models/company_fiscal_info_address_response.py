# coding: utf-8

"""
    Conekta API

    Conekta sdk  # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Contact: engineering@conekta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator

class CompanyFiscalInfoAddressResponse(BaseModel):
    """
    Company fiscal info address model
    """
    object: Optional[StrictStr] = Field(None, description="The resource's type")
    street1: Optional[StrictStr] = Field(None, description="Street Address")
    street2: Optional[StrictStr] = Field(None, description="Colonia")
    city: Optional[StrictStr] = Field(None, description="City")
    state: Optional[StrictStr] = Field(None, description="State")
    country: Optional[StrictStr] = Field(None, description="Country")
    postal_code: Optional[StrictStr] = Field(None, description="Postal code")
    external_number: Optional[StrictStr] = Field(None, description="Street number")
    internal_number: Optional[StrictStr] = Field(None, description="Unit / apartment number")
    __properties = ["object", "street1", "street2", "city", "state", "country", "postal_code", "external_number", "internal_number"]

    @validator('object')
    def object_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('address'):
            raise ValueError("must be one of enum values ('address')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CompanyFiscalInfoAddressResponse:
        """Create an instance of CompanyFiscalInfoAddressResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CompanyFiscalInfoAddressResponse:
        """Create an instance of CompanyFiscalInfoAddressResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CompanyFiscalInfoAddressResponse.parse_obj(obj)

        _obj = CompanyFiscalInfoAddressResponse.parse_obj({
            "object": obj.get("object"),
            "street1": obj.get("street1"),
            "street2": obj.get("street2"),
            "city": obj.get("city"),
            "state": obj.get("state"),
            "country": obj.get("country"),
            "postal_code": obj.get("postal_code"),
            "external_number": obj.get("external_number"),
            "internal_number": obj.get("internal_number")
        })
        return _obj

