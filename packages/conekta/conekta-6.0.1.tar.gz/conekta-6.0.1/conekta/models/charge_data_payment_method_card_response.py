# coding: utf-8

"""
    Conekta API

    Conekta sdk  # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Contact: engineering@conekta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, constr

class ChargeDataPaymentMethodCardResponse(BaseModel):
    """
    use for card responses
    """
    account_type: Optional[StrictStr] = None
    auth_code: Optional[StrictStr] = None
    brand: Optional[StrictStr] = None
    contract_id: Optional[constr(strict=True, max_length=10, min_length=10)] = Field(None, description="Id sent for recurrent charges.")
    country: Optional[StrictStr] = None
    exp_month: Optional[StrictStr] = None
    exp_year: Optional[StrictStr] = None
    fraud_indicators: Optional[conlist(Any)] = None
    issuer: Optional[StrictStr] = None
    last4: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    __properties = ["account_type", "auth_code", "brand", "contract_id", "country", "exp_month", "exp_year", "fraud_indicators", "issuer", "last4", "name"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ChargeDataPaymentMethodCardResponse:
        """Create an instance of ChargeDataPaymentMethodCardResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ChargeDataPaymentMethodCardResponse:
        """Create an instance of ChargeDataPaymentMethodCardResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ChargeDataPaymentMethodCardResponse.parse_obj(obj)

        _obj = ChargeDataPaymentMethodCardResponse.parse_obj({
            "account_type": obj.get("account_type"),
            "auth_code": obj.get("auth_code"),
            "brand": obj.get("brand"),
            "contract_id": obj.get("contract_id"),
            "country": obj.get("country"),
            "exp_month": obj.get("exp_month"),
            "exp_year": obj.get("exp_year"),
            "fraud_indicators": obj.get("fraud_indicators"),
            "issuer": obj.get("issuer"),
            "last4": obj.get("last4"),
            "name": obj.get("name")
        })
        return _obj

