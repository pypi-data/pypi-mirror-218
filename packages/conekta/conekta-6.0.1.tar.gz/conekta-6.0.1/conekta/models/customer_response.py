# coding: utf-8

"""
    Conekta API

    Conekta sdk  # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Contact: engineering@conekta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from conekta.models.customer_antifraud_info_response import CustomerAntifraudInfoResponse
from conekta.models.customer_fiscal_entities_response import CustomerFiscalEntitiesResponse
from conekta.models.customer_payment_methods_response import CustomerPaymentMethodsResponse
from conekta.models.customer_response_shipping_contacts import CustomerResponseShippingContacts
from conekta.models.subscription_response import SubscriptionResponse

class CustomerResponse(BaseModel):
    """
    customer response
    """
    antifraud_info: Optional[CustomerAntifraudInfoResponse] = None
    corporate: Optional[StrictBool] = None
    created_at: StrictInt = Field(...)
    custom_reference: Optional[StrictStr] = None
    default_fiscal_entity_id: Optional[StrictStr] = None
    default_shipping_contact_id: Optional[StrictStr] = None
    default_payment_source_id: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    fiscal_entities: Optional[CustomerFiscalEntitiesResponse] = None
    id: StrictStr = Field(...)
    livemode: StrictBool = Field(...)
    name: Optional[StrictStr] = None
    object: StrictStr = Field(...)
    payment_sources: Optional[CustomerPaymentMethodsResponse] = None
    phone: Optional[StrictStr] = None
    shipping_contacts: Optional[CustomerResponseShippingContacts] = None
    subscription: Optional[SubscriptionResponse] = None
    __properties = ["antifraud_info", "corporate", "created_at", "custom_reference", "default_fiscal_entity_id", "default_shipping_contact_id", "default_payment_source_id", "email", "fiscal_entities", "id", "livemode", "name", "object", "payment_sources", "phone", "shipping_contacts", "subscription"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CustomerResponse:
        """Create an instance of CustomerResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of antifraud_info
        if self.antifraud_info:
            _dict['antifraud_info'] = self.antifraud_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fiscal_entities
        if self.fiscal_entities:
            _dict['fiscal_entities'] = self.fiscal_entities.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payment_sources
        if self.payment_sources:
            _dict['payment_sources'] = self.payment_sources.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_contacts
        if self.shipping_contacts:
            _dict['shipping_contacts'] = self.shipping_contacts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subscription
        if self.subscription:
            _dict['subscription'] = self.subscription.to_dict()
        # set to None if antifraud_info (nullable) is None
        # and __fields_set__ contains the field
        if self.antifraud_info is None and "antifraud_info" in self.__fields_set__:
            _dict['antifraud_info'] = None

        # set to None if default_fiscal_entity_id (nullable) is None
        # and __fields_set__ contains the field
        if self.default_fiscal_entity_id is None and "default_fiscal_entity_id" in self.__fields_set__:
            _dict['default_fiscal_entity_id'] = None

        # set to None if default_payment_source_id (nullable) is None
        # and __fields_set__ contains the field
        if self.default_payment_source_id is None and "default_payment_source_id" in self.__fields_set__:
            _dict['default_payment_source_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CustomerResponse:
        """Create an instance of CustomerResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CustomerResponse.parse_obj(obj)

        _obj = CustomerResponse.parse_obj({
            "antifraud_info": CustomerAntifraudInfoResponse.from_dict(obj.get("antifraud_info")) if obj.get("antifraud_info") is not None else None,
            "corporate": obj.get("corporate"),
            "created_at": obj.get("created_at"),
            "custom_reference": obj.get("custom_reference"),
            "default_fiscal_entity_id": obj.get("default_fiscal_entity_id"),
            "default_shipping_contact_id": obj.get("default_shipping_contact_id"),
            "default_payment_source_id": obj.get("default_payment_source_id"),
            "email": obj.get("email"),
            "fiscal_entities": CustomerFiscalEntitiesResponse.from_dict(obj.get("fiscal_entities")) if obj.get("fiscal_entities") is not None else None,
            "id": obj.get("id"),
            "livemode": obj.get("livemode"),
            "name": obj.get("name"),
            "object": obj.get("object"),
            "payment_sources": CustomerPaymentMethodsResponse.from_dict(obj.get("payment_sources")) if obj.get("payment_sources") is not None else None,
            "phone": obj.get("phone"),
            "shipping_contacts": CustomerResponseShippingContacts.from_dict(obj.get("shipping_contacts")) if obj.get("shipping_contacts") is not None else None,
            "subscription": SubscriptionResponse.from_dict(obj.get("subscription")) if obj.get("subscription") is not None else None
        })
        return _obj

