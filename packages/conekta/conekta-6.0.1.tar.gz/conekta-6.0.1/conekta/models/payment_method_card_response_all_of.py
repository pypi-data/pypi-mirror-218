# coding: utf-8

"""
    Conekta API

    Conekta sdk  # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Contact: engineering@conekta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictBool, StrictStr

class PaymentMethodCardResponseAllOf(BaseModel):
    """
    use for card responses
    """
    last4: Optional[StrictStr] = None
    bin: Optional[StrictStr] = None
    card_type: Optional[StrictStr] = None
    exp_month: Optional[StrictStr] = None
    exp_year: Optional[StrictStr] = None
    brand: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    default: Optional[StrictBool] = None
    visible_on_checkout: Optional[StrictBool] = None
    payment_source_status: Optional[StrictStr] = None
    __properties = ["last4", "bin", "card_type", "exp_month", "exp_year", "brand", "name", "default", "visible_on_checkout", "payment_source_status"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PaymentMethodCardResponseAllOf:
        """Create an instance of PaymentMethodCardResponseAllOf from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PaymentMethodCardResponseAllOf:
        """Create an instance of PaymentMethodCardResponseAllOf from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PaymentMethodCardResponseAllOf.parse_obj(obj)

        _obj = PaymentMethodCardResponseAllOf.parse_obj({
            "last4": obj.get("last4"),
            "bin": obj.get("bin"),
            "card_type": obj.get("card_type"),
            "exp_month": obj.get("exp_month"),
            "exp_year": obj.get("exp_year"),
            "brand": obj.get("brand"),
            "name": obj.get("name"),
            "default": obj.get("default"),
            "visible_on_checkout": obj.get("visible_on_checkout"),
            "payment_source_status": obj.get("payment_source_status")
        })
        return _obj

