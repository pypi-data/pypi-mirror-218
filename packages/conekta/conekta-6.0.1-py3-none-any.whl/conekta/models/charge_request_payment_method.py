# coding: utf-8

"""
    Conekta API

    Conekta sdk  # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Contact: engineering@conekta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, constr

class ChargeRequestPaymentMethod(BaseModel):
    """
    Payment method used in the charge. Go to the [payment methods](https://developers.conekta.com/reference/m%C3%A9todos-de-pago) section for more details 
    """
    expires_at: Optional[StrictInt] = Field(None, description="Method expiration date as unix timestamp")
    type: StrictStr = Field(...)
    token_id: Optional[StrictStr] = None
    payment_source_id: Optional[StrictStr] = None
    contract_id: Optional[constr(strict=True, max_length=10, min_length=10)] = Field(None, description="Optional id sent to indicate the bank contract for recurrent card charges.")
    __properties = ["expires_at", "type", "token_id", "payment_source_id", "contract_id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ChargeRequestPaymentMethod:
        """Create an instance of ChargeRequestPaymentMethod from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ChargeRequestPaymentMethod:
        """Create an instance of ChargeRequestPaymentMethod from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ChargeRequestPaymentMethod.parse_obj(obj)

        _obj = ChargeRequestPaymentMethod.parse_obj({
            "expires_at": obj.get("expires_at"),
            "type": obj.get("type"),
            "token_id": obj.get("token_id"),
            "payment_source_id": obj.get("payment_source_id"),
            "contract_id": obj.get("contract_id")
        })
        return _obj

