# coding: utf-8

"""
    Conekta API

    Conekta sdk  # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Contact: engineering@conekta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class TransferMethodResponse(BaseModel):
    """
    Method used to make the transfer.
    """
    account_holder: Optional[StrictStr] = Field(None, description="Name of the account holder.")
    account_number: Optional[StrictStr] = Field(None, description="Account number of the bank account.")
    bank: Optional[StrictStr] = Field(None, description="Name of the bank.")
    created_at: Optional[StrictInt] = Field(None, description="Date and time of creation of the transfer.")
    id: Optional[StrictStr] = Field(None, description="Unique identifier of the transfer.")
    object: Optional[StrictStr] = Field(None, description="Object name, which is bank_transfer_payout_method.")
    payee_id: Optional[StrictStr] = Field(None, description="Unique identifier of the payee.")
    type: Optional[StrictStr] = Field(None, description="Type of the payee.")
    __properties = ["account_holder", "account_number", "bank", "created_at", "id", "object", "payee_id", "type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TransferMethodResponse:
        """Create an instance of TransferMethodResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TransferMethodResponse:
        """Create an instance of TransferMethodResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TransferMethodResponse.parse_obj(obj)

        _obj = TransferMethodResponse.parse_obj({
            "account_holder": obj.get("account_holder"),
            "account_number": obj.get("account_number"),
            "bank": obj.get("bank"),
            "created_at": obj.get("created_at"),
            "id": obj.get("id"),
            "object": obj.get("object"),
            "payee_id": obj.get("payee_id"),
            "type": obj.get("type")
        })
        return _obj

