# coding: utf-8

"""
    Conekta API

    Conekta sdk  # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Contact: engineering@conekta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from conekta.models.token_response_checkout import TokenResponseCheckout

class TokenResponse(BaseModel):
    """
    token response
    """
    checkout: Optional[TokenResponseCheckout] = None
    id: StrictStr = Field(..., description="Unique identifier for the token generated by Conekta.")
    livemode: StrictBool = Field(..., description="Indicates whether the token is in live mode or test mode.")
    object: StrictStr = Field(..., description="Indicates the type of object, in this case token")
    used: StrictBool = Field(..., description="Indicates if the token has been used")
    __properties = ["checkout", "id", "livemode", "object", "used"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TokenResponse:
        """Create an instance of TokenResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of checkout
        if self.checkout:
            _dict['checkout'] = self.checkout.to_dict()
        # set to None if checkout (nullable) is None
        # and __fields_set__ contains the field
        if self.checkout is None and "checkout" in self.__fields_set__:
            _dict['checkout'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TokenResponse:
        """Create an instance of TokenResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TokenResponse.parse_obj(obj)

        _obj = TokenResponse.parse_obj({
            "checkout": TokenResponseCheckout.from_dict(obj.get("checkout")) if obj.get("checkout") is not None else None,
            "id": obj.get("id"),
            "livemode": obj.get("livemode"),
            "object": obj.get("object"),
            "used": obj.get("used")
        })
        return _obj

