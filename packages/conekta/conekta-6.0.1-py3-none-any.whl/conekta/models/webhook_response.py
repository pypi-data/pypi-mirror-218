# coding: utf-8

"""
    Conekta API

    Conekta sdk  # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Contact: engineering@conekta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictBool, StrictStr, conlist

class WebhookResponse(BaseModel):
    """
    webhooks model
    """
    deleted: Optional[StrictBool] = None
    development_enabled: Optional[StrictBool] = None
    id: Optional[StrictStr] = None
    livemode: Optional[StrictBool] = None
    object: Optional[StrictStr] = None
    production_enabled: Optional[StrictBool] = None
    status: Optional[StrictStr] = None
    subscribed_events: Optional[conlist(StrictStr)] = None
    synchronous: Optional[StrictBool] = None
    url: Optional[StrictStr] = None
    __properties = ["deleted", "development_enabled", "id", "livemode", "object", "production_enabled", "status", "subscribed_events", "synchronous", "url"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WebhookResponse:
        """Create an instance of WebhookResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if deleted (nullable) is None
        # and __fields_set__ contains the field
        if self.deleted is None and "deleted" in self.__fields_set__:
            _dict['deleted'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WebhookResponse:
        """Create an instance of WebhookResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WebhookResponse.parse_obj(obj)

        _obj = WebhookResponse.parse_obj({
            "deleted": obj.get("deleted"),
            "development_enabled": obj.get("development_enabled"),
            "id": obj.get("id"),
            "livemode": obj.get("livemode"),
            "object": obj.get("object"),
            "production_enabled": obj.get("production_enabled"),
            "status": obj.get("status"),
            "subscribed_events": obj.get("subscribed_events"),
            "synchronous": obj.get("synchronous"),
            "url": obj.get("url")
        })
        return _obj

