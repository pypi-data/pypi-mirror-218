# coding: utf-8

"""
    Conekta API

    Conekta sdk  # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Contact: engineering@conekta.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictBool, constr, validator

class WebhookRequest(BaseModel):
    """
    a webhook
    """
    url: constr(strict=True) = Field(..., description="Here you must place the URL of your Webhook remember that you must program what you will do with the events received. Also do not forget to handle the HTTPS protocol for greater security.")
    synchronous: StrictBool = Field(..., description="It is a value that allows to decide if the events will be synchronous or asynchronous. We recommend asynchronous = false")
    __properties = ["url", "synchronous"]

    @validator('url')
    def url_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(?!.*(localhost|127\.0\.0\.1)).*$", value):
            raise ValueError(r"must validate the regular expression /^(?!.*(localhost|127\.0\.0\.1)).*$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WebhookRequest:
        """Create an instance of WebhookRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WebhookRequest:
        """Create an instance of WebhookRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WebhookRequest.parse_obj(obj)

        _obj = WebhookRequest.parse_obj({
            "url": obj.get("url"),
            "synchronous": obj.get("synchronous") if obj.get("synchronous") is not None else False
        })
        return _obj

