# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _kSpider_internal
else:
    import _kSpider_internal

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def pairwise(index_prefix, user_threads, cutoff_distance_type, cutoff_threshold, full_command, calculate_pvalue):
    return _kSpider_internal.pairwise(index_prefix, user_threads, cutoff_distance_type, cutoff_threshold, full_command, calculate_pvalue)

def dbretina_indexing(json_file, user_index_prefix):
    return _kSpider_internal.dbretina_indexing(json_file, user_index_prefix)

def sketch_dbretina(asc_file, names_file, user_prefix):
    return _kSpider_internal.sketch_dbretina(asc_file, names_file, user_prefix)

def parse_dbretina_json(json_file, map):
    return _kSpider_internal.parse_dbretina_json(json_file, map)

def query(index_prefix, inverted_index_prefix, query_file, output_prefix, commands):
    return _kSpider_internal.query(index_prefix, inverted_index_prefix, query_file, output_prefix, commands)
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _kSpider_internal.delete_SwigPyIterator

    def value(self):
        return _kSpider_internal.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _kSpider_internal.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _kSpider_internal.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _kSpider_internal.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _kSpider_internal.SwigPyIterator_equal(self, x)

    def copy(self):
        return _kSpider_internal.SwigPyIterator_copy(self)

    def next(self):
        return _kSpider_internal.SwigPyIterator_next(self)

    def __next__(self):
        return _kSpider_internal.SwigPyIterator___next__(self)

    def previous(self):
        return _kSpider_internal.SwigPyIterator_previous(self)

    def advance(self, n):
        return _kSpider_internal.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _kSpider_internal.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _kSpider_internal.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _kSpider_internal.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _kSpider_internal.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _kSpider_internal.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _kSpider_internal.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _kSpider_internal:
_kSpider_internal.SwigPyIterator_swigregister(SwigPyIterator)
class StringDoubleMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _kSpider_internal.StringDoubleMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _kSpider_internal.StringDoubleMap___nonzero__(self)

    def __bool__(self):
        return _kSpider_internal.StringDoubleMap___bool__(self)

    def __len__(self):
        return _kSpider_internal.StringDoubleMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _kSpider_internal.StringDoubleMap___getitem__(self, key)

    def __delitem__(self, key):
        return _kSpider_internal.StringDoubleMap___delitem__(self, key)

    def has_key(self, key):
        return _kSpider_internal.StringDoubleMap_has_key(self, key)

    def keys(self):
        return _kSpider_internal.StringDoubleMap_keys(self)

    def values(self):
        return _kSpider_internal.StringDoubleMap_values(self)

    def items(self):
        return _kSpider_internal.StringDoubleMap_items(self)

    def __contains__(self, key):
        return _kSpider_internal.StringDoubleMap___contains__(self, key)

    def key_iterator(self):
        return _kSpider_internal.StringDoubleMap_key_iterator(self)

    def value_iterator(self):
        return _kSpider_internal.StringDoubleMap_value_iterator(self)

    def __setitem__(self, *args):
        return _kSpider_internal.StringDoubleMap___setitem__(self, *args)

    def asdict(self):
        return _kSpider_internal.StringDoubleMap_asdict(self)

    def __init__(self, *args):
        _kSpider_internal.StringDoubleMap_swiginit(self, _kSpider_internal.new_StringDoubleMap(*args))

    def empty(self):
        return _kSpider_internal.StringDoubleMap_empty(self)

    def size(self):
        return _kSpider_internal.StringDoubleMap_size(self)

    def swap(self, v):
        return _kSpider_internal.StringDoubleMap_swap(self, v)

    def begin(self):
        return _kSpider_internal.StringDoubleMap_begin(self)

    def end(self):
        return _kSpider_internal.StringDoubleMap_end(self)

    def clear(self):
        return _kSpider_internal.StringDoubleMap_clear(self)

    def get_allocator(self):
        return _kSpider_internal.StringDoubleMap_get_allocator(self)

    def count(self, x):
        return _kSpider_internal.StringDoubleMap_count(self, x)

    def erase(self, *args):
        return _kSpider_internal.StringDoubleMap_erase(self, *args)

    def find(self, x):
        return _kSpider_internal.StringDoubleMap_find(self, x)
    __swig_destroy__ = _kSpider_internal.delete_StringDoubleMap

# Register StringDoubleMap in _kSpider_internal:
_kSpider_internal.StringDoubleMap_swigregister(StringDoubleMap)
class StringBoolMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _kSpider_internal.StringBoolMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _kSpider_internal.StringBoolMap___nonzero__(self)

    def __bool__(self):
        return _kSpider_internal.StringBoolMap___bool__(self)

    def __len__(self):
        return _kSpider_internal.StringBoolMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _kSpider_internal.StringBoolMap___getitem__(self, key)

    def __delitem__(self, key):
        return _kSpider_internal.StringBoolMap___delitem__(self, key)

    def has_key(self, key):
        return _kSpider_internal.StringBoolMap_has_key(self, key)

    def keys(self):
        return _kSpider_internal.StringBoolMap_keys(self)

    def values(self):
        return _kSpider_internal.StringBoolMap_values(self)

    def items(self):
        return _kSpider_internal.StringBoolMap_items(self)

    def __contains__(self, key):
        return _kSpider_internal.StringBoolMap___contains__(self, key)

    def key_iterator(self):
        return _kSpider_internal.StringBoolMap_key_iterator(self)

    def value_iterator(self):
        return _kSpider_internal.StringBoolMap_value_iterator(self)

    def __setitem__(self, *args):
        return _kSpider_internal.StringBoolMap___setitem__(self, *args)

    def asdict(self):
        return _kSpider_internal.StringBoolMap_asdict(self)

    def __init__(self, *args):
        _kSpider_internal.StringBoolMap_swiginit(self, _kSpider_internal.new_StringBoolMap(*args))

    def empty(self):
        return _kSpider_internal.StringBoolMap_empty(self)

    def size(self):
        return _kSpider_internal.StringBoolMap_size(self)

    def swap(self, v):
        return _kSpider_internal.StringBoolMap_swap(self, v)

    def begin(self):
        return _kSpider_internal.StringBoolMap_begin(self)

    def end(self):
        return _kSpider_internal.StringBoolMap_end(self)

    def clear(self):
        return _kSpider_internal.StringBoolMap_clear(self)

    def get_allocator(self):
        return _kSpider_internal.StringBoolMap_get_allocator(self)

    def count(self, x):
        return _kSpider_internal.StringBoolMap_count(self, x)

    def erase(self, *args):
        return _kSpider_internal.StringBoolMap_erase(self, *args)

    def find(self, x):
        return _kSpider_internal.StringBoolMap_find(self, x)
    __swig_destroy__ = _kSpider_internal.delete_StringBoolMap

# Register StringBoolMap in _kSpider_internal:
_kSpider_internal.StringBoolMap_swigregister(StringBoolMap)
class StringintMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _kSpider_internal.StringintMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _kSpider_internal.StringintMap___nonzero__(self)

    def __bool__(self):
        return _kSpider_internal.StringintMap___bool__(self)

    def __len__(self):
        return _kSpider_internal.StringintMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _kSpider_internal.StringintMap___getitem__(self, key)

    def __delitem__(self, key):
        return _kSpider_internal.StringintMap___delitem__(self, key)

    def has_key(self, key):
        return _kSpider_internal.StringintMap_has_key(self, key)

    def keys(self):
        return _kSpider_internal.StringintMap_keys(self)

    def values(self):
        return _kSpider_internal.StringintMap_values(self)

    def items(self):
        return _kSpider_internal.StringintMap_items(self)

    def __contains__(self, key):
        return _kSpider_internal.StringintMap___contains__(self, key)

    def key_iterator(self):
        return _kSpider_internal.StringintMap_key_iterator(self)

    def value_iterator(self):
        return _kSpider_internal.StringintMap_value_iterator(self)

    def __setitem__(self, *args):
        return _kSpider_internal.StringintMap___setitem__(self, *args)

    def asdict(self):
        return _kSpider_internal.StringintMap_asdict(self)

    def __init__(self, *args):
        _kSpider_internal.StringintMap_swiginit(self, _kSpider_internal.new_StringintMap(*args))

    def empty(self):
        return _kSpider_internal.StringintMap_empty(self)

    def size(self):
        return _kSpider_internal.StringintMap_size(self)

    def swap(self, v):
        return _kSpider_internal.StringintMap_swap(self, v)

    def begin(self):
        return _kSpider_internal.StringintMap_begin(self)

    def end(self):
        return _kSpider_internal.StringintMap_end(self)

    def clear(self):
        return _kSpider_internal.StringintMap_clear(self)

    def get_allocator(self):
        return _kSpider_internal.StringintMap_get_allocator(self)

    def count(self, x):
        return _kSpider_internal.StringintMap_count(self, x)

    def erase(self, *args):
        return _kSpider_internal.StringintMap_erase(self, *args)

    def find(self, x):
        return _kSpider_internal.StringintMap_find(self, x)
    __swig_destroy__ = _kSpider_internal.delete_StringintMap

# Register StringintMap in _kSpider_internal:
_kSpider_internal.StringintMap_swigregister(StringintMap)
class GeneSets(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _kSpider_internal.GeneSets_swiginit(self, _kSpider_internal.new_GeneSets(*args))

    def build_from_index(self, index_prefix):
        return _kSpider_internal.GeneSets_build_from_index(self, index_prefix)

    def build_from_clusters_file(self, clusters_file):
        return _kSpider_internal.GeneSets_build_from_clusters_file(self, clusters_file)

    def get_pathways_ppi(self):
        return _kSpider_internal.GeneSets_get_pathways_ppi(self)

    def get_pathways_psi(self):
        return _kSpider_internal.GeneSets_get_pathways_psi(self)

    def get_pathways_pcsi(self):
        return _kSpider_internal.GeneSets_get_pathways_pcsi(self)

    def get_pathway_lengths(self):
        return _kSpider_internal.GeneSets_get_pathway_lengths(self)

    def export_genes_to_ppi_psi_tsv(self, filename):
        return _kSpider_internal.GeneSets_export_genes_to_ppi_psi_tsv(self, filename)

    def calculate_heterogeneity_and_fragmentation_from_pairwise(self, pairwise_file):
        return _kSpider_internal.GeneSets_calculate_heterogeneity_and_fragmentation_from_pairwise(self, pairwise_file)

    def get_pathway_to_modularity(self):
        return _kSpider_internal.GeneSets_get_pathway_to_modularity(self)

    def get_pathway_to_heterogeneity(self):
        return _kSpider_internal.GeneSets_get_pathway_to_heterogeneity(self)

    def get_pathway_to_fragmentation(self):
        return _kSpider_internal.GeneSets_get_pathway_to_fragmentation(self)

    def non_iterative_set_cover(self, cluster_id, GC):
        return _kSpider_internal.GeneSets_non_iterative_set_cover(self, cluster_id, GC)

    def keep_only_these_pathways(self, non_redundant_pathways):
        return _kSpider_internal.GeneSets_keep_only_these_pathways(self, non_redundant_pathways)
    __swig_destroy__ = _kSpider_internal.delete_GeneSets

# Register GeneSets in _kSpider_internal:
_kSpider_internal.GeneSets_swigregister(GeneSets)

