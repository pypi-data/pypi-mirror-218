{"version":3,"file":"chunks/app_views_settings_projectPlugins_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actionCreators/plugins.tsx","webpack:///./app/components/switchButton.tsx","webpack:///./app/stores/pluginsStore.tsx","webpack:///./app/utils/withPlugins.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx","webpack:///./app/views/settings/projectPlugins/projectPluginRow.tsx","webpack:///./app/views/settings/projectPlugins/projectPlugins.tsx","webpack:///./app/views/settings/projectPlugins/index.tsx"],"sourcesContent":["import {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport {Client, RequestOptions} from 'sentry/api';\nimport {t} from 'sentry/locale';\nimport PluginsStore from 'sentry/stores/pluginsStore';\nimport {Plugin} from 'sentry/types';\n\nconst activeFetch = {};\n// PluginsStore always exists, so api client should be independent of component lifecycle\nconst api = new Client();\n\ntype Slugs = {\n  /**\n   * Organization slug\n   */\n  orgId: string;\n\n  /**\n   * Plugin slug\n   */\n  pluginId: string;\n\n  /**\n   * Project slug\n   */\n  projectId: string;\n};\n\ntype DoUpdateParams = Slugs & {\n  update: Partial<Plugin>;\n} & Partial<RequestOptions>;\n\nfunction doUpdate({orgId, projectId, pluginId, update, ...params}: DoUpdateParams) {\n  PluginsStore.onUpdate(pluginId, update);\n  const request = api.requestPromise(\n    `/projects/${orgId}/${projectId}/plugins/${pluginId}/`,\n    {\n      ...params,\n    }\n  );\n\n  // This is intentionally not chained because we want the unhandled promise to be returned\n  request\n    .then(() => {\n      PluginsStore.onUpdateSuccess(pluginId, update);\n    })\n    .catch(resp => {\n      const err =\n        resp && resp.responseJSON && typeof resp.responseJSON.detail === 'string'\n          ? new Error(resp.responseJSON.detail)\n          : new Error('Unable to update plugin');\n      PluginsStore.onUpdateError(pluginId, update, err);\n    });\n\n  return request;\n}\n\ntype FetchPluginsOptions = {\n  /**\n   * Reset will set loading state = true\n   */\n  resetLoading?: boolean;\n};\n\n/**\n * Fetches list of available plugins for a project\n */\nexport function fetchPlugins(\n  {orgId, projectId}: Pick<Slugs, 'orgId' | 'projectId'>,\n  options?: FetchPluginsOptions\n): Promise<Plugin[]> {\n  const path = `/projects/${orgId}/${projectId}/plugins/`;\n\n  // Make sure we throttle fetches\n  if (activeFetch[path]) {\n    return activeFetch[path];\n  }\n\n  PluginsStore.onFetchAll(options);\n  const request = api.requestPromise(path, {\n    method: 'GET',\n    includeAllArgs: true,\n  });\n\n  activeFetch[path] = request;\n\n  // This is intentionally not chained because we want the unhandled promise to be returned\n  request\n    .then(([data, _, resp]) => {\n      PluginsStore.onFetchAllSuccess(data, {\n        pageLinks: resp?.getResponseHeader('Link') ?? undefined,\n      });\n\n      return data;\n    })\n    .catch(err => {\n      PluginsStore.onFetchAllError(err);\n      throw new Error('Unable to fetch plugins');\n    })\n    .then(() => (activeFetch[path] = null));\n\n  return request;\n}\n\ntype EnableDisablePluginParams = Slugs;\n\n/**\n * Enables a plugin\n */\nexport function enablePlugin(params: EnableDisablePluginParams) {\n  addLoadingMessage(t('Enabling...'));\n  return doUpdate({...params, update: {enabled: true}, method: 'POST'})\n    .then(() => addSuccessMessage(t('Plugin was enabled')))\n    .catch(() => addErrorMessage(t('Unable to enable plugin')));\n}\n\n/**\n * Disables a plugin\n */\nexport function disablePlugin(params: EnableDisablePluginParams) {\n  addLoadingMessage(t('Disabling...'));\n  return doUpdate({...params, update: {enabled: false}, method: 'DELETE'})\n    .then(() => addSuccessMessage(t('Plugin was disabled')))\n    .catch(() => addErrorMessage(t('Unable to disable plugin')));\n}\n","import {forwardRef} from 'react';\nimport styled from '@emotion/styled';\n\ntype Props = {\n  toggle: React.MouseEventHandler<HTMLButtonElement>;\n  className?: string;\n  /**\n   * Toggle color is always active.\n   */\n  forceActiveColor?: boolean;\n  forwardedRef?: React.Ref<HTMLButtonElement>;\n  id?: string;\n  isActive?: boolean;\n  isDisabled?: boolean;\n  isLoading?: boolean;\n  name?: string;\n  size?: 'sm' | 'lg';\n};\n\nfunction Switch({\n  forwardedRef,\n  size = 'sm',\n  isActive,\n  forceActiveColor,\n  isLoading,\n  isDisabled,\n  toggle,\n  id,\n  name,\n  className,\n  ...props\n}: Props) {\n  return (\n    <SwitchButton\n      ref={forwardedRef}\n      id={id}\n      name={name}\n      type=\"button\"\n      className={className}\n      onClick={isDisabled ? undefined : toggle}\n      role=\"checkbox\"\n      aria-checked={isActive}\n      isLoading={isLoading}\n      disabled={isDisabled}\n      isActive={isActive}\n      size={size}\n      data-test-id=\"switch\"\n      {...props}\n    >\n      <Toggle\n        isDisabled={isDisabled}\n        isActive={isActive}\n        forceActiveColor={forceActiveColor}\n        size={size}\n      />\n    </SwitchButton>\n  );\n}\n\ntype StyleProps = Partial<Props>;\n\nconst getSize = (p: StyleProps) => (p.size === 'sm' ? 16 : 24);\nconst getToggleSize = (p: StyleProps) => getSize(p) - (p.size === 'sm' ? 4 : 8);\nconst getToggleTop = (p: StyleProps) => (p.size === 'sm' ? 1 : 3);\nconst getTranslateX = (p: StyleProps) =>\n  p.isActive ? getToggleTop(p) + getSize(p) * 0.875 : getToggleTop(p);\n\nconst SwitchButton = styled('button')<StyleProps>`\n  display: inline-block;\n  background: none;\n  padding: 0;\n  border: 1px solid ${p => p.theme.border};\n  position: relative;\n  box-shadow: inset ${p => p.theme.dropShadowMedium};\n  height: ${getSize}px;\n  width: ${p => getSize(p) * 1.875}px;\n  border-radius: ${getSize}px;\n  transition: border 0.1s, box-shadow 0.1s;\n\n  &[disabled] {\n    cursor: not-allowed;\n  }\n\n  &:focus,\n  &.focus-visible {\n    outline: none;\n    border-color: ${p => p.theme.focusBorder};\n    box-shadow: ${p => p.theme.focusBorder} 0 0 0 1px;\n  }\n`;\n\nconst Toggle = styled('span')<StyleProps>`\n  display: block;\n  position: absolute;\n  border-radius: 50%;\n  transition: 0.25s all ease;\n  top: ${getToggleTop}px;\n  transform: translateX(${getTranslateX}px);\n  width: ${getToggleSize}px;\n  height: ${getToggleSize}px;\n  background: ${p =>\n    p.isActive || p.forceActiveColor ? p.theme.active : p.theme.border};\n  opacity: ${p => (p.isDisabled ? 0.4 : null)};\n`;\n\nexport default forwardRef<HTMLButtonElement, Props>((props, ref) => (\n  <Switch {...props} forwardedRef={ref} />\n));\n","import {createStore, StoreDefinition} from 'reflux';\n\nimport {Plugin} from 'sentry/types';\n\ninterface InternalDefinition {\n  plugins: Map<string, Plugin> | null;\n  state: {\n    error: Error | null;\n    loading: boolean;\n    pageLinks: string | null;\n    plugins: Plugin[];\n  };\n  updating: Map<string, Plugin>;\n}\n\ninterface PluginStoreDefinition extends StoreDefinition, InternalDefinition {\n  onFetchAll: (options?: {resetLoading?: boolean}) => void;\n  onFetchAllError: (err) => void;\n  onFetchAllSuccess: (data: Plugin[], links: {pageLinks?: string}) => void;\n\n  onUpdate: (id: string, updateObj: Partial<Plugin>) => void;\n  onUpdateError: (id: string, _updateObj: Partial<Plugin>, err) => void;\n  onUpdateSuccess: (id: string, _updateObj: Partial<Plugin>) => void;\n}\n\nconst defaultState = {\n  loading: true,\n  plugins: [],\n  error: null,\n  pageLinks: null,\n};\n\nconst storeConfig: PluginStoreDefinition = {\n  plugins: null,\n  state: {...defaultState},\n  updating: new Map(),\n\n  reset() {\n    // reset our state\n    this.plugins = null;\n    this.state = {...defaultState};\n    this.updating = new Map();\n    return this.state;\n  },\n\n  getInitialState() {\n    return this.getState();\n  },\n\n  getState() {\n    const {plugins: _plugins, ...state} = this.state;\n\n    return {\n      ...state,\n      plugins: this.plugins ? Array.from(this.plugins.values()) : [],\n    };\n  },\n\n  init() {\n    // XXX: Do not use `this.listenTo` in this store. We avoid usage of reflux\n    // listeners due to their leaky nature in tests.\n\n    this.reset();\n  },\n\n  triggerState() {\n    this.trigger(this.getState());\n  },\n\n  onFetchAll({resetLoading} = {}) {\n    if (resetLoading) {\n      this.state.loading = true;\n      this.state.error = null;\n      this.plugins = null;\n    }\n\n    this.triggerState();\n  },\n\n  onFetchAllSuccess(data, {pageLinks}) {\n    this.plugins = new Map(data.map(plugin => [plugin.id, plugin]));\n    this.state.pageLinks = pageLinks || null;\n    this.state.loading = false;\n    this.triggerState();\n  },\n\n  onFetchAllError(err) {\n    this.plugins = null;\n    this.state.loading = false;\n    this.state.error = err;\n    this.triggerState();\n  },\n\n  onUpdate(id: string, updateObj: Partial<Plugin>) {\n    if (!this.plugins) {\n      return;\n    }\n\n    const plugin = this.plugins.get(id);\n    if (!plugin) {\n      return;\n    }\n    const newPlugin = {\n      ...plugin,\n      ...updateObj,\n    };\n\n    this.plugins.set(id, newPlugin);\n    this.updating.set(id, plugin);\n    this.triggerState();\n  },\n\n  onUpdateSuccess(id: string, _updateObj: Partial<Plugin>) {\n    this.updating.delete(id);\n  },\n\n  onUpdateError(id: string, _updateObj: Partial<Plugin>, err) {\n    const origPlugin = this.updating.get(id);\n    if (!origPlugin || !this.plugins) {\n      return;\n    }\n\n    this.plugins.set(id, origPlugin);\n    this.updating.delete(id);\n    this.state.error = err;\n    this.triggerState();\n  },\n};\n\nconst PluginStore = createStore(storeConfig);\nexport default PluginStore;\n","import {Component} from 'react';\n\nimport {fetchPlugins} from 'sentry/actionCreators/plugins';\nimport PluginsStore from 'sentry/stores/pluginsStore';\nimport {Organization, Plugin, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport getDisplayName from 'sentry/utils/getDisplayName';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withProject from 'sentry/utils/withProject';\n\ntype WithPluginProps = {\n  organization: Organization;\n  project?: Project;\n};\n\ntype State = {\n  loading: boolean;\n  plugins: Plugin[];\n};\n\n/**\n * Higher order component that fetches list of plugins and\n * passes PluginsStore to component as `plugins`\n */\nfunction withPlugins<P extends WithPluginProps>(\n  WrappedComponent: React.ComponentType<P>\n) {\n  class WithPlugins extends Component<Omit<P, keyof 'plugins'> & WithPluginProps, State> {\n    static displayName = `withPlugins(${getDisplayName(WrappedComponent)})`;\n    state = {plugins: [], loading: true};\n\n    componentDidMount() {\n      this.fetchPlugins();\n    }\n\n    componentDidUpdate(prevProps, _prevState, prevContext) {\n      const {organization, project} = this.props;\n\n      // Only fetch plugins when a org slug or project slug has changed\n      const prevOrg = prevProps.organization || prevContext?.organization;\n      const prevProject = prevProps.project || prevContext?.project;\n\n      // If previous org/project is undefined then it means:\n      // the HoC has mounted, `fetchPlugins` has been called (via cDM), and\n      // store was updated. We don't need to fetchPlugins again (or it will cause an infinite loop)\n      //\n      // This is for the unusual case where component is mounted and receives a new org/project prop\n      // e.g. when switching projects via breadcrumbs in settings.\n      if (!defined(prevProject) || !defined(prevOrg)) {\n        return;\n      }\n\n      const isOrgSame = prevOrg.slug === organization.slug;\n      const isProjectSame = prevProject.slug === project?.slug;\n\n      // Don't do anything if org and project are the same\n      if (isOrgSame && isProjectSame) {\n        return;\n      }\n\n      this.fetchPlugins();\n    }\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    unsubscribe = PluginsStore.listen(({plugins, loading}: State) => {\n      // State is destructured as store updates contain additional keys\n      // that are not exposed by this HoC\n      this.setState({plugins, loading});\n    }, undefined);\n\n    fetchPlugins() {\n      const {organization, project} = this.props;\n\n      if (!project || !organization) {\n        return;\n      }\n\n      fetchPlugins({projectId: project.slug, orgId: organization.slug});\n    }\n\n    render() {\n      return (\n        <WrappedComponent {...(this.props as P & WithPluginProps)} plugins={this.state} />\n      );\n    }\n  }\n  return withOrganization(withProject(WithPlugins));\n}\n\nexport default withPlugins;\n","import Access from 'sentry/components/acl/access';\nimport {Alert} from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {Project, Scope, Team} from 'sentry/types';\n\ninterface Props extends React.ComponentPropsWithoutRef<typeof Alert> {\n  access?: Scope[];\n  project?: Project | null | undefined;\n  team?: Team | null | undefined;\n}\n\nexport const permissionAlertText = t(\n  'These settings can only be edited by users with the organization-level owner, manager, or team-level admin roles.'\n);\n\nfunction PermissionAlert({access = ['project:write'], project, team, ...props}: Props) {\n  return (\n    <Access access={access} project={project} team={team}>\n      {({hasAccess}) =>\n        !hasAccess && (\n          <Alert data-test-id=\"project-permission-alert\" type=\"warning\" {...props}>\n            {permissionAlertText}\n          </Alert>\n        )\n      }\n    </Access>\n  );\n}\n\nexport default PermissionAlert;\n","import {PureComponent} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport Access from 'sentry/components/acl/access';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport Link from 'sentry/components/links/link';\nimport Switch from 'sentry/components/switchButton';\nimport {t} from 'sentry/locale';\nimport PluginIcon from 'sentry/plugins/components/pluginIcon';\nimport {Organization, Plugin, Project} from 'sentry/types';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport {trackIntegrationAnalytics} from 'sentry/utils/integrationUtil';\nimport recreateRoute from 'sentry/utils/recreateRoute';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nconst grayText = css`\n  color: #979ba0;\n`;\n\ntype Props = {\n  onChange: (id: string, enabled: boolean) => void;\n  organization: Organization;\n  project: Project;\n} & Plugin &\n  Pick<RouteComponentProps<{}, {}>, 'params' | 'routes'>;\n\nclass ProjectPluginRow extends PureComponent<Props> {\n  handleChange = () => {\n    const {onChange, id, enabled} = this.props;\n    onChange(id, !enabled);\n    const eventKey = !enabled ? 'integrations.enabled' : 'integrations.disabled';\n    trackIntegrationAnalytics(eventKey, {\n      integration: id,\n      integration_type: 'plugin',\n      view: 'legacy_integrations',\n      organization: this.props.organization,\n    });\n  };\n\n  render() {\n    const {\n      id,\n      name,\n      slug,\n      version,\n      author,\n      hasConfiguration,\n      enabled,\n      canDisable,\n      project,\n    } = this.props;\n\n    const configureUrl = recreateRoute(id, this.props);\n    return (\n      <Access access={['project:write']} project={project}>\n        {({hasAccess}) => {\n          const LinkOrSpan = hasAccess ? Link : 'span';\n\n          return (\n            <PluginItem key={id} className={slug}>\n              <PluginInfo>\n                <StyledPluginIcon size={48} pluginId={id} />\n                <PluginDescription>\n                  <PluginName>\n                    {`${name} `}\n                    {getDynamicText({\n                      value: (\n                        <Version>{version ? `v${version}` : <em>{t('n/a')}</em>}</Version>\n                      ),\n                      fixed: <Version>v10</Version>,\n                    })}\n                  </PluginName>\n                  <div>\n                    {author && (\n                      <ExternalLink css={grayText} href={author.url}>\n                        {author.name}\n                      </ExternalLink>\n                    )}\n                    {hasConfiguration && (\n                      <span>\n                        {' '}\n                        &middot;{' '}\n                        <LinkOrSpan css={grayText} to={configureUrl}>\n                          {t('Configure plugin')}\n                        </LinkOrSpan>\n                      </span>\n                    )}\n                  </div>\n                </PluginDescription>\n              </PluginInfo>\n              <Switch\n                size=\"lg\"\n                isDisabled={!hasAccess || !canDisable}\n                isActive={enabled}\n                toggle={this.handleChange}\n              />\n            </PluginItem>\n          );\n        }}\n      </Access>\n    );\n  }\n}\n\nexport default withOrganization(ProjectPluginRow);\n\nconst PluginItem = styled('div')`\n  display: flex;\n  flex: 1;\n  align-items: center;\n`;\n\nconst PluginDescription = styled('div')`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n`;\n\nconst PluginInfo = styled('div')`\n  display: flex;\n  flex: 1;\n  line-height: 24px;\n`;\n\nconst PluginName = styled('div')`\n  font-size: 16px;\n`;\n\nconst StyledPluginIcon = styled(PluginIcon)`\n  margin-right: 16px;\n`;\n\n// Keeping these colors the same from old integrations page\nconst Version = styled('span')`\n  color: #babec2;\n`;\n","import {Component} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport Access from 'sentry/components/acl/access';\nimport Link from 'sentry/components/links/link';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {\n  Panel,\n  PanelAlert,\n  PanelBody,\n  PanelHeader,\n  PanelItem,\n} from 'sentry/components/panels';\nimport {t, tct} from 'sentry/locale';\nimport {Organization, Plugin, Project} from 'sentry/types';\nimport RouteError from 'sentry/views/routeError';\n\nimport ProjectPluginRow from './projectPluginRow';\n\ntype Props = {\n  error: React.ComponentProps<typeof RouteError>['error'];\n  loading: boolean;\n  onChange: React.ComponentProps<typeof ProjectPluginRow>['onChange'];\n  organization: Organization;\n  plugins: Plugin[];\n  project: Project;\n} & RouteComponentProps<{}, {}>;\n\nclass ProjectPlugins extends Component<Props> {\n  render() {\n    const {plugins, loading, error, onChange, routes, organization, project} = this.props;\n    const hasError = error;\n    const isLoading = !hasError && loading;\n\n    if (hasError) {\n      return <RouteError error={error} />;\n    }\n\n    if (isLoading) {\n      return <LoadingIndicator />;\n    }\n    const params = {orgId: organization.slug, projectId: project.slug};\n\n    return (\n      <Access access={['org:integrations']} project={project}>\n        {({hasAccess}) => (\n          <Panel>\n            <PanelHeader>\n              <div>{t('Legacy Integration')}</div>\n              <div />\n            </PanelHeader>\n            <PanelBody>\n              <PanelAlert type=\"warning\">\n                {hasAccess\n                  ? tct(\n                      \"Legacy Integrations must be configured per-project. It's recommended to prefer organization integrations over the legacy project integrations when available. Visit the [link:organization integrations] settings to manage them.\",\n                      {\n                        link: <Link to={`/settings/${organization.slug}/integrations`} />,\n                      }\n                    )\n                  : t(\n                      \"Legacy Integrations must be configured per-project. It's recommended to prefer organization integrations over the legacy project integrations when available.\"\n                    )}\n              </PanelAlert>\n\n              {plugins\n                .filter(p => {\n                  return !p.isHidden;\n                })\n                .map(plugin => (\n                  <PanelItem key={plugin.id}>\n                    <ProjectPluginRow\n                      params={params}\n                      routes={routes}\n                      project={project}\n                      {...plugin}\n                      onChange={onChange}\n                    />\n                  </PanelItem>\n                ))}\n            </PanelBody>\n          </Panel>\n        )}\n      </Access>\n    );\n  }\n}\n\nexport default ProjectPlugins;\n","import {Component, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {disablePlugin, enablePlugin, fetchPlugins} from 'sentry/actionCreators/plugins';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport {Organization, Plugin, Project} from 'sentry/types';\nimport {trackIntegrationAnalytics} from 'sentry/utils/integrationUtil';\nimport withPlugins from 'sentry/utils/withPlugins';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport PermissionAlert from 'sentry/views/settings/project/permissionAlert';\n\nimport ProjectPlugins from './projectPlugins';\n\ntype Props = RouteComponentProps<{projectId: string}, {}> & {\n  organization: Organization;\n  plugins: {\n    error: React.ComponentProps<typeof ProjectPlugins>['error'];\n    loading: boolean;\n    plugins: Plugin[];\n  };\n  project: Project;\n};\n\nclass ProjectPluginsContainer extends Component<Props> {\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  fetchData = async () => {\n    const {organization, params} = this.props;\n\n    const plugins = await fetchPlugins({...params, orgId: organization.slug});\n    const installCount = plugins.filter(\n      plugin => plugin.hasConfiguration && plugin.enabled\n    ).length;\n    trackIntegrationAnalytics(\n      'integrations.index_viewed',\n      {\n        integrations_installed: installCount,\n        view: 'legacy_integrations',\n        organization: this.props.organization,\n      },\n      {startSession: true}\n    );\n  };\n\n  handleChange = (pluginId: string, shouldEnable: boolean) => {\n    const {organization, params} = this.props;\n\n    const actionCreator = shouldEnable ? enablePlugin : disablePlugin;\n    actionCreator({projectId: params.projectId, orgId: organization.slug, pluginId});\n  };\n\n  render() {\n    const {loading, error, plugins} = this.props.plugins || {};\n    const {organization, project} = this.props;\n\n    const title = t('Legacy Integrations');\n\n    return (\n      <Fragment>\n        <SentryDocumentTitle title={title} orgSlug={organization.slug} />\n        <SettingsPageHeader title={title} />\n        <PermissionAlert project={project} />\n\n        <ProjectPlugins\n          {...this.props}\n          onChange={this.handleChange}\n          loading={loading}\n          error={error}\n          plugins={plugins}\n        />\n      </Fragment>\n    );\n  }\n}\n\nexport {ProjectPluginsContainer};\n\nexport default withPlugins(ProjectPluginsContainer);\n"],"names":["activeFetch","api","Client","doUpdate","_ref","orgId","projectId","pluginId","update","params","PluginsStore","onUpdate","request","requestPromise","then","onUpdateSuccess","catch","resp","err","responseJSON","detail","Error","onUpdateError","fetchPlugins","_ref2","options","path","onFetchAll","method","includeAllArgs","_ref3","data","_","onFetchAllSuccess","pageLinks","getResponseHeader","undefined","onFetchAllError","enablePlugin","addLoadingMessage","t","enabled","addSuccessMessage","addErrorMessage","disablePlugin","Switch","forwardedRef","size","isActive","forceActiveColor","isLoading","isDisabled","toggle","id","name","className","props","_jsx","SwitchButton","ref","type","onClick","role","disabled","children","Toggle","displayName","getSize","p","getToggleSize","getToggleTop","getTranslateX","_styled","target","theme","border","dropShadowMedium","focusBorder","active","forwardRef","defaultState","loading","plugins","error","storeConfig","state","updating","Map","reset","this","getInitialState","getState","_plugins","Array","from","values","init","triggerState","trigger","resetLoading","arguments","length","map","plugin","updateObj","get","newPlugin","set","_updateObj","delete","origPlugin","createStore","WrappedComponent","WithPlugins","Component","constructor","_defineProperty","listen","setState","componentDidMount","componentDidUpdate","prevProps","_prevState","prevContext","organization","project","prevOrg","prevProject","defined","isOrgSame","slug","isProjectSame","componentWillUnmount","unsubscribe","render","getDisplayName","withOrganization","withProject","permissionAlertText","PermissionAlert","access","team","Access","hasAccess","Alert","grayText","styles","ProjectPluginRow","PureComponent","onChange","eventKey","trackIntegrationAnalytics","integration","integration_type","view","version","author","hasConfiguration","canDisable","configureUrl","recreateRoute","LinkOrSpan","Link","_jsxs","PluginItem","PluginInfo","StyledPluginIcon","PluginDescription","PluginName","getDynamicText","value","Version","fixed","ExternalLink","css","href","url","to","handleChange","PluginIcon","ProjectPlugins","routes","RouteError","LoadingIndicator","Panel","PanelHeader","PanelBody","PanelAlert","tct","link","filter","isHidden","PanelItem","ProjectPluginsContainer","async","installCount","integrations_installed","startSession","shouldEnable","fetchData","title","Fragment","SentryDocumentTitle","orgSlug","SettingsPageHeader","withPlugins"],"sourceRoot":""}