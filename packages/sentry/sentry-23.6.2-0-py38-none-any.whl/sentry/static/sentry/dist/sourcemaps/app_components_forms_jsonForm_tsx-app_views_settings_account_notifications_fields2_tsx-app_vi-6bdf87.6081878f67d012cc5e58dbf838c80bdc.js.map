{"version":3,"file":"chunks/app_components_forms_jsonForm_tsx-app_views_settings_account_notifications_fields2_tsx-app_vi-6bdf87.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/forms/formPanel.tsx","webpack:///./app/components/forms/jsonForm.tsx","webpack:///./app/views/settings/account/notifications/constants.tsx","webpack:///./app/views/settings/account/notifications/fields2.tsx","webpack:///./app/views/settings/account/notifications/parentLabel.tsx","webpack:///./app/views/settings/account/notifications/utils.tsx"],"sourcesContent":["import {useCallback, useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport FieldFromConfig from 'sentry/components/forms/fieldFromConfig';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {IconChevron} from 'sentry/icons';\nimport {Scope} from 'sentry/types';\nimport {sanitizeQuerySelector} from 'sentry/utils/sanitizeQuerySelector';\n\nimport {FieldObject, JsonFormObject} from './types';\n\ntype Props = {\n  /**\n   * List of fields to render\n   */\n  fields: FieldObject[];\n  access?: Set<Scope>;\n  additionalFieldProps?: {[key: string]: any};\n  /**\n   * Can the PanelBody be hidden with a click?\n   */\n  collapsible?: boolean;\n  /**\n   * Disables the entire form\n   */\n  disabled?: boolean;\n  features?: Record<string, any>;\n  /**\n   * The name of the field that should be highlighted\n   */\n  highlighted?: string;\n  initiallyCollapsed?: boolean;\n  /**\n   * Renders inside of PanelBody before PanelBody close\n   */\n  renderFooter?: (arg: JsonFormObject) => React.ReactNode;\n  /**\n   * Renders inside of PanelBody at the start\n   */\n  renderHeader?: (arg: JsonFormObject) => React.ReactNode;\n  /**\n   * Panel title\n   */\n  title?: React.ReactNode;\n};\n\nfunction FormPanel({\n  additionalFieldProps = {},\n  title,\n  fields,\n  access,\n  disabled,\n  renderFooter,\n  renderHeader,\n  collapsible,\n  initiallyCollapsed = false,\n  ...otherProps\n}: Props) {\n  const [collapsed, setCollapse] = useState(initiallyCollapsed);\n  const handleCollapseToggle = useCallback(() => setCollapse(current => !current), []);\n\n  return (\n    <Panel id={typeof title === 'string' ? sanitizeQuerySelector(title) : undefined}>\n      {title && (\n        <PanelHeader>\n          {title}\n          {collapsible && (\n            <Collapse onClick={handleCollapseToggle}>\n              <IconChevron\n                data-test-id=\"form-panel-collapse-chevron\"\n                direction={collapsed ? 'down' : 'up'}\n                size=\"xs\"\n              />\n            </Collapse>\n          )}\n        </PanelHeader>\n      )}\n      <PanelBody hidden={collapsed}>\n        {typeof renderHeader === 'function' && renderHeader({title, fields})}\n\n        {fields.map(field => {\n          if (typeof field === 'function') {\n            return field();\n          }\n\n          const {defaultValue: _, ...fieldWithoutDefaultValue} = field;\n\n          // Allow the form panel disabled prop to override the fields\n          // disabled prop, with fallback to the fields disabled state.\n          if (disabled === true) {\n            fieldWithoutDefaultValue.disabled = true;\n            fieldWithoutDefaultValue.disabledReason = undefined;\n          }\n\n          return (\n            <FieldFromConfig\n              access={access}\n              disabled={disabled}\n              key={field.name}\n              {...otherProps}\n              {...additionalFieldProps}\n              field={fieldWithoutDefaultValue}\n              highlighted={otherProps.highlighted === `#${field.name}`}\n            />\n          );\n        })}\n        {typeof renderFooter === 'function' && renderFooter({title, fields})}\n      </PanelBody>\n    </Panel>\n  );\n}\n\nexport default FormPanel;\n\nconst Collapse = styled('span')`\n  cursor: pointer;\n`;\n","import {Component, Fragment} from 'react';\nimport {WithRouterProps} from 'react-router';\nimport * as Sentry from '@sentry/react';\nimport scrollToElement from 'scroll-to-element';\n\nimport {defined} from 'sentry/utils';\nimport {sanitizeQuerySelector} from 'sentry/utils/sanitizeQuerySelector';\n// eslint-disable-next-line no-restricted-imports\nimport withSentryRouter from 'sentry/utils/withSentryRouter';\n\nimport FormPanel from './formPanel';\nimport {Field, FieldObject, JsonFormObject} from './types';\n\ntype Props = {\n  additionalFieldProps?: {[key: string]: any};\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n} & WithRouterProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends Component<Props, State> {\n  state: State = {\n    // location.hash is optional because of tests.\n    highlighted: this.props.location?.hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.location && this.props.location.hash !== prevProps.location.hash) {\n      const hash = this.props.location.hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    // location.hash is optional because of tests.\n    const hash = toHash || this.props.location?.hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      collapsible,\n      initiallyCollapsed,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      params: _params,\n      router: _router,\n      routes: _routes,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n      collapsible,\n      initiallyCollapsed,\n    };\n\n    return (\n      <div {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <Fragment key={i}>{this.renderForm({formPanelProps, ...formGroup})}</Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </div>\n    );\n  }\n}\n\nexport default withSentryRouter(JsonForm);\n","import {t} from 'sentry/locale';\n\nexport const ALL_PROVIDERS = {\n  email: 'default',\n  slack: 'never',\n  msteams: 'never',\n};\nexport const ALL_PROVIDER_NAMES = Object.keys(ALL_PROVIDERS);\n\n/**\n * These values are stolen from the DB.\n */\nexport const VALUE_MAPPING = {\n  default: 0,\n  never: 10,\n  always: 20,\n  subscribe_only: 30,\n  committed_only: 40,\n};\n\nexport const MIN_PROJECTS_FOR_CONFIRMATION = 3;\nexport const MIN_PROJECTS_FOR_SEARCH = 3;\nexport const MIN_PROJECTS_FOR_PAGINATION = 100;\n\nexport type NotificationSettingsByProviderObject = {[key: string]: string};\nexport type NotificationSettingsObject = {\n  [key: string]: {[key: string]: {[key: string]: NotificationSettingsByProviderObject}};\n};\n\nexport const NOTIFICATION_SETTINGS_TYPES = [\n  'alerts',\n  'workflow',\n  'deploy',\n  'approval',\n  'quota',\n  'reports',\n  'email',\n  'spikeProtection',\n] as const;\n\nexport const SELF_NOTIFICATION_SETTINGS_TYPES = [\n  'personalActivityNotifications',\n  'selfAssignOnResolve',\n];\n\n// 'alerts' | 'workflow' ...\nexport type NotificationSettingsType = (typeof NOTIFICATION_SETTINGS_TYPES)[number];\n\nexport const NOTIFICATION_SETTINGS_PATHNAMES: Record<NotificationSettingsType, string> = {\n  alerts: 'alerts',\n  workflow: 'workflow',\n  deploy: 'deploy',\n  approval: 'approval',\n  quota: 'quota',\n  reports: 'reports',\n  email: 'email',\n  spikeProtection: 'spike-protection',\n};\n\nexport const CONFIRMATION_MESSAGE = (\n  <div>\n    <p style={{marginBottom: '20px'}}>\n      <strong>Are you sure you want to disable these notifications?</strong>\n    </p>\n    <p>\n      {t(\n        'Turning this off will irreversibly overwrite all of your fine-tuning settings to \"off\".'\n      )}\n    </p>\n  </div>\n);\n\nexport const NOTIFICATION_FEATURE_MAP: Partial<Record<NotificationSettingsType, string>> =\n  {\n    quota: 'slack-overage-notifications',\n    spikeProtection: 'spike-projections',\n  };\n","import {Fragment} from 'react';\n\nimport {Field} from 'sentry/components/forms/types';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport {t, tct} from 'sentry/locale';\nimport {getDocsLinkForEventType} from 'sentry/views/settings/account/notifications/utils';\n\nexport const NOTIFICATION_SETTING_FIELDS: Record<string, Field> = {\n  alerts: {\n    name: 'alerts',\n    type: 'select',\n    label: t('Issue Alerts'),\n    choices: [\n      ['always', t('On')],\n      ['never', t('Off')],\n    ],\n    help: t('Notifications sent from Alert rules that your team has set up.'),\n  },\n  workflow: {\n    name: 'workflow',\n    type: 'select',\n    label: t('Issue Workflow'),\n    choices: [\n      ['always', t('On')],\n      ['subscribe_only', t('Only Subscribed Issues')],\n      ['never', t('Off')],\n    ],\n    help: t('Changes in issue assignment, resolution status, and comments.'),\n  },\n  deploy: {\n    name: 'deploy',\n    type: 'select',\n    label: t('Deploys'),\n    choices: [\n      ['always', t('On')],\n      ['committed_only', t('Releases with My Commits')],\n      ['never', t('Off')],\n    ],\n    help: t('Release, environment, and commit overviews.'),\n  },\n  provider: {\n    name: 'provider',\n    type: 'select',\n    label: t('Delivery Method'),\n    choices: [\n      ['email', t('Email')],\n      ['slack', t('Slack')],\n      ['msteams', t('Microsoft Teams')],\n    ],\n    multiple: true,\n    onChange: val => {\n      // This is a little hack to prevent this field from being empty.\n      // TODO(nisanthan): need to prevent showing the clearable on. the multi-select when its only 1 value.\n      if (!val || val.length === 0) {\n        throw Error('Invalid selection. Field cannot be empty.');\n      }\n    },\n  },\n  approval: {\n    name: 'approval',\n    type: 'select',\n    label: t('Approvals'),\n    choices: [\n      ['always', t('On')],\n      ['never', t('Off')],\n    ],\n    help: t('Notifications from teammates that require review or approval.'),\n  },\n  quota: {\n    name: 'quota',\n    type: 'select',\n    label: t('Quota'),\n    choices: [\n      ['always', t('On')],\n      ['never', t('Off')],\n    ],\n    help: t('Error, transaction, and attachment quota limits.'),\n  },\n  reports: {\n    name: 'weekly reports',\n    type: 'blank',\n    label: t('Weekly Reports'),\n    help: t('A summary of the past week for an organization.'),\n  },\n  email: {\n    name: 'email routing',\n    type: 'blank',\n    label: t('Email Routing'),\n    help: t('Change the email address that receives notifications.'),\n  },\n  spikeProtection: {\n    name: 'spikeProtection',\n    type: 'select',\n    label: t('Spike Protection'),\n    choices: [\n      ['always', t('On')],\n      ['never', t('Off')],\n    ],\n    help: t('Notifications about spikes on a per project basis.'),\n  },\n  personalActivityNotifications: {\n    name: 'personalActivityNotifications',\n    type: 'select',\n    label: t('My Own Activity'),\n    choices: [\n      [true as any, t('On')],\n      [false as any, t('Off')],\n    ],\n    help: t('Notifications about your own actions on Sentry.'),\n  },\n  selfAssignOnResolve: {\n    name: 'selfAssignOnResolve',\n    type: 'select',\n    label: t('Resolve and Auto-Assign'),\n    choices: [\n      [true as any, t('On')],\n      [false as any, t('Off')],\n    ],\n    help: t(\"When you resolve an unassigned issue, we'll auto-assign it to you.\"),\n  },\n};\n\n// partial field definition for quota sub-categories\nexport const QUOTA_FIELDS = [\n  {\n    name: 'quotaWarnings',\n    label: t('Set Quota Limit'),\n    help: t('Receive notifications when your organization exceeds the following limits.'),\n    choices: [\n      ['always', t('100% and 80%')],\n      ['never', t('100%')],\n    ] as const,\n  },\n  {\n    name: 'quotaErrors',\n    label: t('Errors'),\n    help: tct('Receive notifications about your error quotas. [learnMore:Learn more]', {\n      learnMore: <ExternalLink href={getDocsLinkForEventType('error')} />,\n    }),\n    choices: [\n      ['always', t('On')],\n      ['never', t('Off')],\n    ] as const,\n  },\n  {\n    name: 'quotaTransactions',\n    label: t('Transactions'),\n    help: tct(\n      'Receive notifications about your transaction quota. [learnMore:Learn more]',\n      {\n        learnMore: <ExternalLink href={getDocsLinkForEventType('transaction')} />,\n      }\n    ),\n    choices: [\n      ['always', t('On')],\n      ['never', t('Off')],\n    ] as const,\n  },\n  {\n    name: 'quotaReplays',\n    label: t('Replays'),\n    help: tct('Receive notifications about your replay quotas. [learnMore:Learn more]', {\n      learnMore: <ExternalLink href={getDocsLinkForEventType('replay')} />,\n    }),\n    choices: [\n      ['always', t('On')],\n      ['never', t('Off')],\n    ] as const,\n  },\n  {\n    name: 'quotaAttachments',\n    label: t('Attachments'),\n    help: tct(\n      'Receive notifications about your attachment quota. [learnMore:Learn more]',\n      {\n        learnMore: <ExternalLink href={getDocsLinkForEventType('attachment')} />,\n      }\n    ),\n    choices: [\n      ['always', t('On')],\n      ['never', t('Off')],\n    ] as const,\n  },\n  {\n    name: 'quotaSpendAllocations',\n    label: (\n      <Fragment>\n        {t('Spend Allocations')}{' '}\n        <QuestionTooltip position=\"top\" title=\"Business plan only\" size=\"xs\" />\n      </Fragment>\n    ),\n    help: t('Receive notifications about your spend allocations.'),\n    choices: [\n      ['always', t('On')],\n      ['never', t('Off')],\n    ] as const,\n  },\n];\n","import styled from '@emotion/styled';\n\nimport Avatar from 'sentry/components/avatar';\nimport {space} from 'sentry/styles/space';\nimport {OrganizationSummary, Project} from 'sentry/types';\nimport {getParentKey} from 'sentry/views/settings/account/notifications/utils';\n\ntype Props = {\n  notificationType: string;\n  parent: OrganizationSummary | Project;\n};\n\n// TODO(mgaeta): Infer parentKey from parent.\nfunction ParentLabel({notificationType, parent}: Props) {\n  return (\n    <FieldLabel>\n      <Avatar\n        {...{\n          [getParentKey(notificationType)]: parent,\n        }}\n      />\n      <span>{parent.slug}</span>\n    </FieldLabel>\n  );\n}\n\nconst FieldLabel = styled('div')`\n  display: flex;\n  gap: ${space(0.5)};\n  line-height: 16px;\n`;\n\nexport default ParentLabel;\n","import set from 'lodash/set';\n\nimport {FieldObject} from 'sentry/components/forms/types';\nimport {t} from 'sentry/locale';\nimport {OrganizationSummary, Project} from 'sentry/types';\nimport {\n  ALL_PROVIDERS,\n  MIN_PROJECTS_FOR_CONFIRMATION,\n  NOTIFICATION_SETTINGS_PATHNAMES,\n  NotificationSettingsByProviderObject,\n  NotificationSettingsObject,\n  VALUE_MAPPING,\n} from 'sentry/views/settings/account/notifications/constants';\nimport {NOTIFICATION_SETTING_FIELDS} from 'sentry/views/settings/account/notifications/fields2';\nimport ParentLabel from 'sentry/views/settings/account/notifications/parentLabel';\n\n/**\n * Which fine-tuning parts are grouped by project\n */\nconst notificationsByProject = ['alerts', 'email', 'workflow', 'spikeProtection'];\n\nexport const isGroupedByProject = (notificationType: string): boolean =>\n  notificationsByProject.includes(notificationType);\n\nexport const getParentKey = (notificationType: string): string => {\n  return isGroupedByProject(notificationType) ? 'project' : 'organization';\n};\n\nexport const groupByOrganization = (\n  projects: Project[]\n): Record<string, {organization: OrganizationSummary; projects: Project[]}> => {\n  return projects.reduce<\n    Record<string, {organization: OrganizationSummary; projects: Project[]}>\n  >((acc, project) => {\n    const orgSlug = project.organization.slug;\n    if (acc.hasOwnProperty(orgSlug)) {\n      acc[orgSlug].projects.push(project);\n    } else {\n      acc[orgSlug] = {\n        organization: project.organization,\n        projects: [project],\n      };\n    }\n    return acc;\n  }, {});\n};\n\nexport const getFallBackValue = (notificationType: string): string => {\n  switch (notificationType) {\n    case 'alerts':\n      return 'always';\n    case 'deploy':\n      return 'committed_only';\n    case 'workflow':\n      return 'subscribe_only';\n    default:\n      return '';\n  }\n};\n\nexport const providerListToString = (providers: string[]): string => {\n  return providers.sort().join('+');\n};\n\nexport const getChoiceString = (choices: string[][], key: string): string => {\n  if (!choices) {\n    return 'default';\n  }\n  const found = choices.find(row => row[0] === key);\n  if (!found) {\n    throw new Error(`Could not find ${key}`);\n  }\n\n  return found[1];\n};\n\nconst isDataAllNever = (data: {[key: string]: string}): boolean =>\n  !!Object.keys(data).length && Object.values(data).every(value => value === 'never');\n\nconst getNonNeverValue = (data: {[key: string]: string}): string | null =>\n  Object.values(data).reduce(\n    (previousValue: string | null, currentValue) =>\n      currentValue === 'never' ? previousValue : currentValue,\n    null\n  );\n\n/**\n * Transform `data`, a mapping of providers to values, so that all providers in\n * `providerList` are \"on\" in the resulting object. The \"on\" value is\n * determined by checking `data` for non-\"never\" values and falling back to the\n * value `fallbackValue`. The \"off\" value is either \"default\" or \"never\"\n * depending on whether `scopeType` is \"parent\" or \"user\" respectively.\n */\nexport const backfillMissingProvidersWithFallback = (\n  data: {[key: string]: string},\n  providerList: string[],\n  fallbackValue: string,\n  scopeType: string\n): NotificationSettingsByProviderObject => {\n  // First pass: What was this scope's previous value?\n  let existingValue;\n  if (scopeType === 'user') {\n    existingValue = isDataAllNever(data)\n      ? fallbackValue\n      : getNonNeverValue(data) || fallbackValue;\n  } else {\n    existingValue = isDataAllNever(data) ? 'never' : getNonNeverValue(data) || 'default';\n  }\n\n  // Second pass: Fill in values for every provider.\n  return Object.fromEntries(\n    Object.keys(ALL_PROVIDERS).map(provider => [\n      provider,\n      providerList.includes(provider) ? existingValue : 'never',\n    ])\n  );\n};\n\n/**\n * Deeply merge N notification settings objects (usually just 2).\n */\nexport const mergeNotificationSettings = (\n  ...objects: NotificationSettingsObject[]\n): NotificationSettingsObject => {\n  const output: NotificationSettingsObject = {};\n\n  objects.forEach(settingsByType =>\n    Object.entries(settingsByType).forEach(([type, settingsByScopeType]) =>\n      Object.entries(settingsByScopeType).forEach(([scopeType, settingsByScopeId]) =>\n        Object.entries(settingsByScopeId).forEach(([scopeId, settingsByProvider]) => {\n          set(output, [type, scopeType, scopeId].join('.'), settingsByProvider);\n        })\n      )\n    )\n  );\n\n  return output;\n};\n\n/**\n * Get the mapping of providers to values that describe a user's parent-\n * independent notification preferences. The data from the API uses the user ID\n * rather than \"me\" so we assume the first ID is the user's.\n */\nexport const getUserDefaultValues = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject\n): NotificationSettingsByProviderObject => {\n  return (\n    Object.values(notificationSettings[notificationType]?.user || {}).pop() ||\n    Object.fromEntries(\n      Object.entries(ALL_PROVIDERS).map(([provider, value]) => [\n        provider,\n        value === 'default' ? getFallBackValue(notificationType) : value,\n      ])\n    )\n  );\n};\n\n/**\n * Get the list of providers currently active on this page. Note: this can be empty.\n */\nexport const getCurrentProviders = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject\n): string[] => {\n  const userData = getUserDefaultValues(notificationType, notificationSettings);\n\n  return Object.entries(userData)\n    .filter(([_, value]) => !['never'].includes(value))\n    .map(([provider, _]) => provider);\n};\n\n/**\n * Calculate the currently selected provider.\n */\nexport const getCurrentDefault = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject\n): string => {\n  const providersList = getCurrentProviders(notificationType, notificationSettings);\n  return providersList.length\n    ? getUserDefaultValues(notificationType, notificationSettings)[providersList[0]]\n    : 'never';\n};\n\n/**\n * For a given notificationType, are the parent-independent setting \"never\" for\n * all providers and are the parent-specific settings \"default\" or \"never\". If\n * so, the API is telling us that the user has opted out of all notifications.\n */\nexport const decideDefault = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject\n): string => {\n  const compare = (a: string, b: string): number => VALUE_MAPPING[a] - VALUE_MAPPING[b];\n\n  const parentIndependentSetting =\n    Object.values(getUserDefaultValues(notificationType, notificationSettings))\n      .sort(compare)\n      .pop() || 'never';\n\n  if (parentIndependentSetting !== 'never') {\n    return parentIndependentSetting;\n  }\n\n  const parentSpecificSetting =\n    Object.values(\n      notificationSettings[notificationType]?.[getParentKey(notificationType)] || {}\n    )\n      .flatMap(settingsByProvider => Object.values(settingsByProvider))\n      .sort(compare)\n      .pop() || 'default';\n\n  return parentSpecificSetting === 'default' ? 'never' : parentSpecificSetting;\n};\n\n/**\n * For a given notificationType, are the parent-independent setting \"never\" for\n * all providers and are the parent-specific settings \"default\" or \"never\"? If\n * so, the API is telling us that the user has opted out of all notifications.\n */\nexport const isEverythingDisabled = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject\n): boolean =>\n  ['never', 'default'].includes(decideDefault(notificationType, notificationSettings));\n\n/**\n * Extract either the list of project or organization IDs from the notification\n * settings in state. This assumes that the notification settings object is\n * fully backfilled with settings for every parent.\n */\nexport const getParentIds = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject\n): string[] =>\n  Object.keys(\n    notificationSettings[notificationType]?.[getParentKey(notificationType)] || {}\n  );\n\nexport const getParentValues = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject,\n  parentId: string\n): NotificationSettingsByProviderObject =>\n  notificationSettings[notificationType]?.[getParentKey(notificationType)]?.[\n    parentId\n  ] || {\n    email: 'default',\n  };\n\n/**\n * Get a mapping of all parent IDs to the notification setting for the current\n * providers.\n */\nexport const getParentData = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject,\n  parents: OrganizationSummary[] | Project[]\n): NotificationSettingsByProviderObject => {\n  const provider = getCurrentProviders(notificationType, notificationSettings)[0];\n\n  return Object.fromEntries(\n    parents.map(parent => [\n      parent.id,\n      getParentValues(notificationType, notificationSettings, parent.id)[provider],\n    ])\n  );\n};\n\n/**\n * Are there are more than N project or organization settings?\n */\nexport const isSufficientlyComplex = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject\n): boolean =>\n  getParentIds(notificationType, notificationSettings).length >\n  MIN_PROJECTS_FOR_CONFIRMATION;\n\n/**\n * This is triggered when we change the Delivery Method select. Don't update the\n * provider for EVERY one of the user's projects and organizations, just the user\n * and parents that have explicit settings.\n */\nexport const getStateToPutForProvider = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject,\n  changedData: NotificationSettingsByProviderObject\n): NotificationSettingsObject => {\n  const providerList: string[] = changedData.provider\n    ? Object.values(changedData.provider)\n    : [];\n  const fallbackValue = getFallBackValue(notificationType);\n\n  // If the user has no settings, we need to create them.\n  if (!Object.keys(notificationSettings).length) {\n    return {\n      [notificationType]: {\n        user: {\n          me: Object.fromEntries(providerList.map(provider => [provider, fallbackValue])),\n        },\n      },\n    };\n  }\n\n  return {\n    [notificationType]: Object.fromEntries(\n      Object.entries(notificationSettings[notificationType]).map(\n        ([scopeType, scopeTypeData]) => [\n          scopeType,\n          Object.fromEntries(\n            Object.entries(scopeTypeData).map(([scopeId, scopeIdData]) => [\n              scopeId,\n              backfillMissingProvidersWithFallback(\n                scopeIdData,\n                providerList,\n                fallbackValue,\n                scopeType\n              ),\n            ])\n          ),\n        ]\n      )\n    ),\n  };\n};\n\n/**\n * Update the current providers' parent-independent notification settings with\n * the new value. If the new value is \"never\", then also update all\n * parent-specific notification settings to \"default\". If the previous value\n * was \"never\", then assume providerList should be \"email\" only.\n */\nexport const getStateToPutForDefault = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject,\n  changedData: NotificationSettingsByProviderObject,\n  parentIds: string[]\n): NotificationSettingsObject => {\n  const newValue = Object.values(changedData)[0];\n  let providerList = getCurrentProviders(notificationType, notificationSettings);\n  if (!providerList.length) {\n    providerList = ['email'];\n  }\n\n  const updatedNotificationSettings = {\n    [notificationType]: {\n      user: {\n        me: Object.fromEntries(providerList.map(provider => [provider, newValue])),\n      },\n    },\n  };\n\n  if (newValue === 'never') {\n    updatedNotificationSettings[notificationType][getParentKey(notificationType)] =\n      Object.fromEntries(\n        parentIds.map(parentId => [\n          parentId,\n          Object.fromEntries(providerList.map(provider => [provider, 'default'])),\n        ])\n      );\n  }\n\n  return updatedNotificationSettings;\n};\n\n/**\n * Get the diff of the Notification Settings for this parent ID.\n */\nexport const getStateToPutForParent = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject,\n  changedData: NotificationSettingsByProviderObject,\n  parentId: string\n): NotificationSettingsObject => {\n  const providerList = getCurrentProviders(notificationType, notificationSettings);\n  const newValue = Object.values(changedData)[0];\n\n  return {\n    [notificationType]: {\n      [getParentKey(notificationType)]: {\n        [parentId]: Object.fromEntries(\n          providerList.map(provider => [provider, newValue])\n        ),\n      },\n    },\n  };\n};\n\n/**\n * Render each parent and add a default option to the the field choices.\n */\nexport const getParentField = (\n  notificationType: string,\n  notificationSettings: NotificationSettingsObject,\n  parent: OrganizationSummary | Project,\n  onChange: (\n    changedData: NotificationSettingsByProviderObject,\n    parentId: string\n  ) => NotificationSettingsObject\n): FieldObject => {\n  const defaultFields = NOTIFICATION_SETTING_FIELDS[notificationType];\n\n  let choices = defaultFields.choices;\n  if (Array.isArray(choices)) {\n    choices = choices.concat([\n      [\n        'default',\n        `${t('Default')} (${getChoiceString(\n          choices,\n          getCurrentDefault(notificationType, notificationSettings)\n        )})`,\n      ],\n    ]);\n  }\n\n  return Object.assign({}, defaultFields, {\n    label: <ParentLabel parent={parent} notificationType={notificationType} />,\n    getData: data => onChange(data, parent.id),\n    name: parent.id,\n    choices,\n    defaultValue: 'default',\n    help: undefined,\n  }) as any;\n};\n\n/**\n * Returns a link to docs on explaining how to manage quotas for that event type\n */\nexport function getDocsLinkForEventType(\n  event: 'error' | 'transaction' | 'attachment' | 'replay'\n) {\n  switch (event) {\n    case 'transaction':\n      return 'https://docs.sentry.io/product/performance/transaction-summary/#what-is-a-transaction';\n    case 'attachment':\n      return 'https://docs.sentry.io/product/accounts/quotas/manage-attachments-quota/#2-rate-limiting';\n    case 'replay':\n      return 'https://docs.sentry.io/product/session-replay/';\n    default:\n      return 'https://docs.sentry.io/product/accounts/quotas/manage-event-stream-guide/#common-workflows-for-managing-your-event-stream';\n  }\n}\n\n/**\n * Returns the corresponding notification type name from the router path name\n */\nexport function getNotificationTypeFromPathname(routerPathname: string) {\n  const result = Object.entries(NOTIFICATION_SETTINGS_PATHNAMES).find(\n    ([_, pathname]) => pathname === routerPathname\n  ) ?? [routerPathname];\n  return result[0];\n}\n"],"names":["FormPanel","_ref","additionalFieldProps","title","fields","access","disabled","renderFooter","renderHeader","collapsible","initiallyCollapsed","otherProps","collapsed","setCollapse","useState","handleCollapseToggle","useCallback","current","_jsxs","Panel","id","sanitizeQuerySelector","undefined","children","PanelHeader","_jsx","Collapse","onClick","IconChevron","direction","size","PanelBody","hidden","map","field","defaultValue","_","fieldWithoutDefaultValue","disabledReason","FieldFromConfig","highlighted","name","displayName","_styled","target","styles","JsonForm","Component","constructor","arguments","_defineProperty","this","props","location","hash","componentDidMount","scrollToHash","componentDidUpdate","prevProps","setState","toHash","scrollToElement","decodeURIComponent","align","offset","err","Sentry","shouldDisplayForm","fieldsWithVisibleProp","filter","defined","visible","length","every","renderForm","formPanelProps","render","forms","features","_location","params","_params","router","_router","routes","_routes","state","formGroup","i","Fragment","withSentryRouter","ALL_PROVIDERS","email","slack","msteams","ALL_PROVIDER_NAMES","Object","keys","VALUE_MAPPING","default","never","always","subscribe_only","committed_only","MIN_PROJECTS_FOR_CONFIRMATION","MIN_PROJECTS_FOR_SEARCH","MIN_PROJECTS_FOR_PAGINATION","NOTIFICATION_SETTINGS_TYPES","SELF_NOTIFICATION_SETTINGS_TYPES","NOTIFICATION_SETTINGS_PATHNAMES","alerts","workflow","deploy","approval","quota","reports","spikeProtection","CONFIRMATION_MESSAGE","style","marginBottom","t","NOTIFICATION_FEATURE_MAP","NOTIFICATION_SETTING_FIELDS","type","label","choices","help","provider","multiple","onChange","val","Error","personalActivityNotifications","selfAssignOnResolve","QUOTA_FIELDS","tct","learnMore","ExternalLink","href","getDocsLinkForEventType","QuestionTooltip","position","ParentLabel","notificationType","parent","FieldLabel","Avatar","getParentKey","slug","space","notificationsByProject","isGroupedByProject","includes","groupByOrganization","projects","reduce","acc","project","orgSlug","organization","hasOwnProperty","push","getFallBackValue","getChoiceString","key","found","find","row","isDataAllNever","data","values","value","getNonNeverValue","previousValue","currentValue","backfillMissingProvidersWithFallback","providerList","fallbackValue","scopeType","existingValue","fromEntries","mergeNotificationSettings","output","_len","objects","Array","_key","forEach","settingsByType","entries","settingsByScopeType","_ref2","settingsByScopeId","_ref3","scopeId","settingsByProvider","set","join","getUserDefaultValues","notificationSettings","user","pop","_ref4","getCurrentProviders","userData","_ref5","_ref6","getCurrentDefault","providersList","decideDefault","compare","a","b","parentIndependentSetting","sort","parentSpecificSetting","flatMap","isEverythingDisabled","getParentIds","getParentValues","parentId","getParentData","parents","isSufficientlyComplex","getStateToPutForProvider","changedData","_ref7","scopeTypeData","_ref8","scopeIdData","me","getStateToPutForDefault","parentIds","newValue","updatedNotificationSettings","getStateToPutForParent","getParentField","defaultFields","isArray","concat","assign","getData","event","getNotificationTypeFromPathname","routerPathname","_ref9","pathname"],"sourceRoot":""}