{"version":3,"file":"chunks/app_views_settings_organizationTeams_teamMembers_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/roleSelectControl.tsx","webpack:///./app/components/teamRoleSelect.tsx","webpack:///./app/utils/orgRole.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/organizationTeams/roleOverwriteWarning.tsx","webpack:///./app/views/settings/organizationTeams/teamMembersRow.tsx","webpack:///./app/views/settings/organizationTeams/teamMembers.tsx","webpack:///./app/views/settings/organizationTeams/utils.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport SelectControl, {\n  ControlProps,\n} from 'sentry/components/forms/controls/selectControl';\nimport {MemberRole} from 'sentry/types';\n\ntype OptionType = {\n  details: React.ReactNode;\n  disabled: boolean;\n  label: string;\n  value: string;\n};\n\ntype Props = Omit<ControlProps<OptionType>, 'onChange' | 'value'> & {\n  disableUnallowed: boolean;\n  roles: MemberRole[];\n  /**\n   * Narrower type than SelectControl because there is no empty value\n   */\n  onChange?: (value: OptionType) => void;\n  value?: string | null;\n};\n\nfunction RoleSelectControl({roles, disableUnallowed, ...props}: Props) {\n  return (\n    <SelectControl\n      options={roles?.map(\n        (r: MemberRole) =>\n          ({\n            value: r.id,\n            label: r.name,\n            disabled: (disableUnallowed && !r.allowed) || r.isRetired,\n            details: <Details>{r.desc}</Details>,\n          } as OptionType)\n      )}\n      showDividers\n      {...props}\n    />\n  );\n}\n\nexport default RoleSelectControl;\n\nconst Details = styled('span')`\n  display: inline-block;\n  width: 20rem;\n`;\n","import styled from '@emotion/styled';\n\nimport {ControlProps} from 'sentry/components/forms/controls/selectControl';\nimport RoleSelectControl from 'sentry/components/roleSelectControl';\nimport {space} from 'sentry/styles/space';\nimport {Organization, Team, TeamMember, TeamRole} from 'sentry/types';\nimport {getEffectiveOrgRole} from 'sentry/utils/orgRole';\nimport {\n  hasOrgRoleOverwrite,\n  RoleOverwriteIcon,\n} from 'sentry/views/settings/organizationTeams/roleOverwriteWarning';\n\ninterface Props {\n  member: TeamMember;\n  onChangeTeamRole: (newRole: TeamRole['id'] | string) => void;\n  organization: Organization;\n  team: Team;\n  disabled?: boolean;\n  size?: ControlProps['size'];\n}\n\nfunction TeamRoleSelect({\n  organization,\n  team,\n  member,\n  onChangeTeamRole,\n  disabled,\n  size,\n}: Props) {\n  const {orgRoleList, teamRoleList, features} = organization;\n  if (!features.includes('team-roles')) {\n    return null;\n  }\n\n  // Determine the org-role, including if the current team has an org role\n  // and adding the user to the current team changes their minimum team-role\n  const possibleOrgRoles = [member.orgRole];\n  if (member.groupOrgRoles && member.groupOrgRoles.length > 0) {\n    possibleOrgRoles.push(member.groupOrgRoles[0].role.id);\n  }\n  if (team.orgRole) {\n    possibleOrgRoles.push(team.orgRole);\n  }\n  const effectiveOrgRole = getEffectiveOrgRole(possibleOrgRoles, orgRoleList);\n\n  // If the member's org-role has elevated permission, their team-role will\n  // inherit scopes from it\n  if (hasOrgRoleOverwrite({orgRole: effectiveOrgRole?.id, orgRoleList, teamRoleList})) {\n    const effectiveTeamRole = teamRoleList.find(\n      r => r.id === effectiveOrgRole?.minimumTeamRole\n    );\n\n    return (\n      <RoleName>\n        {effectiveTeamRole?.name || effectiveOrgRole?.minimumTeamRole}\n        <IconWrapper>\n          <RoleOverwriteIcon\n            orgRole={effectiveOrgRole?.id}\n            orgRoleList={orgRoleList}\n            teamRoleList={teamRoleList}\n          />\n        </IconWrapper>\n      </RoleName>\n    );\n  }\n\n  const teamRoleId =\n    member.teamRole || // From TeamMemberEndpoint\n    member.teamRoles?.find(tr => tr.teamSlug === team.slug)?.role || // From OrgMemberDetailEndpoint\n    null;\n  const teamRole = teamRoleList.find(r => r.id === teamRoleId) || teamRoleList[0];\n\n  return (\n    <RoleSelectControl\n      disabled={disabled}\n      disableUnallowed={false}\n      roles={teamRoleList}\n      value={teamRole.id}\n      onChange={option => onChangeTeamRole(option.value)}\n      size={size}\n    />\n  );\n}\n\nexport default TeamRoleSelect;\n\nconst RoleName = styled('div')`\n  display: flex;\n  align-items: center;\n`;\nconst IconWrapper = styled('div')`\n  height: ${space(2)};\n  margin-left: ${space(1)};\n`;\n","import {OrgRole} from 'sentry/types';\n\nexport function getEffectiveOrgRole(\n  memberOrgRoles: string[],\n  orgRoleList: OrgRole[]\n): OrgRole {\n  const orgRoleMap = orgRoleList.reduce((acc, role, index) => {\n    acc[role.id] = {index, role};\n    return acc;\n  }, {});\n\n  // sort by ascending index (high to low priority)\n  memberOrgRoles.sort((a, b) => orgRoleMap[b].index - orgRoleMap[a].index);\n\n  return orgRoleMap[memberOrgRoles[0]]?.role;\n}\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\nexport type AsyncViewState = AsyncComponent['state'];\nexport type AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {PanelAlert} from 'sentry/components/panels';\nimport {Tooltip} from 'sentry/components/tooltip';\nimport {IconInfo} from 'sentry/icons';\nimport {tct} from 'sentry/locale';\nimport {OrgRole, TeamRole} from 'sentry/types';\n\ntype Props = {\n  orgRole: OrgRole['id'] | undefined;\n  orgRoleList: OrgRole[];\n  teamRoleList: TeamRole[];\n  isSelf?: boolean;\n};\n\nexport function RoleOverwriteIcon(props: Props) {\n  const hasOverride = hasOrgRoleOverwrite(props);\n  if (!hasOverride) {\n    return null;\n  }\n\n  return (\n    <Tooltip title={getOverwriteString(props)}>\n      <IconInfo size=\"sm\" color=\"gray300\" />\n    </Tooltip>\n  );\n}\n\nexport function RoleOverwritePanelAlert(props: Props) {\n  const hasOverride = hasOrgRoleOverwrite(props);\n  if (!hasOverride) {\n    return null;\n  }\n\n  return (\n    <PanelAlert data-test-id=\"alert-role-overwrite\">\n      {getOverwriteString(props)}\n    </PanelAlert>\n  );\n}\n\n/**\n * Check that the user's org role has a minimum team role that maps to the lowest\n * possible team role\n */\nexport function hasOrgRoleOverwrite(props: Props) {\n  const {orgRole, orgRoleList, teamRoleList} = props;\n\n  const orgRoleObj = orgRoleList.find(r => r.id === orgRole);\n  return teamRoleList.findIndex(r => r.id === orgRoleObj?.minimumTeamRole) > 0;\n}\n\n/**\n * Standardize string so situations where org-level vs team-level roles is easier to recognize\n */\nexport function getOverwriteString(props: Props) {\n  const {orgRole, orgRoleList, teamRoleList, isSelf} = props;\n  const orgRoleObj = orgRoleList.find(r => r.id === orgRole);\n  const teamRoleObj = teamRoleList.find(r => r.id === orgRoleObj?.minimumTeamRole);\n  if (!orgRoleObj || !teamRoleObj) {\n    return '';\n  }\n\n  return tct(\n    '[selfNoun] organization role as [article] [orgRole] has granted [selfPronoun] a minimum team-level role of [teamRole]',\n    {\n      selfNoun: isSelf ? 'Your' : \"This user's\",\n      selfPronoun: isSelf ? 'you' : 'them',\n      article: 'AEIOU'.includes(orgRoleObj.name[0]) ? 'an' : 'a',\n      orgRole: <strong>{orgRoleObj.name}</strong>,\n      teamRole: <strong>{teamRoleObj.name}</strong>,\n    }\n  );\n}\n\nexport default RoleOverwriteIcon;\n","import styled from '@emotion/styled';\n\nimport {Button} from 'sentry/components/button';\nimport IdBadge from 'sentry/components/idBadge';\nimport {PanelItem} from 'sentry/components/panels';\nimport TeamRoleSelect from 'sentry/components/teamRoleSelect';\nimport {IconSubtract} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Member, Organization, Team, TeamMember, User} from 'sentry/types';\nimport {getButtonHelpText} from 'sentry/views/settings/organizationTeams/utils';\n\ninterface Props {\n  hasWriteAccess: boolean;\n  isOrgOwner: boolean;\n  member: TeamMember;\n  organization: Organization;\n  removeMember: (member: Member) => void;\n  team: Team;\n  updateMemberRole: (member: Member, newRole: string) => void;\n  user: User;\n}\n\nfunction TeamMembersRow({\n  organization,\n  team,\n  member,\n  user,\n  hasWriteAccess,\n  isOrgOwner,\n  removeMember,\n  updateMemberRole,\n}: Props) {\n  const isSelf = user.email === member.email;\n\n  return (\n    <TeamRolesPanelItem key={member.id}>\n      <div>\n        <IdBadge avatarSize={36} member={member} useLink orgId={organization.slug} />\n      </div>\n      <RoleSelectWrapper>\n        <TeamRoleSelect\n          disabled={isSelf || !hasWriteAccess}\n          organization={organization}\n          team={team}\n          member={member}\n          onChangeTeamRole={newRole => updateMemberRole(member, newRole)}\n        />\n      </RoleSelectWrapper>\n      <div>\n        <RemoveButton\n          hasWriteAccess={hasWriteAccess}\n          hasOrgRoleFromTeam={team.orgRole !== null}\n          isOrgOwner={isOrgOwner}\n          isSelf={isSelf}\n          onClick={() => removeMember(member)}\n          member={member}\n        />\n      </div>\n    </TeamRolesPanelItem>\n  );\n}\n\nfunction RemoveButton(props: {\n  hasOrgRoleFromTeam: boolean;\n  hasWriteAccess: boolean;\n  isOrgOwner: boolean;\n  isSelf: boolean;\n  member: TeamMember;\n  onClick: () => void;\n}) {\n  const {member, hasWriteAccess, isOrgOwner, isSelf, hasOrgRoleFromTeam, onClick} = props;\n\n  const canRemoveMember = hasWriteAccess || isSelf;\n  if (!canRemoveMember) {\n    return (\n      <Button\n        size=\"xs\"\n        disabled\n        icon={<IconSubtract size=\"xs\" isCircled />}\n        aria-label={t('Remove')}\n        title={t('You do not have permission to remove a member from this team.')}\n      >\n        {t('Remove')}\n      </Button>\n    );\n  }\n\n  const isIdpProvisioned = member.flags['idp:provisioned'];\n  const isPermissionGroup = hasOrgRoleFromTeam && !isOrgOwner;\n  const buttonHelpText = getButtonHelpText(isIdpProvisioned, isPermissionGroup);\n  if (isIdpProvisioned || isPermissionGroup) {\n    return (\n      <Button\n        size=\"xs\"\n        disabled\n        icon={<IconSubtract size=\"xs\" isCircled />}\n        aria-label={t('Remove')}\n        title={buttonHelpText}\n      >\n        {t('Remove')}\n      </Button>\n    );\n  }\n\n  const buttonRemoveText = isSelf ? t('Leave') : t('Remove');\n  return (\n    <Button\n      data-test-id={`button-remove-${member.id}`}\n      size=\"xs\"\n      disabled={!canRemoveMember}\n      icon={<IconSubtract size=\"xs\" isCircled />}\n      onClick={onClick}\n      aria-label={buttonRemoveText}\n    >\n      {buttonRemoveText}\n    </Button>\n  );\n}\n\nconst RoleSelectWrapper = styled('div')`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n\n  > div:first-child {\n    flex-grow: 1;\n  }\n`;\n\nconst TeamRolesPanelItem = styled(PanelItem)`\n  display: grid;\n  grid-template-columns: minmax(120px, 4fr) minmax(120px, 2fr) minmax(100px, 1fr);\n  gap: ${space(2)};\n  align-items: center;\n\n  > div:last-child {\n    margin-left: auto;\n  }\n`;\n\nexport default TeamMembersRow;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport debounce from 'lodash/debounce';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {\n  openInviteMembersModal,\n  openTeamAccessRequestModal,\n} from 'sentry/actionCreators/modal';\nimport {joinTeam, leaveTeam} from 'sentry/actionCreators/teams';\nimport {Client} from 'sentry/api';\nimport {hasEveryAccess} from 'sentry/components/acl/access';\nimport UserAvatar from 'sentry/components/avatar/userAvatar';\nimport DropdownAutoComplete from 'sentry/components/dropdownAutoComplete';\nimport {Item} from 'sentry/components/dropdownAutoComplete/types';\nimport DropdownButton from 'sentry/components/dropdownButton';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport Link from 'sentry/components/links/link';\nimport LoadingError from 'sentry/components/loadingError';\nimport Pagination from 'sentry/components/pagination';\nimport {Panel, PanelHeader} from 'sentry/components/panels';\nimport {IconUser} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Config, Member, Organization, Team, TeamMember} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\nimport withConfig from 'sentry/utils/withConfig';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AsyncView, {AsyncViewState} from 'sentry/views/asyncView';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\nimport TeamMembersRow from 'sentry/views/settings/organizationTeams/teamMembersRow';\nimport PermissionAlert from 'sentry/views/settings/project/permissionAlert';\n\nimport {getButtonHelpText} from './utils';\n\ntype RouteParams = {\n  teamId: string;\n};\n\ninterface Props extends RouteComponentProps<RouteParams, {}> {\n  api: Client;\n  config: Config;\n  organization: Organization;\n  team: Team;\n}\n\ninterface State extends AsyncViewState {\n  dropdownBusy: boolean;\n  error: boolean;\n  orgMembers: Member[];\n  teamMembers: TeamMember[];\n}\n\nclass TeamMembers extends AsyncView<Props, State> {\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      error: false,\n      dropdownBusy: false,\n      teamMembers: [],\n      orgMembers: [],\n    };\n  }\n\n  componentDidMount() {\n    super.componentDidMount();\n    // Initialize \"add member\" dropdown with data\n    this.fetchMembersRequest('');\n  }\n\n  debouncedFetchMembersRequest = debounce(\n    (query: string) =>\n      this.setState({dropdownBusy: true}, () => this.fetchMembersRequest(query)),\n    200\n  );\n\n  fetchMembersRequest = async (query: string) => {\n    const {organization, api} = this.props;\n\n    try {\n      const data = await api.requestPromise(\n        `/organizations/${organization.slug}/members/`,\n        {\n          query: {query},\n        }\n      );\n      this.setState({\n        orgMembers: data,\n        dropdownBusy: false,\n      });\n    } catch (_err) {\n      addErrorMessage(t('Unable to load organization members.'), {\n        duration: 2000,\n      });\n\n      this.setState({\n        dropdownBusy: false,\n      });\n    }\n  };\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {organization, params} = this.props;\n\n    return [\n      [\n        'teamMembers',\n        `/teams/${organization.slug}/${params.teamId}/members/`,\n        {},\n        {paginate: true},\n      ],\n    ];\n  }\n\n  addTeamMember = (selection: Item) => {\n    const {organization, params} = this.props;\n    const {orgMembers, teamMembers} = this.state;\n\n    // Reset members list after adding member to team\n    this.debouncedFetchMembersRequest('');\n\n    joinTeam(\n      this.props.api,\n      {\n        orgId: organization.slug,\n        teamId: params.teamId,\n        memberId: selection.value,\n      },\n      {\n        success: () => {\n          const orgMember = orgMembers.find(member => member.id === selection.value);\n          if (orgMember === undefined) {\n            return;\n          }\n          this.setState({\n            error: false,\n            teamMembers: teamMembers.concat([orgMember as TeamMember]),\n          });\n          addSuccessMessage(t('Successfully added member to team.'));\n        },\n        error: () => {\n          addErrorMessage(t('Unable to add team member.'));\n        },\n      }\n    );\n  };\n\n  removeTeamMember = (member: Member) => {\n    const {organization, params} = this.props;\n    const {teamMembers} = this.state;\n    leaveTeam(\n      this.props.api,\n      {\n        orgId: organization.slug,\n        teamId: params.teamId,\n        memberId: member.id,\n      },\n      {\n        success: () => {\n          this.setState({\n            teamMembers: teamMembers.filter(m => m.id !== member.id),\n          });\n          addSuccessMessage(t('Successfully removed member from team.'));\n        },\n        error: () =>\n          addErrorMessage(\n            t('There was an error while trying to remove a member from the team.')\n          ),\n      }\n    );\n  };\n\n  updateTeamMemberRole = (member: Member, newRole: string) => {\n    const {organization} = this.props;\n    const {teamId} = this.props.params;\n    const endpoint = `/organizations/${organization.slug}/members/${member.id}/teams/${teamId}/`;\n\n    this.props.api.request(endpoint, {\n      method: 'PUT',\n      data: {teamRole: newRole},\n      success: data => {\n        const teamMembers: any = [...this.state.teamMembers];\n        const i = teamMembers.findIndex(m => m.id === member.id);\n        teamMembers[i] = {\n          ...member,\n          teamRole: data.teamRole,\n        };\n        this.setState({teamMembers});\n        addSuccessMessage(t('Successfully changed role for team member.'));\n      },\n      error: () => {\n        addErrorMessage(\n          t('There was an error while trying to change the roles for a team member.')\n        );\n      },\n    });\n  };\n\n  /**\n   * We perform an API request to support orgs with > 100 members (since that's the max API returns)\n   *\n   * @param {Event} e React Event when member filter input changes\n   */\n  handleMemberFilterChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({dropdownBusy: true});\n    this.debouncedFetchMembersRequest(e.target.value);\n  };\n\n  renderDropdown(isTeamAdmin: boolean) {\n    const {organization, params, team} = this.props;\n    const {orgMembers} = this.state;\n    const existingMembers = new Set(this.state.teamMembers.map(member => member.id));\n\n    // members can add other members to a team if the `Open Membership` setting is enabled\n    // otherwise, `org:write` or `team:admin` permissions are required\n    const hasOpenMembership = !!organization?.openMembership;\n    const canAddMembers = hasOpenMembership || isTeamAdmin;\n\n    const isDropdownDisabled = team.flags['idp:provisioned'];\n\n    const items = (orgMembers || [])\n      .filter(m => !existingMembers.has(m.id))\n      .map(m => ({\n        searchKey: `${m.name} ${m.email}`,\n        value: m.id,\n        label: (\n          <StyledUserListElement>\n            <StyledAvatar user={m} size={24} className=\"avatar\" />\n            <StyledNameOrEmail>{m.name || m.email}</StyledNameOrEmail>\n          </StyledUserListElement>\n        ),\n      }));\n\n    const menuHeader = (\n      <StyledMembersLabel>\n        {t('Members')}\n        <StyledCreateMemberLink\n          to=\"\"\n          onClick={() => openInviteMembersModal({source: 'teams'})}\n          data-test-id=\"invite-member\"\n        >\n          {t('Invite Member')}\n        </StyledCreateMemberLink>\n      </StyledMembersLabel>\n    );\n\n    return (\n      <DropdownAutoComplete\n        closeOnSelect={false}\n        items={items}\n        alignMenu=\"right\"\n        onSelect={\n          canAddMembers\n            ? this.addTeamMember\n            : selection =>\n                openTeamAccessRequestModal({\n                  teamId: params.teamId,\n                  orgId: organization.slug,\n                  memberId: selection.value,\n                })\n        }\n        menuHeader={menuHeader}\n        emptyMessage={t('No members')}\n        onChange={this.handleMemberFilterChange}\n        busy={this.state.dropdownBusy}\n        onClose={() => this.debouncedFetchMembersRequest('')}\n        disabled={isDropdownDisabled}\n        data-test-id=\"add-member-menu\"\n      >\n        {({isOpen}) => (\n          <DropdownButton\n            isOpen={isOpen}\n            size=\"xs\"\n            data-test-id=\"add-member\"\n            disabled={isDropdownDisabled}\n          >\n            {t('Add Member')}\n          </DropdownButton>\n        )}\n      </DropdownAutoComplete>\n    );\n  }\n\n  renderPageTextBlock() {\n    const {organization, team} = this.props;\n    const {openMembership} = organization;\n    const isIdpProvisioned = team.flags['idp:provisioned'];\n\n    if (isIdpProvisioned) {\n      return getButtonHelpText(isIdpProvisioned);\n    }\n\n    return openMembership\n      ? t(\n          '\"Open Membership\" is enabled for the organization. Anyone can add members for this team.'\n        )\n      : t(\n          '\"Open Membership\" is disabled for the organization. Org Owner/Manager/Admin, or Team Admins can add members for this team.'\n        );\n  }\n\n  render() {\n    if (this.state.error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n\n    const {organization, config, team} = this.props;\n    const {teamMembersPageLinks} = this.state;\n    const {access, openMembership} = organization;\n\n    const hasOrgWriteAccess = hasEveryAccess(['org:write'], {organization, team});\n    const hasTeamAdminAccess = hasEveryAccess(['team:admin'], {organization, team});\n    const isTeamAdmin = hasOrgWriteAccess || hasTeamAdminAccess;\n\n    // org:admin is a unique scope that only org owners have\n    const isOrgOwner = access.includes('org:admin');\n\n    return (\n      <Fragment>\n        <TextBlock>{this.renderPageTextBlock()}</TextBlock>\n\n        <PermissionAlert\n          access={openMembership ? ['org:read'] : ['team:write']}\n          team={team}\n        />\n\n        <Panel>\n          <PanelHeader hasButtons>\n            <div>{t('Members')}</div>\n            <div style={{textTransform: 'none'}}>{this.renderDropdown(isTeamAdmin)}</div>\n          </PanelHeader>\n          {this.state.teamMembers.length ? (\n            this.state.teamMembers.map(member => {\n              return (\n                <TeamMembersRow\n                  key={member.id}\n                  hasWriteAccess={isTeamAdmin}\n                  isOrgOwner={isOrgOwner}\n                  organization={organization}\n                  team={team}\n                  member={member}\n                  user={config.user}\n                  removeMember={this.removeTeamMember}\n                  updateMemberRole={this.updateTeamMemberRole}\n                />\n              );\n            })\n          ) : (\n            <EmptyMessage icon={<IconUser size=\"xl\" />} size=\"large\">\n              {t('This team has no members')}\n            </EmptyMessage>\n          )}\n        </Panel>\n        <Pagination pageLinks={teamMembersPageLinks} />\n      </Fragment>\n    );\n  }\n}\n\nconst StyledUserListElement = styled('div')`\n  display: grid;\n  grid-template-columns: max-content 1fr;\n  gap: ${space(0.5)};\n  align-items: center;\n`;\n\nconst StyledNameOrEmail = styled('div')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  ${p => p.theme.overflowEllipsis};\n`;\n\nconst StyledAvatar = styled(props => <UserAvatar {...props} />)`\n  min-width: 1.75em;\n  min-height: 1.75em;\n  width: 1.5em;\n  height: 1.5em;\n`;\n\nconst StyledMembersLabel = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr max-content;\n  padding: ${space(1)} 0;\n  font-size: ${p => p.theme.fontSizeExtraSmall};\n  text-transform: uppercase;\n`;\n\nconst StyledCreateMemberLink = styled(Link)`\n  text-transform: none;\n`;\n\nexport default withConfig(withApi(withOrganization(TeamMembers)));\n","import {t} from 'sentry/locale';\n\nexport function getButtonHelpText(\n  isIdpProvisioned: boolean = false,\n  isPermissionGroup: boolean = false\n) {\n  if (isIdpProvisioned) {\n    return t(\n      \"Membership to this team is managed through your organization's identity provider.\"\n    );\n  }\n\n  if (isPermissionGroup) {\n    return t('Membership to a team with an organization role is managed by org owners.');\n  }\n\n  return undefined;\n}\n","import Access from 'sentry/components/acl/access';\nimport {Alert} from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {Project, Scope, Team} from 'sentry/types';\n\ninterface Props extends React.ComponentPropsWithoutRef<typeof Alert> {\n  access?: Scope[];\n  project?: Project | null | undefined;\n  team?: Team | null | undefined;\n}\n\nexport const permissionAlertText = t(\n  'These settings can only be edited by users with the organization-level owner, manager, or team-level admin roles.'\n);\n\nfunction PermissionAlert({access = ['project:write'], project, team, ...props}: Props) {\n  return (\n    <Access access={access} project={project} team={team}>\n      {({hasAccess}) =>\n        !hasAccess && (\n          <Alert data-test-id=\"project-permission-alert\" type=\"warning\" {...props}>\n            {permissionAlertText}\n          </Alert>\n        )\n      }\n    </Access>\n  );\n}\n\nexport default PermissionAlert;\n"],"names":["RoleSelectControl","_ref","roles","disableUnallowed","props","_jsx","SelectControl","options","map","r","value","id","label","name","disabled","allowed","isRetired","details","Details","children","desc","showDividers","displayName","_styled","target","styles","TeamRoleSelect","organization","team","member","onChangeTeamRole","size","orgRoleList","teamRoleList","features","includes","possibleOrgRoles","orgRole","groupOrgRoles","length","push","role","effectiveOrgRole","getEffectiveOrgRole","hasOrgRoleOverwrite","effectiveTeamRole","find","minimumTeamRole","_jsxs","RoleName","IconWrapper","RoleOverwriteIcon","teamRoleId","teamRole","teamRoles","tr","teamSlug","slug","onChange","option","space","memberOrgRoles","orgRoleMap","reduce","acc","index","sort","a","b","AsyncView","AsyncComponent","getTitle","render","SentryDocumentTitle","title","this","renderComponent","Tooltip","getOverwriteString","IconInfo","color","RoleOverwritePanelAlert","PanelAlert","orgRoleObj","findIndex","isSelf","teamRoleObj","tct","selfNoun","selfPronoun","article","TeamMembersRow","user","hasWriteAccess","isOrgOwner","removeMember","updateMemberRole","email","TeamRolesPanelItem","IdBadge","avatarSize","useLink","orgId","RoleSelectWrapper","newRole","RemoveButton","hasOrgRoleFromTeam","onClick","canRemoveMember","Button","icon","IconSubtract","isCircled","t","isIdpProvisioned","flags","isPermissionGroup","buttonHelpText","getButtonHelpText","buttonRemoveText","PanelItem","TeamMembers","constructor","arguments","_defineProperty","debounce","query","setState","dropdownBusy","fetchMembersRequest","async","api","data","requestPromise","orgMembers","_err","addErrorMessage","duration","selection","params","teamMembers","state","debouncedFetchMembersRequest","joinTeam","teamId","memberId","success","orgMember","undefined","error","concat","addSuccessMessage","leaveTeam","filter","m","endpoint","request","method","i","e","getDefaultState","super","componentDidMount","getEndpoints","paginate","renderDropdown","isTeamAdmin","existingMembers","Set","canAddMembers","openMembership","isDropdownDisabled","items","has","searchKey","StyledUserListElement","StyledAvatar","className","StyledNameOrEmail","menuHeader","StyledMembersLabel","StyledCreateMemberLink","to","openInviteMembersModal","source","DropdownAutoComplete","closeOnSelect","alignMenu","onSelect","addTeamMember","openTeamAccessRequestModal","emptyMessage","handleMemberFilterChange","busy","onClose","isOpen","DropdownButton","renderPageTextBlock","LoadingError","onRetry","fetchData","config","teamMembersPageLinks","access","hasOrgWriteAccess","hasEveryAccess","hasTeamAdminAccess","Fragment","TextBlock","PermissionAlert","Panel","PanelHeader","hasButtons","style","textTransform","removeTeamMember","updateTeamMemberRole","EmptyMessage","IconUser","Pagination","pageLinks","p","theme","fontSizeSmall","overflowEllipsis","UserAvatar","fontSizeExtraSmall","Link","withConfig","withApi","withOrganization","permissionAlertText","project","Access","_ref2","hasAccess","Alert","type"],"sourceRoot":""}