{"version":3,"file":"chunks/app_utils_performance_contexts_pageError_tsx-app_views_starfish_views_spans_spansView_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/performance/contexts/pageError.tsx","webpack:///./app/views/starfish/components/chartPanel.tsx","webpack:///./app/views/starfish/views/spans/selectors/actionSelector.tsx","webpack:///./app/views/starfish/views/spans/selectors/domainSelector.tsx","webpack:///./app/views/starfish/views/spans/selectors/spanOperationSelector.tsx","webpack:///./app/views/starfish/views/spans/queries.tsx","webpack:///./app/views/starfish/views/spans/spanTimeCharts.tsx","webpack:///./app/views/starfish/views/spans/spansView.tsx"],"sourcesContent":["import {createContext, useContext, useState} from 'react';\n\nimport {Alert} from 'sentry/components/alert';\n\nconst pageErrorContext = createContext<{\n  setPageError: (error: string | undefined) => void;\n  pageError?: string;\n}>({\n  pageError: undefined,\n  setPageError: (_: string | undefined) => {},\n});\n\nexport function PageErrorProvider({children}: {children: React.ReactNode}) {\n  const [pageError, setPageError] = useState<string | undefined>();\n  return (\n    <pageErrorContext.Provider\n      value={{\n        pageError,\n        setPageError,\n      }}\n    >\n      {children}\n    </pageErrorContext.Provider>\n  );\n}\n\nexport function PageErrorAlert() {\n  const {pageError} = useContext(pageErrorContext);\n  if (!pageError) {\n    return null;\n  }\n\n  return (\n    <Alert type=\"error\" data-test-id=\"page-error-alert\" showIcon>\n      {pageError}\n    </Alert>\n  );\n}\n\nexport const usePageError = () => useContext(pageErrorContext);\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Panel, PanelBody} from 'sentry/components/panels';\nimport {space} from 'sentry/styles/space';\n\ntype Props = {\n  children: React.ReactNode;\n  button?: JSX.Element;\n  title?: React.ReactNode;\n};\n\nexport default function ChartPanel({title, children, button}: Props) {\n  return (\n    <Panel>\n      <PanelBody withPadding>\n        {title && (\n          <Header>\n            {title && <ChartLabel>{title}</ChartLabel>}\n            {button}\n          </Header>\n        )}\n        {children}\n      </PanelBody>\n    </Panel>\n  );\n}\n\nconst ChartLabel = styled('p')`\n  ${p => p.theme.text.cardTitle}\n`;\n\nconst Header = styled('div')`\n  padding: 0 ${space(1)} 0 0;\n  min-height: 36px;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n","import {ReactNode} from 'react';\nimport {browserHistory} from 'react-router';\nimport {Location} from 'history';\n\nimport {CompactSelect} from 'sentry/components/compactSelect';\nimport {t} from 'sentry/locale';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {DiscoverDatasets} from 'sentry/utils/discover/types';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport {ModuleName} from 'sentry/views/starfish/types';\nimport {useSpansQuery} from 'sentry/views/starfish/utils/useSpansQuery';\nimport {NULL_SPAN_CATEGORY} from 'sentry/views/starfish/views/webServiceView/spanGroupBreakdownContainer';\n\ntype Props = {\n  moduleName?: ModuleName;\n  spanCategory?: string;\n  value?: string;\n};\n\nexport function ActionSelector({\n  value = '',\n  moduleName = ModuleName.ALL,\n  spanCategory,\n}: Props) {\n  // TODO: This only returns the top 25 actions. It should either load them all, or paginate, or allow searching\n  //\n  const location = useLocation();\n  const eventView = getEventView(location, moduleName, spanCategory);\n\n  const useHTTPActions = moduleName === ModuleName.HTTP;\n\n  const {data: actions} = useSpansQuery<[{'span.action': string}]>({\n    eventView,\n    initialData: [],\n    enabled: !useHTTPActions,\n  });\n\n  const options = useHTTPActions\n    ? HTTP_ACTION_OPTIONS\n    : [\n        {value: '', label: 'All'},\n        ...actions.map(datum => ({\n          value: datum['span.action'],\n          label: datum['span.action'],\n        })),\n      ];\n\n  return (\n    <CompactSelect\n      triggerProps={{\n        prefix: LABEL_FOR_MODULE_NAME[moduleName],\n      }}\n      value={value}\n      options={options ?? []}\n      onChange={newValue => {\n        browserHistory.push({\n          ...location,\n          query: {\n            ...location.query,\n            'span.action': newValue.value,\n          },\n        });\n      }}\n    />\n  );\n}\n\nconst HTTP_ACTION_OPTIONS = [\n  {value: '', label: 'All'},\n  ...['GET', 'POST', 'PUT', 'DELETE'].map(action => ({\n    value: action,\n    label: action,\n  })),\n];\n\nconst LABEL_FOR_MODULE_NAME: {[key in ModuleName]: ReactNode} = {\n  http: t('HTTP Method'),\n  db: t('SQL Command'),\n  none: t('Action'),\n  '': t('Action'),\n};\n\nfunction getEventView(location: Location, moduleName: ModuleName, spanCategory?: string) {\n  const queryConditions: string[] = [];\n  if (moduleName) {\n    queryConditions.push('!span.action:\"\"');\n  }\n\n  if (moduleName === ModuleName.DB) {\n    queryConditions.push('!span.op:db.redis');\n  }\n\n  if (spanCategory) {\n    if (spanCategory === NULL_SPAN_CATEGORY) {\n      queryConditions.push(`!has:span.category`);\n    } else if (spanCategory !== 'Other') {\n      queryConditions.push(`span.category:${spanCategory}`);\n    }\n  }\n  return EventView.fromNewQueryWithLocation(\n    {\n      name: '',\n      fields: ['span.action', 'count()'],\n      orderby: '-count',\n      query: queryConditions.join(' '),\n      dataset: DiscoverDatasets.SPANS_METRICS,\n      version: 2,\n    },\n    location\n  );\n}\n","import {ReactNode} from 'react';\nimport {browserHistory} from 'react-router';\nimport {Location} from 'history';\n\nimport {CompactSelect} from 'sentry/components/compactSelect';\nimport {t} from 'sentry/locale';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {DiscoverDatasets} from 'sentry/utils/discover/types';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport {ModuleName} from 'sentry/views/starfish/types';\nimport {useSpansQuery} from 'sentry/views/starfish/utils/useSpansQuery';\nimport {NULL_SPAN_CATEGORY} from 'sentry/views/starfish/views/webServiceView/spanGroupBreakdownContainer';\n\ntype Props = {\n  moduleName?: ModuleName;\n  spanCategory?: string;\n  value?: string;\n};\n\nexport function DomainSelector({\n  value = '',\n  moduleName = ModuleName.ALL,\n  spanCategory,\n}: Props) {\n  // TODO: This only returns the top 25 domains. It should either load them all, or paginate, or allow searching\n  //\n  const location = useLocation();\n  const eventView = getEventView(location, moduleName, spanCategory);\n\n  const {data: domains} = useSpansQuery<[{'span.domain': string}]>({\n    eventView,\n    initialData: [],\n  });\n\n  const options = [\n    {value: '', label: 'All'},\n    ...domains.map(datum => ({\n      value: datum['span.domain'],\n      label: datum['span.domain'],\n    })),\n  ];\n\n  return (\n    <CompactSelect\n      triggerProps={{\n        prefix: LABEL_FOR_MODULE_NAME[moduleName],\n      }}\n      value={value}\n      options={options ?? []}\n      onChange={newValue => {\n        browserHistory.push({\n          ...location,\n          query: {\n            ...location.query,\n            'span.domain': newValue.value,\n          },\n        });\n      }}\n    />\n  );\n}\n\nconst LABEL_FOR_MODULE_NAME: {[key in ModuleName]: ReactNode} = {\n  http: t('Host'),\n  db: t('Table'),\n  none: t('Domain'),\n  '': t('Domain'),\n};\n\nfunction getEventView(location: Location, moduleName: string, spanCategory?: string) {\n  const queryConditions: string[] = [`!span.domain:\"\"`];\n  if (moduleName) {\n    queryConditions.push(`span.module:${moduleName}`);\n  }\n\n  if (moduleName === ModuleName.DB) {\n    queryConditions.push('!span.op:db.redis');\n  }\n\n  if (spanCategory) {\n    if (spanCategory === NULL_SPAN_CATEGORY) {\n      queryConditions.push(`!has:span.category`);\n    } else if (spanCategory !== 'Other') {\n      queryConditions.push(`span.category:${spanCategory}`);\n    }\n  }\n  return EventView.fromNewQueryWithLocation(\n    {\n      name: '',\n      fields: ['span.domain', 'count()'],\n      orderby: '-count',\n      query: queryConditions.join(' '),\n      dataset: DiscoverDatasets.SPANS_METRICS,\n      version: 2,\n    },\n    location\n  );\n}\n","import {browserHistory} from 'react-router';\nimport {Location} from 'history';\n\nimport {CompactSelect} from 'sentry/components/compactSelect';\nimport {t} from 'sentry/locale';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {DiscoverDatasets} from 'sentry/utils/discover/types';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport {ModuleName} from 'sentry/views/starfish/types';\nimport {useSpansQuery} from 'sentry/views/starfish/utils/useSpansQuery';\nimport {NULL_SPAN_CATEGORY} from 'sentry/views/starfish/views/webServiceView/spanGroupBreakdownContainer';\n\ntype Props = {\n  value: string;\n  moduleName?: ModuleName;\n  spanCategory?: string;\n};\n\nexport function SpanOperationSelector({\n  value = '',\n  moduleName = ModuleName.ALL,\n  spanCategory,\n}: Props) {\n  // TODO: This only returns the top 25 operations. It should either load them all, or paginate, or allow searching\n  //\n  const location = useLocation();\n  const eventView = getEventView(location, moduleName, spanCategory);\n\n  const {data: operations} = useSpansQuery<[{'span.op': string}]>({\n    eventView,\n    initialData: [],\n  });\n\n  const options = [\n    {value: '', label: 'All'},\n    ...operations.map(datum => ({\n      value: datum['span.op'],\n      label: datum['span.op'],\n    })),\n  ];\n\n  return (\n    <CompactSelect\n      triggerProps={{prefix: t('Operation')}}\n      value={value}\n      options={options ?? []}\n      onChange={newValue => {\n        browserHistory.push({\n          ...location,\n          query: {\n            ...location.query,\n            'span.op': newValue.value,\n          },\n        });\n      }}\n    />\n  );\n}\n\nfunction getEventView(location: Location, moduleName: ModuleName, spanCategory?: string) {\n  const queryConditions: string[] = [];\n  if (moduleName) {\n    queryConditions.push(`span.module:${moduleName}`);\n  }\n\n  if (moduleName === ModuleName.DB) {\n    queryConditions.push('!span.op:db.redis');\n  }\n\n  if (spanCategory) {\n    if (spanCategory === NULL_SPAN_CATEGORY) {\n      queryConditions.push(`!has:span.category`);\n    } else if (spanCategory !== 'Other') {\n      queryConditions.push(`span.category:${spanCategory}`);\n    }\n  }\n  return EventView.fromNewQueryWithLocation(\n    {\n      name: '',\n      fields: ['span.op', 'count()'],\n      orderby: '-count',\n      query: queryConditions.join(' '),\n      dataset: DiscoverDatasets.SPANS_METRICS,\n      version: 2,\n    },\n    location\n  );\n}\n","import {unix} from 'moment';\n\nimport {getInterval} from 'sentry/components/charts/utils';\nimport {NewQuery} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {DiscoverDatasets} from 'sentry/utils/discover/types';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport {useSpansQuery} from 'sentry/views/starfish/utils/useSpansQuery';\n\nexport const useErrorRateQuery = (queryString: string) => {\n  const location = useLocation();\n  const pageFilter = usePageFilters();\n\n  const discoverQuery: NewQuery = {\n    id: undefined,\n    name: 'HTTP Module - HTTP error rate',\n    fields: ['http_error_count()'],\n    query: queryString,\n    version: 1,\n    topEvents: '5',\n    dataset: DiscoverDatasets.SPANS_METRICS,\n    interval: getInterval(pageFilter.selection.datetime, 'low'),\n    yAxis: ['http_error_count()'],\n  };\n\n  const eventView = EventView.fromNewQueryWithLocation(discoverQuery, location);\n\n  const result = useSpansQuery<{'http_error_count()': number; interval: number}[]>({\n    eventView,\n    initialData: [],\n  });\n\n  const formattedData = result?.data?.map(entry => {\n    return {\n      interval: unix(entry.interval).format('YYYY-MM-DDTHH:mm:ss'),\n      'http_error_count()': entry['http_error_count()'],\n    };\n  });\n\n  return {...result, formattedData};\n};\n","import styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport {getInterval} from 'sentry/components/charts/utils';\nimport {space} from 'sentry/styles/space';\nimport {PageFilters} from 'sentry/types';\nimport {Series} from 'sentry/types/echarts';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {DiscoverDatasets} from 'sentry/utils/discover/types';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport useRouter from 'sentry/utils/useRouter';\nimport {ERRORS_COLOR, P95_COLOR, THROUGHPUT_COLOR} from 'sentry/views/starfish/colours';\nimport Chart, {useSynchronizeCharts} from 'sentry/views/starfish/components/chart';\nimport ChartPanel from 'sentry/views/starfish/components/chartPanel';\nimport {ModuleName, SpanMetricsFields} from 'sentry/views/starfish/types';\nimport formatThroughput from 'sentry/views/starfish/utils/chartValueFormatters/formatThroughput';\nimport {useSpansQuery} from 'sentry/views/starfish/utils/useSpansQuery';\nimport {useErrorRateQuery as useErrorCountQuery} from 'sentry/views/starfish/views/spans/queries';\nimport {DataTitles} from 'sentry/views/starfish/views/spans/types';\nimport {NULL_SPAN_CATEGORY} from 'sentry/views/starfish/views/webServiceView/spanGroupBreakdownContainer';\n\nconst {SPAN_SELF_TIME} = SpanMetricsFields;\n\ntype Props = {\n  appliedFilters: AppliedFilters;\n  moduleName: ModuleName;\n  spanCategory?: string;\n};\n\ntype AppliedFilters = {\n  'span.action': string;\n  'span.domain': string;\n  'span.group': string;\n  'span.op': string;\n};\n\ntype ChartProps = {\n  filters: AppliedFilters;\n  moduleName: ModuleName;\n};\n\nfunction getSegmentLabel(moduleName: ModuleName) {\n  return moduleName === ModuleName.DB ? 'Queries' : 'Requests';\n}\n\nexport function SpanTimeCharts({moduleName, appliedFilters, spanCategory}: Props) {\n  const {selection} = usePageFilters();\n  const location = useLocation();\n\n  const eventView = getEventView(\n    moduleName,\n    location,\n    selection,\n    appliedFilters,\n    spanCategory\n  );\n\n  const {isLoading} = useSpansQuery({\n    eventView,\n    initialData: [],\n  });\n\n  useSynchronizeCharts([!isLoading]);\n\n  const moduleCharts: Record<\n    ModuleName,\n    {Comp: (props: ChartProps) => JSX.Element; title: string}[]\n  > = {\n    [ModuleName.ALL]: [\n      {title: DataTitles.throughput, Comp: ThroughputChart},\n      {title: DataTitles.p95, Comp: DurationChart},\n    ],\n    [ModuleName.DB]: [],\n    [ModuleName.HTTP]: [{title: DataTitles.errorCount, Comp: ErrorChart}],\n    [ModuleName.NONE]: [],\n  };\n\n  const charts = [...moduleCharts[ModuleName.ALL]];\n  if (moduleName !== ModuleName.ALL) {\n    charts.push(...moduleCharts[moduleName]);\n  }\n\n  return (\n    <ChartsContainer>\n      {charts.map(({title, Comp}) => (\n        <ChartsContainerItem key={title}>\n          <ChartPanel title={title}>\n            <Comp moduleName={moduleName} filters={appliedFilters} />\n          </ChartPanel>\n        </ChartsContainerItem>\n      ))}\n    </ChartsContainer>\n  );\n}\n\nfunction ThroughputChart({moduleName, filters}: ChartProps): JSX.Element {\n  const pageFilters = usePageFilters();\n  const location = useLocation();\n  const eventView = getEventView(moduleName, location, pageFilters.selection, filters);\n\n  const label = getSegmentLabel(moduleName);\n  const {isLoading, data} = useSpansQuery({\n    eventView,\n    initialData: [],\n  });\n  const dataByGroup = {[label]: data};\n\n  const throughputTimeSeries = Object.keys(dataByGroup).map(groupName => {\n    const groupData = dataByGroup[groupName];\n\n    return {\n      seriesName: label ?? 'Throughput',\n      data: groupData.map(datum => ({\n        value: datum['sps()'],\n        name: datum.interval,\n      })),\n    };\n  });\n\n  return (\n    <Chart\n      statsPeriod=\"24h\"\n      height={100}\n      data={throughputTimeSeries}\n      start=\"\"\n      end=\"\"\n      loading={isLoading}\n      utc={false}\n      grid={{\n        left: '0',\n        right: '0',\n        top: '8px',\n        bottom: '0',\n      }}\n      definedAxisTicks={4}\n      aggregateOutputFormat=\"rate\"\n      stacked\n      isLineChart\n      chartColors={[THROUGHPUT_COLOR]}\n      tooltipFormatterOptions={{\n        valueFormatter: value => formatThroughput(value),\n      }}\n      onDataZoom={useSortPageByHandler('-sps()')}\n    />\n  );\n}\n\nfunction DurationChart({moduleName, filters}: ChartProps): JSX.Element {\n  const pageFilters = usePageFilters();\n  const location = useLocation();\n  const eventView = getEventView(moduleName, location, pageFilters.selection, filters);\n\n  const label = `p95(${SPAN_SELF_TIME})`;\n\n  const {isLoading, data} = useSpansQuery({\n    eventView,\n    initialData: [],\n  });\n  const dataByGroup = {[label]: data};\n\n  const p95Series = Object.keys(dataByGroup).map(groupName => {\n    const groupData = dataByGroup[groupName];\n\n    return {\n      seriesName: label,\n      data: groupData.map(datum => ({\n        value: datum[`p95(${SPAN_SELF_TIME})`],\n        name: datum.interval,\n      })),\n    };\n  });\n\n  return (\n    <Chart\n      statsPeriod=\"24h\"\n      height={100}\n      data={[...p95Series]}\n      start=\"\"\n      end=\"\"\n      loading={isLoading}\n      utc={false}\n      grid={{\n        left: '0',\n        right: '0',\n        top: '8px',\n        bottom: '0',\n      }}\n      definedAxisTicks={4}\n      stacked\n      isLineChart\n      chartColors={[P95_COLOR]}\n      onDataZoom={useSortPageByHandler('-p95(span.self_time)')}\n    />\n  );\n}\n\nfunction ErrorChart({moduleName, filters}: ChartProps): JSX.Element {\n  const query = buildDiscoverQueryConditions(moduleName, filters);\n  const {isLoading, data} = useErrorCountQuery(query);\n\n  const errorRateSeries: Series = {\n    seriesName: DataTitles.errorCount,\n    data: data?.length\n      ? data?.map(entry => ({\n          name: entry.interval,\n          value: entry['http_error_count()'],\n        }))\n      : [],\n  };\n\n  return (\n    <Chart\n      statsPeriod=\"24h\"\n      height={100}\n      data={[errorRateSeries]}\n      start=\"\"\n      end=\"\"\n      loading={isLoading}\n      utc={false}\n      grid={{\n        left: '0',\n        right: '0',\n        top: '8px',\n        bottom: '0',\n      }}\n      definedAxisTicks={4}\n      stacked\n      isLineChart\n      chartColors={[ERRORS_COLOR]}\n      onDataZoom={useSortPageByHandler('-http_error_count()')}\n    />\n  );\n}\n\nconst SPAN_FILTER_KEYS = ['span_operation', 'domain', 'action'];\n\nconst getEventView = (\n  moduleName: ModuleName,\n  location: Location,\n  pageFilters: PageFilters,\n  appliedFilters: AppliedFilters,\n  spanCategory?: string\n) => {\n  const query = buildDiscoverQueryConditions(moduleName, appliedFilters, spanCategory);\n\n  return EventView.fromNewQueryWithLocation(\n    {\n      name: '',\n      fields: [''],\n      yAxis: ['sps()', `p50(${SPAN_SELF_TIME})`, `p95(${SPAN_SELF_TIME})`],\n      query,\n      dataset: DiscoverDatasets.SPANS_METRICS,\n      interval: getInterval(pageFilters.datetime, 'low'),\n      version: 2,\n    },\n    location\n  );\n};\n\nconst buildDiscoverQueryConditions = (\n  moduleName: ModuleName,\n  appliedFilters: AppliedFilters,\n  spanCategory?: string\n) => {\n  const result = Object.keys(appliedFilters)\n    .filter(key => SPAN_FILTER_KEYS.includes(key))\n    .filter(key => Boolean(appliedFilters[key]))\n    .map(key => {\n      return `${key}:${appliedFilters[key]}`;\n    });\n\n  if (moduleName !== ModuleName.ALL) {\n    result.push(`span.module:${moduleName}`);\n  }\n\n  if (moduleName === ModuleName.DB) {\n    result.push('!span.op:db.redis');\n  }\n\n  if (spanCategory) {\n    if (spanCategory === NULL_SPAN_CATEGORY) {\n      result.push(`!has:span.category`);\n    } else if (spanCategory !== 'Other') {\n      result.push(`span.category:${spanCategory}`);\n    }\n  }\n\n  return result.join(' ');\n};\n\nfunction useSortPageByHandler(sort: string) {\n  const router = useRouter();\n  const location = useLocation();\n  return (_, chartRef) => {\n    // This is kind of jank but we need to check if the chart is hovered because\n    // onDataZoom is fired for all charts when one chart is zoomed.\n    const hoveredEchartElement = Array.from(document.querySelectorAll(':hover')).find(\n      element => {\n        return element.classList.contains('echarts-for-react');\n      }\n    );\n    const echartElement = document.querySelector(`[_echarts_instance_=\"${chartRef.id}\"]`);\n    if (hoveredEchartElement === echartElement) {\n      router.replace({\n        pathname: location.pathname,\n        query: {...location.query, spansSort: sort},\n      });\n    }\n  };\n}\n\nconst ChartsContainer = styled('div')`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: ${space(2)};\n`;\n\nconst ChartsContainerItem = styled('div')`\n  flex: 1;\n`;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\nimport pick from 'lodash/pick';\n\nimport {space} from 'sentry/styles/space';\nimport {fromSorts} from 'sentry/utils/discover/eventView';\nimport type {Sort} from 'sentry/utils/discover/fields';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport StarfishDatePicker from 'sentry/views/starfish/components/datePicker';\nimport {ModuleName} from 'sentry/views/starfish/types';\nimport {QueryParameterNames} from 'sentry/views/starfish/views/queryParameters';\nimport {ActionSelector} from 'sentry/views/starfish/views/spans/selectors/actionSelector';\nimport {DomainSelector} from 'sentry/views/starfish/views/spans/selectors/domainSelector';\nimport {SpanOperationSelector} from 'sentry/views/starfish/views/spans/selectors/spanOperationSelector';\nimport {SpanTimeCharts} from 'sentry/views/starfish/views/spans/spanTimeCharts';\n\nimport SpansTable, {isAValidSort} from './spansTable';\n\nconst DEFAULT_SORT: Sort = {\n  kind: 'desc',\n  field: 'time_spent_percentage()',\n};\nconst LIMIT: number = 25;\n\ntype Props = {\n  moduleName?: ModuleName;\n  spanCategory?: string;\n};\n\ntype Query = {\n  'span.action': string;\n  'span.domain': string;\n  'span.group': string;\n  'span.op': string;\n  [QueryParameterNames.SORT]: string;\n};\n\nexport default function SpansView(props: Props) {\n  const location = useLocation<Query>();\n  const appliedFilters = pick(location.query, [\n    'span.action',\n    'span.domain',\n    'span.op',\n    'span.group',\n  ]);\n\n  const sort =\n    fromSorts(location.query[QueryParameterNames.SORT]).filter(isAValidSort)[0] ??\n    DEFAULT_SORT; // We only allow one sort on this table in this view\n\n  return (\n    <Fragment>\n      <FilterOptionsContainer>\n        <StarfishDatePicker />\n      </FilterOptionsContainer>\n\n      <PaddedContainer>\n        <SpanTimeCharts\n          moduleName={props.moduleName || ModuleName.ALL}\n          appliedFilters={appliedFilters}\n          spanCategory={props.spanCategory}\n        />\n      </PaddedContainer>\n      <FilterOptionsContainer>\n        <SpanOperationSelector\n          moduleName={props.moduleName}\n          value={appliedFilters['span.op'] || ''}\n          spanCategory={props.spanCategory}\n        />\n\n        <ActionSelector\n          moduleName={props.moduleName}\n          value={appliedFilters['span.action'] || ''}\n          spanCategory={props.spanCategory}\n        />\n\n        <DomainSelector\n          moduleName={props.moduleName}\n          value={appliedFilters['span.domain'] || ''}\n          spanCategory={props.spanCategory}\n        />\n      </FilterOptionsContainer>\n\n      <PaddedContainer>\n        <SpansTable\n          moduleName={props.moduleName || ModuleName.ALL}\n          spanCategory={props.spanCategory}\n          sort={sort}\n          limit={LIMIT}\n        />\n      </PaddedContainer>\n    </Fragment>\n  );\n}\n\nconst PaddedContainer = styled('div')`\n  margin: 0 ${space(2)};\n`;\n\nconst FilterOptionsContainer = styled(PaddedContainer)`\n  display: flex;\n  flex-direction: row;\n  gap: ${space(1)};\n  margin-bottom: ${space(2)};\n`;\n"],"names":["pageErrorContext","createContext","pageError","undefined","setPageError","_","PageErrorProvider","_ref","children","useState","_jsx","Provider","value","PageErrorAlert","useContext","Alert","type","showIcon","displayName","usePageError","ChartPanel","title","button","Panel","_jsxs","PanelBody","withPadding","Header","ChartLabel","_styled","target","p","theme","text","cardTitle","space","ActionSelector","moduleName","ModuleName","ALL","spanCategory","location","useLocation","eventView","queryConditions","push","DB","NULL_SPAN_CATEGORY","EventView","fromNewQueryWithLocation","name","fields","orderby","query","join","dataset","DiscoverDatasets","SPANS_METRICS","version","getEventView","useHTTPActions","HTTP","data","actions","useSpansQuery","initialData","enabled","options","HTTP_ACTION_OPTIONS","label","map","datum","CompactSelect","triggerProps","prefix","LABEL_FOR_MODULE_NAME","onChange","newValue","browserHistory","action","http","t","db","none","DomainSelector","domains","SpanOperationSelector","operations","useErrorRateQuery","queryString","pageFilter","usePageFilters","discoverQuery","id","topEvents","interval","getInterval","selection","datetime","yAxis","result","formattedData","entry","unix","format","SPAN_SELF_TIME","SpanMetricsFields","SpanTimeCharts","appliedFilters","isLoading","useSynchronizeCharts","moduleCharts","DataTitles","throughput","Comp","ThroughputChart","p95","DurationChart","errorCount","ErrorChart","NONE","charts","ChartsContainer","_ref2","ChartsContainerItem","filters","_ref3","pageFilters","getSegmentLabel","dataByGroup","throughputTimeSeries","Object","keys","groupName","seriesName","Chart","statsPeriod","height","start","end","loading","utc","grid","left","right","top","bottom","definedAxisTicks","aggregateOutputFormat","stacked","isLineChart","chartColors","THROUGHPUT_COLOR","tooltipFormatterOptions","valueFormatter","formatThroughput","onDataZoom","useSortPageByHandler","_ref4","p95Series","P95_COLOR","_ref5","buildDiscoverQueryConditions","useErrorCountQuery","errorRateSeries","length","ERRORS_COLOR","SPAN_FILTER_KEYS","filter","key","includes","Boolean","sort","router","useRouter","chartRef","Array","from","document","querySelectorAll","find","element","classList","contains","querySelector","replace","pathname","spansSort","styles","DEFAULT_SORT","kind","field","LIMIT","SpansView","props","pick","fromSorts","QueryParameterNames","SORT","isAValidSort","Fragment","FilterOptionsContainer","StarfishDatePicker","PaddedContainer","SpansTable","limit"],"sourceRoot":""}