{"version":3,"file":"chunks/app_views_settings_project_projectServiceHooks_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"8ZAmBA,SAASA,EAAMC,GAYL,IAZM,aACdC,EAAY,KACZC,EAAO,KAAI,SACXC,EAAQ,iBACRC,EAAgB,UAChBC,EAAS,WACTC,EAAU,OACVC,EAAM,GACNC,EAAE,KACFC,EAAI,UACJC,KACGC,GACGX,EACN,OACEY,EAAAA,EAAAA,IAACC,EAAY,CACXC,IAAKb,EACLO,GAAIA,EACJC,KAAMA,EACNM,KAAK,SACLL,UAAWA,EACXM,QAASV,OAAaW,EAAYV,EAClCW,KAAK,WACL,eAAcf,EACdE,UAAWA,EACXc,SAAUb,EACVH,SAAUA,EACVD,KAAMA,EACN,eAAa,YACTS,EAAKS,UAETR,EAAAA,EAAAA,IAACS,EAAM,CACLf,WAAYA,EACZH,SAAUA,EACVC,iBAAkBA,EAClBF,KAAMA,KAId,CAtCSH,EAAMuB,YAAA,SA0Cf,MAAMC,EAAWC,GAA8B,OAAXA,EAAEtB,KAAgB,GAAK,GACrDuB,EAAiBD,GAAkBD,EAAQC,IAAiB,OAAXA,EAAEtB,KAAgB,EAAI,GACvEwB,EAAgBF,GAA8B,OAAXA,EAAEtB,KAAgB,EAAI,EACzDyB,EAAiBH,GACrBA,EAAErB,SAAWuB,EAAaF,GAAkB,KAAbD,EAAQC,GAAaE,EAAaF,GAE7DX,GAAee,EAAAA,EAAAA,GAAO,SAAQ,CAAAC,OAAA,aAAfD,CAAgB,oEAIfJ,GAAKA,EAAEM,MAAMC,QAAM,wCAEnBP,GAAKA,EAAEM,MAAME,kBAAgB,WACvCT,EAAO,aACRC,GAAkB,MAAbD,EAAQC,IAAU,oBACfD,EAAO,gIAUNC,GAAKA,EAAEM,MAAMG,aAAW,gBAC1BT,GAAKA,EAAEM,MAAMG,aAAW,gBAIpCZ,GAASO,EAAAA,EAAAA,GAAO,OAAM,CAAAC,OAAA,aAAbD,CAAc,mFAKpBF,EAAY,2BACKC,EAAa,aAC5BF,EAAa,aACZA,EAAa,kBACTD,GACZA,EAAErB,UAAYqB,EAAEpB,iBAAmBoB,EAAEM,MAAMI,OAASV,EAAEM,MAAMC,QAAM,aACzDP,GAAMA,EAAElB,WAAa,GAAM,MAAK,KAG7C,GAAe6B,EAAAA,EAAAA,aAAqC,CAACxB,EAAOG,KAC1DF,EAAAA,EAAAA,IAACb,EAAM,IAAKY,EAAOV,aAAca,K,wPCpGpB,MAAMsB,UAGXC,EAAAA,EACRC,WACE,MAAO,EACT,CAEAC,SACE,OACE3B,EAAAA,EAAAA,IAAC4B,EAAAA,EAAmB,CAACC,MAAOC,KAAKJ,WAAWlB,SACzCsB,KAAKC,mBAGZ,EAdmBP,EAASd,YAAA,W,kzBCuB9B,SAASsB,EAAc5C,GAAqD,IAApD,MAAC6C,EAAK,UAAEC,EAAS,KAAEC,EAAI,eAAEC,GAAyBhD,EACxE,OACEY,EAAAA,EAAAA,IAACqC,EAAAA,EAAU,CACTC,OACEtC,EAAAA,EAAAA,IAACuC,EAAAA,EAAI,CACH,eAAa,uBACbC,GAAK,aAAYP,cAAkBC,WAAmBC,EAAKvC,MAAMY,UAEjER,EAAAA,EAAAA,IAACyC,EAAAA,EAAQ,CAACC,MAAOP,EAAKQ,QAG1BC,MACE5C,EAAAA,EAAAA,IAAA,SAAAQ,SACG2B,EAAKU,QAAiC,IAAvBV,EAAKU,OAAOC,OAC1BX,EAAKU,OAAOE,KAAK,OAEjB/C,EAAAA,EAAAA,IAAA,MAAAQ,UAAKwC,EAAAA,EAAAA,GAAE,4BAGZxC,UAEDR,EAAAA,EAAAA,IAACb,EAAAA,EAAM,CAACI,SAA0B,WAAhB4C,EAAKc,OAAqB3D,KAAK,KAAKK,OAAQyC,KAGpE,CAxBSJ,EAActB,YAAA,iBAkCvB,MAAMwC,UAA4B1B,EAAAA,EAAwB2B,cAAA,SAAAC,YAAAC,EAAAA,EAAAA,GAAA,uBAOtClB,IAChB,MAAM,aAACmB,EAAY,OAAEC,GAAUzB,KAAK/B,OAC9B,SAACyD,GAAY1B,KAAK2B,MACnBD,KAILE,EAAAA,EAAAA,KAAkBV,EAAAA,EAAAA,GAAE,oBAEpBlB,KAAK6B,IAAIC,QACN,aAAYN,EAAaO,QAAQN,EAAOrB,mBAAmBC,EAAKvC,MACjE,CACEkE,OAAQ,MACRC,KAAM,CACJxE,SAA0B,WAAhB4C,EAAKc,QAEjBe,QAASD,KACPE,EAAAA,EAAAA,MACAnC,KAAKoC,SAAS,CACZV,SAAUA,EAASW,KAAIC,GACjBA,EAAExE,KAAOmE,EAAKnE,GACT,IACFwE,KACAL,GAGAK,KAET,EAEJC,MAAOA,MACLC,EAAAA,EAAAA,KAAgBtB,EAAAA,EAAAA,GAAE,mDAAmD,IAG1E,GACF,CAzCDuB,eACE,MAAM,aAACjB,EAAY,OAAEC,GAAUzB,KAAK/B,MAC9BmC,EAAYqB,EAAOrB,UACzB,MAAO,CAAC,CAAC,WAAa,aAAYoB,EAAaO,QAAQ3B,YACzD,CAuCAsC,cACE,OACExE,EAAAA,EAAAA,IAACyE,EAAAA,EAAY,CAAAjE,UACVwC,EAAAA,EAAAA,GAAE,6DAGT,CAEA0B,gBACE,MAAM,aAACpB,EAAY,OAAEC,GAAUzB,KAAK/B,MAEpC,OACE4E,EAAAA,EAAAA,IAACC,EAAAA,SAAQ,CAAApE,SAAA,EACPR,EAAAA,EAAAA,IAAC6E,EAAAA,GAAW,CAAArE,UAAewC,EAAAA,EAAAA,GAAE,iBAAZ,WACjB2B,EAAAA,EAAAA,IAACG,EAAAA,EAAS,CAAAtE,SAAA,EACRR,EAAAA,EAAAA,IAAC+E,EAAAA,GAAU,CAAC5E,KAAK,OAAO6E,UAAQ,EAAAxE,UAC7BwC,EAAAA,EAAAA,GACC,uFAGHlB,KAAK2B,MAAMD,UAAUW,KAAIhC,IACxBnC,EAAAA,EAAAA,IAACgC,EAAc,CAEbC,MAAOqB,EAAaO,KACpB3B,UAAWqB,EAAOrB,UAClBC,KAAMA,EACNC,eAAgBN,KAAKM,eAAe6C,KAAKnD,KAAMK,IAJ1CA,EAAKvC,QARD,UAkBrB,CAEAsF,aACE,MAAM,SAAC1B,GAAY1B,KAAK2B,MAClB0B,EACJ3B,GAAYA,EAASV,OAAS,EAAIhB,KAAK4C,gBAAkB5C,KAAK0C,eAE1D,aAAClB,EAAY,OAAEC,GAAUzB,KAAK/B,MAEpC,OACE4E,EAAAA,EAAAA,IAACC,EAAAA,SAAQ,CAAApE,SAAA,EACPR,EAAAA,EAAAA,IAACoF,EAAAA,EAAkB,CACjBvD,OAAOmB,EAAAA,EAAAA,GAAE,iBACTqC,OACE/B,EAAagC,OAAOC,SAAS,kBAC3BvF,EAAAA,EAAAA,IAACwF,EAAAA,GAAM,CACL,eAAa,mBACbhD,GAAK,aAAYc,EAAaO,iBAAiBN,EAAOrB,uBACtD5C,KAAK,KACLmG,SAAS,UACTC,MAAM1F,EAAAA,EAAAA,IAAC2F,EAAAA,GAAO,CAACrG,KAAK,KAAKsG,WAAS,IAAIpF,UAErCwC,EAAAA,EAAAA,GAAE,qBAEH,QAGRhD,EAAAA,EAAAA,IAAC6F,EAAAA,GAAK,CAAArF,SAAE2E,MAGd,EAEF,SAAeW,EAAAA,EAAAA,GAAiB5C,E","sources":["webpack:///./app/components/switchButton.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/project/projectServiceHooks.tsx"],"sourcesContent":["import {forwardRef} from 'react';\nimport styled from '@emotion/styled';\n\ntype Props = {\n  toggle: React.MouseEventHandler<HTMLButtonElement>;\n  className?: string;\n  /**\n   * Toggle color is always active.\n   */\n  forceActiveColor?: boolean;\n  forwardedRef?: React.Ref<HTMLButtonElement>;\n  id?: string;\n  isActive?: boolean;\n  isDisabled?: boolean;\n  isLoading?: boolean;\n  name?: string;\n  size?: 'sm' | 'lg';\n};\n\nfunction Switch({\n  forwardedRef,\n  size = 'sm',\n  isActive,\n  forceActiveColor,\n  isLoading,\n  isDisabled,\n  toggle,\n  id,\n  name,\n  className,\n  ...props\n}: Props) {\n  return (\n    <SwitchButton\n      ref={forwardedRef}\n      id={id}\n      name={name}\n      type=\"button\"\n      className={className}\n      onClick={isDisabled ? undefined : toggle}\n      role=\"checkbox\"\n      aria-checked={isActive}\n      isLoading={isLoading}\n      disabled={isDisabled}\n      isActive={isActive}\n      size={size}\n      data-test-id=\"switch\"\n      {...props}\n    >\n      <Toggle\n        isDisabled={isDisabled}\n        isActive={isActive}\n        forceActiveColor={forceActiveColor}\n        size={size}\n      />\n    </SwitchButton>\n  );\n}\n\ntype StyleProps = Partial<Props>;\n\nconst getSize = (p: StyleProps) => (p.size === 'sm' ? 16 : 24);\nconst getToggleSize = (p: StyleProps) => getSize(p) - (p.size === 'sm' ? 4 : 8);\nconst getToggleTop = (p: StyleProps) => (p.size === 'sm' ? 1 : 3);\nconst getTranslateX = (p: StyleProps) =>\n  p.isActive ? getToggleTop(p) + getSize(p) * 0.875 : getToggleTop(p);\n\nconst SwitchButton = styled('button')<StyleProps>`\n  display: inline-block;\n  background: none;\n  padding: 0;\n  border: 1px solid ${p => p.theme.border};\n  position: relative;\n  box-shadow: inset ${p => p.theme.dropShadowMedium};\n  height: ${getSize}px;\n  width: ${p => getSize(p) * 1.875}px;\n  border-radius: ${getSize}px;\n  transition: border 0.1s, box-shadow 0.1s;\n\n  &[disabled] {\n    cursor: not-allowed;\n  }\n\n  &:focus,\n  &.focus-visible {\n    outline: none;\n    border-color: ${p => p.theme.focusBorder};\n    box-shadow: ${p => p.theme.focusBorder} 0 0 0 1px;\n  }\n`;\n\nconst Toggle = styled('span')<StyleProps>`\n  display: block;\n  position: absolute;\n  border-radius: 50%;\n  transition: 0.25s all ease;\n  top: ${getToggleTop}px;\n  transform: translateX(${getTranslateX}px);\n  width: ${getToggleSize}px;\n  height: ${getToggleSize}px;\n  background: ${p =>\n    p.isActive || p.forceActiveColor ? p.theme.active : p.theme.border};\n  opacity: ${p => (p.isDisabled ? 0.4 : null)};\n`;\n\nexport default forwardRef<HTMLButtonElement, Props>((props, ref) => (\n  <Switch {...props} forwardedRef={ref} />\n));\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\nexport type AsyncViewState = AsyncComponent['state'];\nexport type AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  clearIndicators,\n} from 'sentry/actionCreators/indicator';\nimport {Button} from 'sentry/components/button';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport FieldGroup from 'sentry/components/forms/fieldGroup';\nimport Link from 'sentry/components/links/link';\nimport {Panel, PanelAlert, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport Switch from 'sentry/components/switchButton';\nimport Truncate from 'sentry/components/truncate';\nimport {IconAdd} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {Organization, ServiceHook} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\n\ntype RowProps = {\n  hook: ServiceHook;\n  onToggleActive: () => void;\n  orgId: string;\n  projectId: string;\n};\n\nfunction ServiceHookRow({orgId, projectId, hook, onToggleActive}: RowProps) {\n  return (\n    <FieldGroup\n      label={\n        <Link\n          data-test-id=\"project-service-hook\"\n          to={`/settings/${orgId}/projects/${projectId}/hooks/${hook.id}/`}\n        >\n          <Truncate value={hook.url} />\n        </Link>\n      }\n      help={\n        <small>\n          {hook.events && hook.events.length !== 0 ? (\n            hook.events.join(', ')\n          ) : (\n            <em>{t('no events configured')}</em>\n          )}\n        </small>\n      }\n    >\n      <Switch isActive={hook.status === 'active'} size=\"lg\" toggle={onToggleActive} />\n    </FieldGroup>\n  );\n}\n\ntype Props = RouteComponentProps<{projectId: string}, {}> & {\n  organization: Organization;\n};\n\ntype State = {\n  hookList: null | ServiceHook[];\n} & AsyncView['state'];\n\nclass ProjectServiceHooks extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {organization, params} = this.props;\n    const projectId = params.projectId;\n    return [['hookList', `/projects/${organization.slug}/${projectId}/hooks/`]];\n  }\n\n  onToggleActive = (hook: ServiceHook) => {\n    const {organization, params} = this.props;\n    const {hookList} = this.state;\n    if (!hookList) {\n      return;\n    }\n\n    addLoadingMessage(t('Saving changes\\u2026'));\n\n    this.api.request(\n      `/projects/${organization.slug}/${params.projectId}/hooks/${hook.id}/`,\n      {\n        method: 'PUT',\n        data: {\n          isActive: hook.status !== 'active',\n        },\n        success: data => {\n          clearIndicators();\n          this.setState({\n            hookList: hookList.map(h => {\n              if (h.id === data.id) {\n                return {\n                  ...h,\n                  ...data,\n                };\n              }\n              return h;\n            }),\n          });\n        },\n        error: () => {\n          addErrorMessage(t('Unable to remove application. Please try again.'));\n        },\n      }\n    );\n  };\n\n  renderEmpty() {\n    return (\n      <EmptyMessage>\n        {t('There are no service hooks associated with this project.')}\n      </EmptyMessage>\n    );\n  }\n\n  renderResults() {\n    const {organization, params} = this.props;\n\n    return (\n      <Fragment>\n        <PanelHeader key=\"header\">{t('Service Hook')}</PanelHeader>\n        <PanelBody key=\"body\">\n          <PanelAlert type=\"info\" showIcon>\n            {t(\n              'Service Hooks are an early adopter preview feature and will change in the future.'\n            )}\n          </PanelAlert>\n          {this.state.hookList?.map(hook => (\n            <ServiceHookRow\n              key={hook.id}\n              orgId={organization.slug}\n              projectId={params.projectId}\n              hook={hook}\n              onToggleActive={this.onToggleActive.bind(this, hook)}\n            />\n          ))}\n        </PanelBody>\n      </Fragment>\n    );\n  }\n\n  renderBody() {\n    const {hookList} = this.state;\n    const body =\n      hookList && hookList.length > 0 ? this.renderResults() : this.renderEmpty();\n\n    const {organization, params} = this.props;\n\n    return (\n      <Fragment>\n        <SettingsPageHeader\n          title={t('Service Hooks')}\n          action={\n            organization.access.includes('project:write') ? (\n              <Button\n                data-test-id=\"new-service-hook\"\n                to={`/settings/${organization.slug}/projects/${params.projectId}/hooks/new/`}\n                size=\"sm\"\n                priority=\"primary\"\n                icon={<IconAdd size=\"xs\" isCircled />}\n              >\n                {t('Create New Hook')}\n              </Button>\n            ) : null\n          }\n        />\n        <Panel>{body}</Panel>\n      </Fragment>\n    );\n  }\n}\nexport default withOrganization(ProjectServiceHooks);\n"],"names":["Switch","_ref","forwardedRef","size","isActive","forceActiveColor","isLoading","isDisabled","toggle","id","name","className","props","_jsx","SwitchButton","ref","type","onClick","undefined","role","disabled","children","Toggle","displayName","getSize","p","getToggleSize","getToggleTop","getTranslateX","_styled","target","theme","border","dropShadowMedium","focusBorder","active","forwardRef","AsyncView","AsyncComponent","getTitle","render","SentryDocumentTitle","title","this","renderComponent","ServiceHookRow","orgId","projectId","hook","onToggleActive","FieldGroup","label","Link","to","Truncate","value","url","help","events","length","join","t","status","ProjectServiceHooks","constructor","arguments","_defineProperty","organization","params","hookList","state","addLoadingMessage","api","request","slug","method","data","success","clearIndicators","setState","map","h","error","addErrorMessage","getEndpoints","renderEmpty","EmptyMessage","renderResults","_jsxs","Fragment","PanelHeader","PanelBody","PanelAlert","showIcon","bind","renderBody","body","SettingsPageHeader","action","access","includes","Button","priority","icon","IconAdd","isCircled","Panel","withOrganization"],"sourceRoot":""}