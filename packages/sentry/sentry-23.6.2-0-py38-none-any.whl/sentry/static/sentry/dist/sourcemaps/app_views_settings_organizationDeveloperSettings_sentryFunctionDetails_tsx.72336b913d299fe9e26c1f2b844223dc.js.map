{"version":3,"file":"chunks/app_views_settings_organizationDeveloperSettings_sentryFunctionDetails_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/forms/formPanel.tsx","webpack:///./app/components/forms/jsonForm.tsx","webpack:///./app/views/settings/organizationDeveloperSettings/sentryFunctionsEnvironmentVariables.tsx","webpack:///./app/views/settings/organizationDeveloperSettings/sentryFunctionSubscriptions.tsx","webpack:///./app/views/settings/organizationDeveloperSettings/sentryFunctionDetails.tsx"],"sourcesContent":["import {useCallback, useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport FieldFromConfig from 'sentry/components/forms/fieldFromConfig';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {IconChevron} from 'sentry/icons';\nimport {Scope} from 'sentry/types';\nimport {sanitizeQuerySelector} from 'sentry/utils/sanitizeQuerySelector';\n\nimport {FieldObject, JsonFormObject} from './types';\n\ntype Props = {\n  /**\n   * List of fields to render\n   */\n  fields: FieldObject[];\n  access?: Set<Scope>;\n  additionalFieldProps?: {[key: string]: any};\n  /**\n   * Can the PanelBody be hidden with a click?\n   */\n  collapsible?: boolean;\n  /**\n   * Disables the entire form\n   */\n  disabled?: boolean;\n  features?: Record<string, any>;\n  /**\n   * The name of the field that should be highlighted\n   */\n  highlighted?: string;\n  initiallyCollapsed?: boolean;\n  /**\n   * Renders inside of PanelBody before PanelBody close\n   */\n  renderFooter?: (arg: JsonFormObject) => React.ReactNode;\n  /**\n   * Renders inside of PanelBody at the start\n   */\n  renderHeader?: (arg: JsonFormObject) => React.ReactNode;\n  /**\n   * Panel title\n   */\n  title?: React.ReactNode;\n};\n\nfunction FormPanel({\n  additionalFieldProps = {},\n  title,\n  fields,\n  access,\n  disabled,\n  renderFooter,\n  renderHeader,\n  collapsible,\n  initiallyCollapsed = false,\n  ...otherProps\n}: Props) {\n  const [collapsed, setCollapse] = useState(initiallyCollapsed);\n  const handleCollapseToggle = useCallback(() => setCollapse(current => !current), []);\n\n  return (\n    <Panel id={typeof title === 'string' ? sanitizeQuerySelector(title) : undefined}>\n      {title && (\n        <PanelHeader>\n          {title}\n          {collapsible && (\n            <Collapse onClick={handleCollapseToggle}>\n              <IconChevron\n                data-test-id=\"form-panel-collapse-chevron\"\n                direction={collapsed ? 'down' : 'up'}\n                size=\"xs\"\n              />\n            </Collapse>\n          )}\n        </PanelHeader>\n      )}\n      <PanelBody hidden={collapsed}>\n        {typeof renderHeader === 'function' && renderHeader({title, fields})}\n\n        {fields.map(field => {\n          if (typeof field === 'function') {\n            return field();\n          }\n\n          const {defaultValue: _, ...fieldWithoutDefaultValue} = field;\n\n          // Allow the form panel disabled prop to override the fields\n          // disabled prop, with fallback to the fields disabled state.\n          if (disabled === true) {\n            fieldWithoutDefaultValue.disabled = true;\n            fieldWithoutDefaultValue.disabledReason = undefined;\n          }\n\n          return (\n            <FieldFromConfig\n              access={access}\n              disabled={disabled}\n              key={field.name}\n              {...otherProps}\n              {...additionalFieldProps}\n              field={fieldWithoutDefaultValue}\n              highlighted={otherProps.highlighted === `#${field.name}`}\n            />\n          );\n        })}\n        {typeof renderFooter === 'function' && renderFooter({title, fields})}\n      </PanelBody>\n    </Panel>\n  );\n}\n\nexport default FormPanel;\n\nconst Collapse = styled('span')`\n  cursor: pointer;\n`;\n","import {Component, Fragment} from 'react';\nimport {WithRouterProps} from 'react-router';\nimport * as Sentry from '@sentry/react';\nimport scrollToElement from 'scroll-to-element';\n\nimport {defined} from 'sentry/utils';\nimport {sanitizeQuerySelector} from 'sentry/utils/sanitizeQuerySelector';\n// eslint-disable-next-line no-restricted-imports\nimport withSentryRouter from 'sentry/utils/withSentryRouter';\n\nimport FormPanel from './formPanel';\nimport {Field, FieldObject, JsonFormObject} from './types';\n\ntype Props = {\n  additionalFieldProps?: {[key: string]: any};\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n} & WithRouterProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends Component<Props, State> {\n  state: State = {\n    // location.hash is optional because of tests.\n    highlighted: this.props.location?.hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.location && this.props.location.hash !== prevProps.location.hash) {\n      const hash = this.props.location.hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    // location.hash is optional because of tests.\n    const hash = toHash || this.props.location?.hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      collapsible,\n      initiallyCollapsed,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      params: _params,\n      router: _router,\n      routes: _routes,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n      collapsible,\n      initiallyCollapsed,\n    };\n\n    return (\n      <div {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <Fragment key={i}>{this.renderForm({formPanelProps, ...formGroup})}</Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </div>\n    );\n  }\n}\n\nexport default withSentryRouter(JsonForm);\n","import styled from '@emotion/styled';\n\nimport {Button} from 'sentry/components/button';\nimport TextField from 'sentry/components/forms/fields/textField';\nimport {PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {IconAdd, IconDelete} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\n\ntype Props = {\n  envVariables: {\n    name: string;\n    value: string;\n  }[];\n  setEnvVariables: (envVariables) => void;\n};\n\nfunction SentryFunctionEnvironmentVariables(props: Props) {\n  const {envVariables, setEnvVariables} = props;\n\n  const addEnvVar = () => {\n    setEnvVariables([...envVariables, {name: '', value: ''}]);\n  };\n\n  const handleNameChange = (value: string, pos: number) => {\n    const newEnvVariables = [...envVariables];\n    while (newEnvVariables.length <= pos) {\n      newEnvVariables.push({name: '', value: ''});\n    }\n    newEnvVariables[pos] = {...newEnvVariables[pos], name: value};\n    setEnvVariables(newEnvVariables);\n  };\n\n  const handleValueChange = (value: string, pos: number) => {\n    const newEnvVariables = [...envVariables];\n    while (newEnvVariables.length <= pos) {\n      newEnvVariables.push({name: '', value: ''});\n    }\n    newEnvVariables[pos] = {...newEnvVariables[pos], value};\n    setEnvVariables(newEnvVariables);\n  };\n\n  const removeEnvVar = (pos: number) => {\n    const newEnvVariables = [...envVariables];\n    newEnvVariables.splice(pos, 1);\n    setEnvVariables(newEnvVariables);\n  };\n\n  return (\n    <div>\n      <PanelHeader>\n        {t('Environment Variables')}\n        <StyledAddButton\n          size=\"sm\"\n          icon={<IconAdd isCircled />}\n          aria-label={t('Add Environment Variable')}\n          onClick={addEnvVar}\n        />\n      </PanelHeader>\n      <StyledPanelBody>\n        <EnvironmentVariableWrapper>\n          <EnvHeader>{t('Name')}</EnvHeader>\n          <EnvHeaderRight>{t('Value')}</EnvHeaderRight>\n        </EnvironmentVariableWrapper>\n        {envVariables.map((envVariable, i) => {\n          return (\n            <EnvironmentVariableWrapper key={i}>\n              <TextField\n                name={`env-variable-name-${i}`}\n                required={false}\n                inline={false}\n                defaultValue={envVariable.name}\n                value={envVariable.name}\n                stacked\n                onChange={e => handleNameChange(e, i)}\n              />\n              <TextField\n                name={`env-variable-value-${i}`}\n                required={false}\n                inline={false}\n                defaultValue={envVariable.value}\n                value={envVariable.value}\n                stacked\n                onChange={e => handleValueChange(e, i)}\n              />\n              <ButtonHolder>\n                <StyledAddButton\n                  size=\"sm\"\n                  icon={<IconDelete />}\n                  aria-label={t('Remove Environment Variable %s', i)}\n                  onClick={() => removeEnvVar(i)}\n                />\n              </ButtonHolder>\n            </EnvironmentVariableWrapper>\n          );\n        })}\n      </StyledPanelBody>\n    </div>\n  );\n}\n\nexport default SentryFunctionEnvironmentVariables;\n\nconst EnvironmentVariableWrapper = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr 1.5fr min-content;\n`;\n\nconst StyledAddButton = styled(Button)`\n  float: right;\n`;\n\nconst EnvHeader = styled('div')`\n  text-align: left;\n  margin-top: ${space(2)};\n  margin-bottom: ${space(1)};\n  color: ${p => p.theme.gray400};\n`;\n\nconst EnvHeaderRight = styled(EnvHeader)`\n  margin-left: -${space(2)};\n`;\n\nconst ButtonHolder = styled('div')`\n  align-items: center;\n  display: flex;\n  margin-bottom: ${space(2)};\n`;\n\nconst StyledPanelBody = styled(PanelBody)`\n  padding: ${space(2)};\n`;\n","import styled from '@emotion/styled';\n\nimport {EVENT_CHOICES} from './constants';\nimport SubscriptionBox from './subscriptionBox';\n\ntype Resource = (typeof EVENT_CHOICES)[number];\n\ntype Props = {\n  events: string[];\n  setEvents: (events: string[]) => void;\n};\n\nfunction SentryFunctionSubscriptions(props: Props) {\n  const {events, setEvents} = props;\n\n  function onChange(resource: Resource, checked: boolean) {\n    if (checked && !events.includes(resource)) {\n      setEvents(events.concat(resource));\n    } else if (!checked && events.includes(resource)) {\n      setEvents(events.filter(e => e !== resource));\n    }\n  }\n\n  return (\n    <SentryFunctionsSubscriptionGrid>\n      {EVENT_CHOICES.map(resource => (\n        <SubscriptionBox\n          key={resource}\n          disabledFromPermissions={false}\n          webhookDisabled={false}\n          checked={props.events.includes(resource)}\n          resource={resource}\n          onChange={onChange}\n          isNew={resource === 'comment'}\n        />\n      ))}\n    </SentryFunctionsSubscriptionGrid>\n  );\n}\n\nexport default SentryFunctionSubscriptions;\nconst SentryFunctionsSubscriptionGrid = styled('div')`\n  display: grid;\n  grid-template: auto / 1fr 1fr 1fr;\n  @media (max-width: ${props => props.theme.breakpoints.large}) {\n    grid-template: 1fr 1fr 1fr / auto;\n  }\n`;\n","import {useEffect, useState} from 'react';\nimport {browserHistory} from 'react-router';\nimport Editor from '@monaco-editor/react';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport Feature from 'sentry/components/acl/feature';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport FormModel from 'sentry/components/forms/model';\nimport {Field} from 'sentry/components/forms/types';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport {Organization, SentryFunction} from 'sentry/types';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nimport SentryFunctionEnvironmentVariables from './sentryFunctionsEnvironmentVariables';\nimport SentryFunctionSubscriptions from './sentryFunctionSubscriptions';\n\nfunction transformData(data: Record<string, any>) {\n  const events: string[] = [];\n  if (data.onIssue) {\n    events.push('issue');\n  }\n  if (data.onError) {\n    events.push('error');\n  }\n  if (data.onComment) {\n    events.push('comment');\n  }\n  delete data.onIssue;\n  delete data.onError;\n  delete data.onComment;\n  data.events = events;\n\n  const envVariables: EnvVariable[] = [];\n  let i = 0;\n  while (data[`env-variable-name-${i}`]) {\n    if (data[`env-variable-value-${i}`]) {\n      envVariables.push({\n        name: data[`env-variable-name-${i}`],\n        value: data[`env-variable-value-${i}`],\n      });\n    }\n    delete data[`env-variable-name-${i}`];\n    delete data[`env-variable-value-${i}`];\n    i++;\n  }\n  data.envVariables = envVariables;\n\n  const {...output} = data;\n  return output;\n}\n\ntype Props = {\n  sentryFunction?: SentryFunction;\n} & WrapperProps;\n\ntype EnvVariable = {\n  name: string;\n  value: string;\n};\nconst formFields: Field[] = [\n  {\n    name: 'name',\n    type: 'string',\n    required: true,\n    placeholder: 'e.g. My Sentry Function',\n    label: 'Name',\n    help: 'Human readable name of your Sentry Function',\n  },\n  {\n    name: 'author',\n    type: 'string',\n    placeholder: 'e.g. Acme Software',\n    label: 'Author',\n    help: 'The company or person who built and maintains this Sentry Function.',\n  },\n  {\n    name: 'overview',\n    type: 'string',\n    placeholder: 'e.g. This Sentry Function does something useful',\n    label: 'Overview',\n    help: 'A short description of your Sentry Function.',\n  },\n];\n\nfunction SentryFunctionDetails(props: Props) {\n  const [form] = useState(() => new FormModel({transformData}));\n\n  const {functionSlug} = props.params;\n  const {organization, sentryFunction} = props;\n  const method = functionSlug ? 'PUT' : 'POST';\n  let endpoint = `/organizations/${organization.slug}/functions/`;\n  if (functionSlug) {\n    endpoint += `${functionSlug}/`;\n  }\n  const defaultCode = sentryFunction\n    ? sentryFunction.code\n    : `exports.yourFunction = (req, res) => {\n    let message = req.query.message || req.body.message || 'Hello World!';\n    console.log('Query: ' + req.query);\n    console.log('Body: ' + req.body);\n    res.status(200).send(message);\n  };`;\n\n  const [events, setEvents] = useState(sentryFunction?.events || []);\n\n  useEffect(() => {\n    form.setValue('onIssue', events.includes('issue'));\n    form.setValue('onError', events.includes('error'));\n    form.setValue('onComment', events.includes('comment'));\n  }, [form, events]);\n\n  const [envVariables, setEnvVariables] = useState(\n    sentryFunction?.env_variables?.length\n      ? sentryFunction?.env_variables\n      : [{name: '', value: ''}]\n  );\n\n  const handleSubmitError = err => {\n    let errorMessage = t('Unknown Error');\n    if (err.status >= 400 && err.status < 500) {\n      errorMessage = err?.responseJSON.detail ?? errorMessage;\n    }\n    addErrorMessage(errorMessage);\n  };\n\n  const handleSubmitSuccess = data => {\n    addSuccessMessage(t('Sentry Function successfully saved.', data.name));\n    const baseUrl = `/settings/${organization.slug}/developer-settings/sentry-functions/`;\n    const url = `${baseUrl}${data.slug}/`;\n    if (sentryFunction) {\n      addSuccessMessage(t('%s successfully saved.', data.name));\n    } else {\n      addSuccessMessage(t('%s successfully created.', data.name));\n    }\n    browserHistory.push(normalizeUrl(url));\n  };\n\n  function handleEditorChange(value, _event) {\n    form.setValue('code', value);\n  }\n\n  return (\n    <div>\n      <Feature features={['organizations:sentry-functions']}>\n        <h2>\n          {sentryFunction ? t('Editing Sentry Function') : t('Create Sentry Function')}\n        </h2>\n        <Form\n          apiMethod={method}\n          apiEndpoint={endpoint}\n          model={form}\n          onPreSubmit={() => {\n            addLoadingMessage(t('Saving changes..'));\n          }}\n          initialData={{\n            code: defaultCode,\n            events,\n            envVariables,\n            ...props.sentryFunction,\n          }}\n          onSubmitError={handleSubmitError}\n          onSubmitSuccess={handleSubmitSuccess}\n        >\n          <JsonForm forms={[{title: t('Sentry Function Details'), fields: formFields}]} />\n          <Panel>\n            <PanelHeader>{t('Webhooks')}</PanelHeader>\n            <PanelBody>\n              <SentryFunctionSubscriptions events={events} setEvents={setEvents} />\n            </PanelBody>\n          </Panel>\n          <Panel>\n            <SentryFunctionEnvironmentVariables\n              envVariables={envVariables}\n              setEnvVariables={setEnvVariables}\n            />\n          </Panel>\n          <Panel>\n            <PanelHeader>{t('Write your Code Below')}</PanelHeader>\n            <PanelBody>\n              <Editor\n                height=\"40vh\"\n                theme=\"light\"\n                defaultLanguage=\"javascript\"\n                defaultValue={defaultCode}\n                onChange={handleEditorChange}\n                options={{\n                  minimap: {\n                    enabled: false,\n                  },\n                  scrollBeyondLastLine: false,\n                }}\n              />\n            </PanelBody>\n          </Panel>\n        </Form>\n      </Feature>\n    </div>\n  );\n}\n\ntype WrapperState = {\n  sentryFunction?: SentryFunction;\n} & AsyncComponent['state'];\n\ntype WrapperProps = {\n  organization: Organization;\n  params: {functionSlug?: string};\n} & AsyncComponent['props'];\n\nclass SentryFunctionsWrapper extends AsyncComponent<WrapperProps, WrapperState> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {functionSlug} = this.props.params;\n    const {organization} = this.props;\n    if (functionSlug) {\n      return [\n        [\n          'sentryFunction',\n          `/organizations/${organization.slug}/functions/${functionSlug}/`,\n        ],\n      ];\n    }\n    return [];\n  }\n  renderBody() {\n    return (\n      <SentryFunctionDetails sentryFunction={this.state.sentryFunction} {...this.props} />\n    );\n  }\n}\n\nexport default withOrganization(SentryFunctionsWrapper);\n"],"names":["FormPanel","_ref","additionalFieldProps","title","fields","access","disabled","renderFooter","renderHeader","collapsible","initiallyCollapsed","otherProps","collapsed","setCollapse","useState","handleCollapseToggle","useCallback","current","_jsxs","Panel","id","sanitizeQuerySelector","undefined","children","PanelHeader","_jsx","Collapse","onClick","IconChevron","direction","size","PanelBody","hidden","map","field","defaultValue","_","fieldWithoutDefaultValue","disabledReason","FieldFromConfig","highlighted","name","displayName","_styled","target","styles","JsonForm","Component","constructor","arguments","_defineProperty","this","props","location","hash","componentDidMount","scrollToHash","componentDidUpdate","prevProps","setState","toHash","scrollToElement","decodeURIComponent","align","offset","err","Sentry","shouldDisplayForm","fieldsWithVisibleProp","filter","defined","visible","length","every","renderForm","formPanelProps","render","forms","features","_location","params","_params","router","_router","routes","_routes","state","formGroup","i","Fragment","withSentryRouter","SentryFunctionEnvironmentVariables","envVariables","setEnvVariables","t","StyledAddButton","icon","IconAdd","isCircled","addEnvVar","value","StyledPanelBody","EnvironmentVariableWrapper","EnvHeader","EnvHeaderRight","envVariable","TextField","required","inline","stacked","onChange","e","handleNameChange","pos","newEnvVariables","push","handleValueChange","ButtonHolder","IconDelete","splice","removeEnvVar","Button","space","p","theme","gray400","SentryFunctionSubscriptions","events","setEvents","resource","checked","includes","concat","SentryFunctionsSubscriptionGrid","EVENT_CHOICES","SubscriptionBox","disabledFromPermissions","webhookDisabled","isNew","breakpoints","large","transformData","data","onIssue","onError","onComment","output","formFields","type","placeholder","label","help","SentryFunctionDetails","form","FormModel","functionSlug","organization","sentryFunction","method","endpoint","slug","defaultCode","code","useEffect","setValue","env_variables","Feature","Form","apiMethod","apiEndpoint","model","onPreSubmit","addLoadingMessage","initialData","onSubmitError","errorMessage","status","responseJSON","detail","addErrorMessage","onSubmitSuccess","addSuccessMessage","url","browserHistory","normalizeUrl","Editor","height","defaultLanguage","_event","options","minimap","enabled","scrollBeyondLastLine","SentryFunctionsWrapper","AsyncComponent","getEndpoints","renderBody","withOrganization"],"sourceRoot":""}