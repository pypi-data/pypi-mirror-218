{"version":3,"file":"chunks/app_views_settings_organizationTeams_teamNotifications_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/organizationTeams/teamNotifications.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx"],"sourcesContent":["import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\nexport type AsyncViewState = AsyncComponent['state'];\nexport type AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {hasEveryAccess} from 'sentry/components/acl/access';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport {Button} from 'sentry/components/button';\nimport Confirm from 'sentry/components/confirm';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport TextField from 'sentry/components/forms/fields/textField';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {Tooltip} from 'sentry/components/tooltip';\nimport {IconDelete} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {ExternalTeam, Integration, Organization, Team} from 'sentry/types';\nimport {toTitleCase} from 'sentry/utils';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AsyncView from 'sentry/views/asyncView';\nimport PermissionAlert from 'sentry/views/settings/project/permissionAlert';\n\ntype Props = RouteComponentProps<{teamId: string}, {}> & {\n  organization: Organization;\n  team: Team;\n};\n\ntype State = AsyncView['state'] & {\n  integrations: Integration[];\n  teamDetails: Team;\n};\n\nconst DOCS_LINK =\n  'https://docs.sentry.io/product/integrations/notification-incidents/slack/#team-notifications';\nconst NOTIFICATION_PROVIDERS = ['slack'];\n\nclass TeamNotificationSettings extends AsyncView<Props, State> {\n  getTitle() {\n    return 'Team Notification Settings';\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization, team} = this.props;\n    return [\n      [\n        'teamDetails',\n        `/teams/${organization.slug}/${team.slug}/`,\n        {query: {expand: ['externalTeams']}},\n      ],\n      [\n        'integrations',\n        `/organizations/${organization.slug}/integrations/`,\n        {query: {includeConfig: 0}},\n      ],\n    ];\n  }\n\n  handleDelete = async (mapping: ExternalTeam) => {\n    try {\n      const {organization, team} = this.props;\n      const endpoint = `/teams/${organization.slug}/${team.slug}/external-teams/${mapping.id}/`;\n      await this.api.requestPromise(endpoint, {\n        method: 'DELETE',\n      });\n      addSuccessMessage(t('Deletion successful'));\n      this.fetchData();\n    } catch {\n      addErrorMessage(t('An error occurred'));\n    }\n  };\n\n  renderBody() {\n    const {team} = this.props;\n    return (\n      <Fragment>\n        <PermissionAlert access={['team:write']} team={team} />\n\n        <Panel>\n          <PanelHeader>{t('Notifications')}</PanelHeader>\n          <PanelBody>{this.renderPanelBody()}</PanelBody>\n        </Panel>\n      </Fragment>\n    );\n  }\n\n  renderPanelBody() {\n    const {organization, team} = this.props;\n    const {teamDetails, integrations} = this.state;\n\n    const notificationIntegrations = integrations.filter(integration =>\n      NOTIFICATION_PROVIDERS.includes(integration.provider.key)\n    );\n    if (!notificationIntegrations.length) {\n      return (\n        <EmptyMessage>\n          {t('No Notification Integrations have been installed yet.')}\n        </EmptyMessage>\n      );\n    }\n\n    const externalTeams = (teamDetails.externalTeams || []).filter(externalTeam =>\n      NOTIFICATION_PROVIDERS.includes(externalTeam.provider)\n    );\n\n    if (!externalTeams.length) {\n      return (\n        <EmptyMessage>\n          <div>{t('No teams have been linked yet.')}</div>\n          <NotDisabledSubText>\n            {tct('Head over to Slack and type [code] to get started. [link].', {\n              code: <code>/sentry link team</code>,\n              link: <ExternalLink href={DOCS_LINK}>{t('Learn more')}</ExternalLink>,\n            })}\n          </NotDisabledSubText>\n        </EmptyMessage>\n      );\n    }\n\n    const integrationsById = Object.fromEntries(\n      notificationIntegrations.map(integration => [integration.id, integration])\n    );\n\n    const hasWriteAccess = hasEveryAccess(['team:write'], {organization, team});\n\n    return externalTeams.map(externalTeam => (\n      <FormFieldWrapper key={externalTeam.id}>\n        <StyledFormField\n          disabled\n          label={\n            <div>\n              <NotDisabledText>\n                {toTitleCase(externalTeam.provider)}:\n                {integrationsById[externalTeam.integrationId].name}\n              </NotDisabledText>\n              <NotDisabledSubText>\n                {tct('Unlink this channel in Slack with [code]. [link].', {\n                  code: <code>/sentry unlink team</code>,\n                  link: <ExternalLink href={DOCS_LINK}>{t('Learn more')}</ExternalLink>,\n                })}\n              </NotDisabledSubText>\n            </div>\n          }\n          labelText={t('Unlink this channel in slack with `/slack unlink team`')}\n          name=\"externalName\"\n          value={externalTeam.externalName}\n        />\n\n        <DeleteButtonWrapper>\n          <Tooltip\n            title={t(\n              'You must be an organization owner, manager or admin to remove a Slack team link'\n            )}\n            disabled={hasWriteAccess}\n          >\n            <Confirm\n              disabled={!hasWriteAccess}\n              onConfirm={() => this.handleDelete(externalTeam)}\n              message={t('Are you sure you want to remove this Slack team link?')}\n            >\n              <Button\n                size=\"sm\"\n                icon={<IconDelete size=\"md\" />}\n                aria-label={t('delete')}\n                disabled={!hasWriteAccess}\n              />\n            </Confirm>\n          </Tooltip>\n        </DeleteButtonWrapper>\n      </FormFieldWrapper>\n    ));\n  }\n}\nexport default withOrganization(TeamNotificationSettings);\n\nconst NotDisabledText = styled('div')`\n  color: ${p => p.theme.textColor};\n  line-height: ${space(2)};\n`;\nconst NotDisabledSubText = styled('div')`\n  color: ${p => p.theme.subText};\n  font-size: ${p => p.theme.fontSizeRelativeSmall};\n  line-height: 1.4;\n  margin-top: ${space(1)};\n`;\nconst FormFieldWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n`;\nconst StyledFormField = styled(TextField)`\n  flex: 1;\n`;\nconst DeleteButtonWrapper = styled('div')`\n  margin-right: ${space(4)};\n  padding-right: ${space(0.5)};\n`;\n","import Access from 'sentry/components/acl/access';\nimport {Alert} from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {Project, Scope, Team} from 'sentry/types';\n\ninterface Props extends React.ComponentPropsWithoutRef<typeof Alert> {\n  access?: Scope[];\n  project?: Project | null | undefined;\n  team?: Team | null | undefined;\n}\n\nexport const permissionAlertText = t(\n  'These settings can only be edited by users with the organization-level owner, manager, or team-level admin roles.'\n);\n\nfunction PermissionAlert({access = ['project:write'], project, team, ...props}: Props) {\n  return (\n    <Access access={access} project={project} team={team}>\n      {({hasAccess}) =>\n        !hasAccess && (\n          <Alert data-test-id=\"project-permission-alert\" type=\"warning\" {...props}>\n            {permissionAlertText}\n          </Alert>\n        )\n      }\n    </Access>\n  );\n}\n\nexport default PermissionAlert;\n"],"names":["AsyncView","AsyncComponent","getTitle","render","_jsx","SentryDocumentTitle","title","this","children","renderComponent","displayName","DOCS_LINK","NOTIFICATION_PROVIDERS","TeamNotificationSettings","constructor","arguments","_defineProperty","async","organization","team","props","endpoint","slug","mapping","id","api","requestPromise","method","addSuccessMessage","t","fetchData","addErrorMessage","getEndpoints","query","expand","includeConfig","renderBody","_jsxs","Fragment","PermissionAlert","access","Panel","PanelHeader","PanelBody","renderPanelBody","teamDetails","integrations","state","notificationIntegrations","filter","integration","includes","provider","key","length","EmptyMessage","externalTeams","externalTeam","NotDisabledSubText","tct","code","link","ExternalLink","href","integrationsById","Object","fromEntries","map","hasWriteAccess","hasEveryAccess","FormFieldWrapper","StyledFormField","disabled","label","NotDisabledText","toTitleCase","integrationId","name","labelText","value","externalName","DeleteButtonWrapper","Tooltip","Confirm","onConfirm","handleDelete","message","Button","size","icon","IconDelete","withOrganization","_styled","target","p","theme","textColor","space","subText","fontSizeRelativeSmall","styles","TextField","permissionAlertText","_ref","project","Access","_ref2","hasAccess","Alert","type"],"sourceRoot":""}