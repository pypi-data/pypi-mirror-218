{"version":3,"file":"chunks/app_views_settings_organizationTeams_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/searchBar.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/organizationTeams/allTeamsRow.tsx","webpack:///./app/views/settings/organizationTeams/allTeamsList.tsx","webpack:///./app/views/settings/organizationTeams/organizationAccessRequests.tsx","webpack:///./app/views/settings/organizationTeams/organizationTeams.tsx","webpack:///./app/views/settings/organizationTeams/index.tsx","webpack:///./app/views/settings/organizationTeams/roleOverwriteWarning.tsx","webpack:///./app/views/settings/organizationTeams/utils.tsx"],"sourcesContent":["import {useCallback, useEffect, useRef, useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport {Button} from 'sentry/components/button';\nimport {InputGroup, InputProps} from 'sentry/components/inputGroup';\nimport {IconSearch} from 'sentry/icons';\nimport {IconClose} from 'sentry/icons/iconClose';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\n\ninterface SearchBarProps extends Omit<InputProps, 'onChange'> {\n  defaultQuery?: string;\n  onChange?: (query: string) => void;\n  onSearch?: (query: string) => void;\n  query?: string;\n  trailing?: React.ReactNode;\n  width?: string;\n}\n\nfunction SearchBar({\n  query: queryProp,\n  defaultQuery = '',\n  onChange,\n  onSearch,\n  width,\n  size,\n  className,\n  trailing,\n  ...inputProps\n}: SearchBarProps) {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [query, setQuery] = useState(queryProp ?? defaultQuery);\n\n  // if query prop keeps changing we should treat this as\n  // a controlled component and its internal state should be in sync\n  useEffect(() => {\n    if (typeof queryProp === 'string') {\n      setQuery(queryProp);\n    }\n  }, [queryProp]);\n\n  const onQueryChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      const {value} = e.target;\n      setQuery(value);\n      onChange?.(value);\n    },\n    [onChange]\n  );\n\n  const onSubmit = useCallback(\n    (e: React.FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      inputRef.current?.blur();\n      onSearch?.(query);\n    },\n    [onSearch, query]\n  );\n\n  const clearSearch = useCallback(() => {\n    setQuery('');\n    onChange?.('');\n    onSearch?.('');\n  }, [onChange, onSearch]);\n\n  return (\n    <FormWrap onSubmit={onSubmit} className={className}>\n      <InputGroup>\n        <InputGroup.LeadingItems disablePointerEvents>\n          <IconSearch color=\"subText\" size={size === 'xs' ? 'xs' : 'sm'} />\n        </InputGroup.LeadingItems>\n        <StyledInput\n          {...inputProps}\n          ref={inputRef}\n          type=\"text\"\n          name=\"query\"\n          autoComplete=\"off\"\n          value={query}\n          onChange={onQueryChange}\n          width={width}\n          size={size}\n        />\n        <InputGroup.TrailingItems>\n          {trailing}\n          {!!query && (\n            <SearchBarTrailingButton\n              size=\"zero\"\n              borderless\n              onClick={clearSearch}\n              icon={<IconClose size=\"xs\" />}\n              aria-label={t('Clear')}\n            />\n          )}\n        </InputGroup.TrailingItems>\n      </InputGroup>\n    </FormWrap>\n  );\n}\n\nconst FormWrap = styled('form')`\n  display: block;\n  position: relative;\n`;\n\nconst StyledInput = styled(InputGroup.Input)`\n  ${p => p.width && `width: ${p.width};`}\n`;\n\nexport const SearchBarTrailingButton = styled(Button)`\n  color: ${p => p.theme.subText};\n  padding: ${space(0.5)};\n`;\n\nexport default SearchBar;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\nexport type AsyncViewState = AsyncComponent['state'];\nexport type AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\nimport startCase from 'lodash/startCase';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {fetchOrganizationDetails} from 'sentry/actionCreators/organizations';\nimport {joinTeam, leaveTeam} from 'sentry/actionCreators/teams';\nimport {Client} from 'sentry/api';\nimport {Button} from 'sentry/components/button';\nimport IdBadge from 'sentry/components/idBadge';\nimport Link from 'sentry/components/links/link';\nimport {PanelItem} from 'sentry/components/panels';\nimport {t, tct, tn} from 'sentry/locale';\nimport TeamStore from 'sentry/stores/teamStore';\nimport {space} from 'sentry/styles/space';\nimport {Organization, Team} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\nimport {getButtonHelpText} from 'sentry/views/settings/organizationTeams/utils';\n\ntype Props = {\n  api: Client;\n  openMembership: boolean;\n  organization: Organization;\n  team: Team;\n};\n\ntype State = {\n  error: boolean;\n  loading: boolean;\n};\n\nclass AllTeamsRow extends Component<Props, State> {\n  state: State = {\n    loading: false,\n    error: false,\n  };\n\n  reloadProjects() {\n    const {api, organization} = this.props;\n    // After a change in teams has happened, refresh the project store\n    fetchOrganizationDetails(api, organization.slug, {\n      loadProjects: true,\n    });\n  }\n\n  handleRequestAccess = () => {\n    const {team} = this.props;\n\n    try {\n      this.joinTeam({\n        successMessage: tct('You have requested access to [team]', {\n          team: `#${team.slug}`,\n        }),\n\n        errorMessage: tct('Unable to request access to [team]', {\n          team: `#${team.slug}`,\n        }),\n      });\n\n      // Update team so that `isPending` is true\n      TeamStore.onUpdateSuccess(team.slug, {\n        ...team,\n        isPending: true,\n      });\n    } catch (_err) {\n      // No need to do anything\n    }\n  };\n\n  handleJoinTeam = async () => {\n    const {team} = this.props;\n\n    await this.joinTeam({\n      successMessage: tct('You have joined [team]', {\n        team: `#${team.slug}`,\n      }),\n      errorMessage: tct('Unable to join [team]', {\n        team: `#${team.slug}`,\n      }),\n    });\n\n    this.reloadProjects();\n  };\n\n  joinTeam = ({\n    successMessage,\n    errorMessage,\n  }: {\n    errorMessage: React.ReactNode;\n    successMessage: React.ReactNode;\n  }) => {\n    const {api, organization, team} = this.props;\n\n    this.setState({\n      loading: true,\n    });\n\n    return new Promise<void>((resolve, reject) =>\n      joinTeam(\n        api,\n        {\n          orgId: organization.slug,\n          teamId: team.slug,\n        },\n        {\n          success: () => {\n            this.setState({\n              loading: false,\n              error: false,\n            });\n            addSuccessMessage(successMessage);\n            resolve();\n          },\n          error: () => {\n            this.setState({\n              loading: false,\n              error: true,\n            });\n            addErrorMessage(errorMessage);\n            reject(new Error('Unable to join team'));\n          },\n        }\n      )\n    );\n  };\n\n  handleLeaveTeam = () => {\n    const {api, organization, team} = this.props;\n\n    this.setState({\n      loading: true,\n    });\n\n    leaveTeam(\n      api,\n      {\n        orgId: organization.slug,\n        teamId: team.slug,\n      },\n      {\n        success: () => {\n          this.setState({\n            loading: false,\n            error: false,\n          });\n          addSuccessMessage(\n            tct('You have left [team]', {\n              team: `#${team.slug}`,\n            })\n          );\n\n          // Reload ProjectsStore\n          this.reloadProjects();\n        },\n        error: () => {\n          this.setState({\n            loading: false,\n            error: true,\n          });\n          addErrorMessage(\n            tct('Unable to leave [team]', {\n              team: `#${team.slug}`,\n            })\n          );\n        },\n      }\n    );\n  };\n\n  getTeamRoleName = () => {\n    const {organization, team} = this.props;\n    if (!organization.features.includes('team-roles') || !team.teamRole) {\n      return null;\n    }\n\n    const {teamRoleList} = organization;\n    const roleName = teamRoleList.find(r => r.id === team.teamRole)?.name;\n\n    return roleName;\n  };\n\n  render() {\n    const {team, openMembership, organization} = this.props;\n    const {access} = organization;\n    const urlPrefix = `/settings/${organization.slug}/teams/`;\n    const canEditTeam = access.includes('org:write') || access.includes('team:admin');\n\n    // TODO(team-roles): team admins can also manage membership\n    // org:admin is a unique scope that only org owners have\n    const isOrgOwner = access.includes('org:admin');\n    const isPermissionGroup = (team.orgRole && (!canEditTeam || !isOrgOwner)) as boolean;\n    const isIdpProvisioned = team.flags['idp:provisioned'];\n\n    const buttonHelpText = getButtonHelpText(isIdpProvisioned, isPermissionGroup);\n\n    const display = (\n      <IdBadge\n        team={team}\n        avatarSize={36}\n        description={tn('%s Member', '%s Members', team.memberCount)}\n      />\n    );\n\n    // You can only view team details if you have access to team -- this should account\n    // for your role + org open membership\n    const canViewTeam = team.hasAccess;\n\n    const orgRoleFromTeam = team.orgRole ? `${startCase(team.orgRole)} Team` : null;\n    const isHidden = orgRoleFromTeam === null && this.getTeamRoleName() === null;\n    // TODO(team-roles): team admins can also manage membership\n    const isDisabled = isIdpProvisioned || isPermissionGroup;\n\n    return (\n      <TeamPanelItem>\n        <div>\n          {canViewTeam ? (\n            <TeamLink data-test-id=\"team-link\" to={`${urlPrefix}${team.slug}/`}>\n              {display}\n            </TeamLink>\n          ) : (\n            display\n          )}\n        </div>\n        <DisplayRole isHidden={isHidden}>{orgRoleFromTeam}</DisplayRole>\n        <DisplayRole isHidden={isHidden}>{this.getTeamRoleName()}</DisplayRole>\n        <div>\n          {this.state.loading ? (\n            <Button size=\"sm\" disabled>\n              ...\n            </Button>\n          ) : team.isMember ? (\n            <Button\n              size=\"sm\"\n              onClick={this.handleLeaveTeam}\n              disabled={isDisabled}\n              title={buttonHelpText}\n            >\n              {t('Leave Team')}\n            </Button>\n          ) : team.isPending ? (\n            <Button\n              size=\"sm\"\n              disabled\n              title={t(\n                'Your request to join this team is being reviewed by organization owners'\n              )}\n            >\n              {t('Request Pending')}\n            </Button>\n          ) : openMembership ? (\n            <Button\n              size=\"sm\"\n              onClick={this.handleJoinTeam}\n              disabled={isDisabled}\n              title={buttonHelpText}\n            >\n              {t('Join Team')}\n            </Button>\n          ) : (\n            <Button\n              size=\"sm\"\n              onClick={this.handleRequestAccess}\n              disabled={isDisabled}\n              title={buttonHelpText}\n            >\n              {t('Request Access')}\n            </Button>\n          )}\n        </div>\n      </TeamPanelItem>\n    );\n  }\n}\n\nconst TeamLink = styled(Link)`\n  display: inline-block;\n\n  &.focus-visible {\n    margin: -${space(1)};\n    padding: ${space(1)};\n    background: #f2eff5;\n    border-radius: 3px;\n    outline: none;\n  }\n`;\n\nexport {AllTeamsRow};\nexport default withApi(AllTeamsRow);\n\nconst TeamPanelItem = styled(PanelItem)`\n  display: grid;\n  grid-template-columns: minmax(150px, 4fr) min-content;\n  grid-template-rows: auto min-content;\n  gap: ${space(2)};\n  align-items: center;\n\n  > div:last-child {\n    margin-left: auto;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: minmax(150px, 3fr) minmax(90px, 1fr) minmax(90px, 1fr) min-content;\n    grid-template-rows: auto;\n    > div:empty {\n      display: block !important;\n    }\n  }\n`;\n\nconst DisplayRole = styled('div')<{isHidden: boolean}>`\n  display: ${props => (props.isHidden ? 'none' : 'block')};\n`;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {openCreateTeamModal} from 'sentry/actionCreators/modal';\nimport {Button} from 'sentry/components/button';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport {t, tct} from 'sentry/locale';\nimport {Organization, Team} from 'sentry/types';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\nimport AllTeamsRow from './allTeamsRow';\n\ntype Props = {\n  access: Record<string, any>;\n  openMembership: boolean;\n  organization: Organization;\n  teamList: Array<Team>;\n};\n\nfunction AllTeamsList({organization, openMembership, teamList, access}: Props) {\n  const teamNodes = teamList.map(team => (\n    <AllTeamsRow\n      team={team}\n      organization={organization}\n      openMembership={openMembership}\n      key={team.slug}\n    />\n  ));\n\n  if (!teamNodes.length) {\n    const canCreateTeam = access.has('project:admin');\n\n    return (\n      <EmptyMessage>\n        {tct('No teams here. [teamCreate]', {\n          root: <TextBlock noMargin />,\n          teamCreate: canCreateTeam\n            ? tct('You can always [link:create one].', {\n                link: (\n                  <StyledButton\n                    priority=\"link\"\n                    onClick={() =>\n                      openCreateTeamModal({\n                        organization,\n                      })\n                    }\n                    aria-label={t('Create team')}\n                  />\n                ),\n              })\n            : null,\n        })}\n      </EmptyMessage>\n    );\n  }\n\n  return <Fragment>{teamNodes}</Fragment>;\n}\n\nexport default AllTeamsList;\n\nconst StyledButton = styled(Button)`\n  font-size: ${p => p.theme.fontSizeLarge};\n`;\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport {Button} from 'sentry/components/button';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'sentry/components/panels';\nimport {t, tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {AccessRequest} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\n\ntype Props = {\n  api: Client;\n  onRemoveAccessRequest: (id: string, isApproved: boolean) => void;\n  orgId: string;\n  requestList: AccessRequest[];\n};\n\ntype State = {\n  accessRequestBusy: Record<string, boolean>;\n};\n\ntype HandleOpts = {\n  errorMessage: string;\n  id: string;\n  isApproved: boolean;\n  successMessage: string;\n};\n\nclass OrganizationAccessRequests extends Component<Props, State> {\n  state: State = {\n    accessRequestBusy: {},\n  };\n\n  async handleAction({id, isApproved, successMessage, errorMessage}: HandleOpts) {\n    const {api, orgId, onRemoveAccessRequest} = this.props;\n\n    this.setState(state => ({\n      accessRequestBusy: {...state.accessRequestBusy, [id]: true},\n    }));\n\n    try {\n      await api.requestPromise(`/organizations/${orgId}/access-requests/${id}/`, {\n        method: 'PUT',\n        data: {isApproved},\n      });\n      onRemoveAccessRequest(id, isApproved);\n      addSuccessMessage(successMessage);\n    } catch {\n      addErrorMessage(errorMessage);\n    }\n\n    this.setState(state => ({\n      accessRequestBusy: {...state.accessRequestBusy, [id]: false},\n    }));\n  }\n\n  handleApprove = (id: string, e: React.MouseEvent) => {\n    e.stopPropagation();\n    this.handleAction({\n      id,\n      isApproved: true,\n      successMessage: t('Team request approved'),\n      errorMessage: t('Error approving team request'),\n    });\n  };\n\n  handleDeny = (id: string, e: React.MouseEvent) => {\n    e.stopPropagation();\n    this.handleAction({\n      id,\n      isApproved: false,\n      successMessage: t('Team request denied'),\n      errorMessage: t('Error denying team request'),\n    });\n  };\n\n  render() {\n    const {requestList} = this.props;\n    const {accessRequestBusy} = this.state;\n\n    if (!requestList || !requestList.length) {\n      return null;\n    }\n\n    return (\n      <Panel>\n        <PanelHeader>{t('Pending Team Requests')}</PanelHeader>\n\n        <PanelBody>\n          {requestList.map(({id, member, team, requester}) => {\n            const memberName =\n              member.user &&\n              (member.user.name || member.user.email || member.user.username);\n            const requesterName =\n              requester && (requester.name || requester.email || requester.username);\n            return (\n              <StyledPanelItem key={id}>\n                <div data-test-id=\"request-message\">\n                  {requesterName\n                    ? tct('[requesterName] requests to add [name] to the [team] team.', {\n                        requesterName,\n                        name: <strong>{memberName}</strong>,\n                        team: <strong>#{team.slug}</strong>,\n                      })\n                    : tct('[name] requests access to the [team] team.', {\n                        name: <strong>{memberName}</strong>,\n                        team: <strong>#{team.slug}</strong>,\n                      })}\n                </div>\n                <div>\n                  <StyledButton\n                    priority=\"primary\"\n                    size=\"sm\"\n                    onClick={e => this.handleApprove(id, e)}\n                    busy={accessRequestBusy[id]}\n                  >\n                    {t('Approve')}\n                  </StyledButton>\n                  <Button\n                    busy={accessRequestBusy[id]}\n                    onClick={e => this.handleDeny(id, e)}\n                    size=\"sm\"\n                  >\n                    {t('Deny')}\n                  </Button>\n                </div>\n              </StyledPanelItem>\n            );\n          })}\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n\nconst StyledPanelItem = styled(PanelItem)`\n  display: grid;\n  grid-template-columns: auto max-content;\n  gap: ${space(2)};\n  align-items: center;\n`;\n\nconst StyledButton = styled(Button)`\n  margin-right: ${space(1)};\n`;\n\nexport default withApi(OrganizationAccessRequests);\n","import {useState} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport debounce from 'lodash/debounce';\nimport partition from 'lodash/partition';\n\nimport {openCreateTeamModal} from 'sentry/actionCreators/modal';\nimport {Button} from 'sentry/components/button';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport SearchBar from 'sentry/components/searchBar';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {DEFAULT_DEBOUNCE_DURATION} from 'sentry/constants';\nimport {IconAdd} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {AccessRequest, Organization} from 'sentry/types';\nimport {useTeams} from 'sentry/utils/useTeams';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport {RoleOverwritePanelAlert} from 'sentry/views/settings/organizationTeams/roleOverwriteWarning';\n\nimport AllTeamsList from './allTeamsList';\nimport OrganizationAccessRequests from './organizationAccessRequests';\n\ntype Props = {\n  access: Set<string>;\n  features: Set<string>;\n  onRemoveAccessRequest: (id: string, isApproved: boolean) => void;\n  organization: Organization;\n  requestList: AccessRequest[];\n} & RouteComponentProps<{}, {}>;\n\nfunction OrganizationTeams({\n  organization,\n  access,\n  features,\n  requestList,\n  onRemoveAccessRequest,\n}: Props) {\n  const [teamQuery, setTeamQuery] = useState('');\n  const {initiallyLoaded} = useTeams({provideUserTeams: true});\n  const {teams, onSearch, loadMore, hasMore, fetching} = useTeams();\n\n  if (!organization) {\n    return null;\n  }\n  const canCreateTeams = access.has('project:admin');\n\n  const action = (\n    <Button\n      priority=\"primary\"\n      size=\"sm\"\n      disabled={!canCreateTeams}\n      title={\n        !canCreateTeams ? t('You do not have permission to create teams') : undefined\n      }\n      onClick={() =>\n        openCreateTeamModal({\n          organization,\n        })\n      }\n      icon={<IconAdd size=\"xs\" isCircled />}\n    >\n      {t('Create Team')}\n    </Button>\n  );\n\n  const title = t('Teams');\n\n  const debouncedSearch = debounce(onSearch, DEFAULT_DEBOUNCE_DURATION);\n  function handleSearch(query: string) {\n    setTeamQuery(query);\n    debouncedSearch(query);\n  }\n\n  const {slug: orgSlug, orgRole, orgRoleList, teamRoleList} = organization;\n  const filteredTeams = teams.filter(team =>\n    `#${team.slug}`.toLowerCase().includes(teamQuery.toLowerCase())\n  );\n  const [userTeams, otherTeams] = partition(filteredTeams, team => team.isMember);\n\n  return (\n    <div data-test-id=\"team-list\">\n      <SentryDocumentTitle title={title} orgSlug={orgSlug} />\n      <SettingsPageHeader title={title} action={action} />\n\n      <OrganizationAccessRequests\n        orgId={organization.slug}\n        requestList={requestList}\n        onRemoveAccessRequest={onRemoveAccessRequest}\n      />\n      <StyledSearchBar\n        placeholder={t('Search teams')}\n        onChange={handleSearch}\n        query={teamQuery}\n      />\n      <Panel>\n        <PanelHeader>{t('Your Teams')}</PanelHeader>\n        <PanelBody>\n          {features.has('team-roles') && (\n            <RoleOverwritePanelAlert\n              orgRole={orgRole}\n              orgRoleList={orgRoleList}\n              teamRoleList={teamRoleList}\n              isSelf\n            />\n          )}\n          {initiallyLoaded ? (\n            <AllTeamsList\n              organization={organization}\n              teamList={userTeams.filter(team => team.slug.includes(teamQuery))}\n              access={access}\n              openMembership={false}\n            />\n          ) : (\n            <LoadingIndicator />\n          )}\n        </PanelBody>\n      </Panel>\n      <Panel>\n        <PanelHeader>{t('Other Teams')}</PanelHeader>\n        <PanelBody>\n          <AllTeamsList\n            organization={organization}\n            teamList={otherTeams}\n            access={access}\n            openMembership={\n              !!(features.has('open-membership') || access.has('org:write'))\n            }\n          />\n        </PanelBody>\n      </Panel>\n      {hasMore && (\n        <LoadMoreWrapper>\n          {fetching && <LoadingIndicator mini />}\n          <Button onClick={() => loadMore(teamQuery)}>{t('Show more')}</Button>\n        </LoadMoreWrapper>\n      )}\n    </div>\n  );\n}\n\nconst StyledSearchBar = styled(SearchBar)`\n  margin-bottom: ${space(2)};\n`;\n\nconst LoadMoreWrapper = styled('div')`\n  display: grid;\n  gap: ${space(2)};\n  align-items: center;\n  justify-content: end;\n  grid-auto-flow: column;\n`;\n\nexport default OrganizationTeams;\n","import {RouteComponentProps} from 'react-router';\n\nimport {loadStats} from 'sentry/actionCreators/projects';\nimport {Client} from 'sentry/api';\nimport TeamStore from 'sentry/stores/teamStore';\nimport {AccessRequest, Organization, Team} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AsyncView from 'sentry/views/asyncView';\n\nimport OrganizationTeams from './organizationTeams';\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n  teams: Team[];\n} & RouteComponentProps<{}, {}>;\n\ntype State = AsyncView['state'] & {\n  requestList: AccessRequest[];\n};\n\nclass OrganizationTeamsContainer extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {organization} = this.props;\n\n    return [['requestList', `/organizations/${organization.slug}/access-requests/`]];\n  }\n\n  componentDidMount() {\n    super.componentDidMount();\n    this.fetchStats();\n  }\n\n  fetchStats() {\n    const {organization} = this.props;\n    loadStats(this.props.api, {\n      orgId: organization.slug,\n      query: {\n        since: (new Date().getTime() / 1000 - 3600 * 24).toString(),\n        stat: 'generated',\n        group: 'project',\n      },\n    });\n  }\n\n  removeAccessRequest = (id: string, isApproved: boolean) => {\n    const requestToRemove = this.state.requestList.find(request => request.id === id);\n    this.setState(state => ({\n      requestList: state.requestList.filter(request => request.id !== id),\n    }));\n    if (isApproved && requestToRemove) {\n      const team = requestToRemove.team;\n      TeamStore.onUpdateSuccess(team.slug, {\n        ...team,\n        memberCount: team.memberCount + 1,\n      });\n    }\n  };\n\n  renderBody() {\n    const {organization} = this.props;\n\n    if (!organization) {\n      return null;\n    }\n\n    return (\n      <OrganizationTeams\n        {...this.props}\n        access={new Set(organization.access)}\n        features={new Set(organization.features)}\n        organization={organization}\n        requestList={this.state.requestList}\n        onRemoveAccessRequest={this.removeAccessRequest}\n      />\n    );\n  }\n}\n\nexport {OrganizationTeamsContainer};\n\nexport default withApi(withOrganization(OrganizationTeamsContainer));\n","import {PanelAlert} from 'sentry/components/panels';\nimport {Tooltip} from 'sentry/components/tooltip';\nimport {IconInfo} from 'sentry/icons';\nimport {tct} from 'sentry/locale';\nimport {OrgRole, TeamRole} from 'sentry/types';\n\ntype Props = {\n  orgRole: OrgRole['id'] | undefined;\n  orgRoleList: OrgRole[];\n  teamRoleList: TeamRole[];\n  isSelf?: boolean;\n};\n\nexport function RoleOverwriteIcon(props: Props) {\n  const hasOverride = hasOrgRoleOverwrite(props);\n  if (!hasOverride) {\n    return null;\n  }\n\n  return (\n    <Tooltip title={getOverwriteString(props)}>\n      <IconInfo size=\"sm\" color=\"gray300\" />\n    </Tooltip>\n  );\n}\n\nexport function RoleOverwritePanelAlert(props: Props) {\n  const hasOverride = hasOrgRoleOverwrite(props);\n  if (!hasOverride) {\n    return null;\n  }\n\n  return (\n    <PanelAlert data-test-id=\"alert-role-overwrite\">\n      {getOverwriteString(props)}\n    </PanelAlert>\n  );\n}\n\n/**\n * Check that the user's org role has a minimum team role that maps to the lowest\n * possible team role\n */\nexport function hasOrgRoleOverwrite(props: Props) {\n  const {orgRole, orgRoleList, teamRoleList} = props;\n\n  const orgRoleObj = orgRoleList.find(r => r.id === orgRole);\n  return teamRoleList.findIndex(r => r.id === orgRoleObj?.minimumTeamRole) > 0;\n}\n\n/**\n * Standardize string so situations where org-level vs team-level roles is easier to recognize\n */\nexport function getOverwriteString(props: Props) {\n  const {orgRole, orgRoleList, teamRoleList, isSelf} = props;\n  const orgRoleObj = orgRoleList.find(r => r.id === orgRole);\n  const teamRoleObj = teamRoleList.find(r => r.id === orgRoleObj?.minimumTeamRole);\n  if (!orgRoleObj || !teamRoleObj) {\n    return '';\n  }\n\n  return tct(\n    '[selfNoun] organization role as [article] [orgRole] has granted [selfPronoun] a minimum team-level role of [teamRole]',\n    {\n      selfNoun: isSelf ? 'Your' : \"This user's\",\n      selfPronoun: isSelf ? 'you' : 'them',\n      article: 'AEIOU'.includes(orgRoleObj.name[0]) ? 'an' : 'a',\n      orgRole: <strong>{orgRoleObj.name}</strong>,\n      teamRole: <strong>{teamRoleObj.name}</strong>,\n    }\n  );\n}\n\nexport default RoleOverwriteIcon;\n","import {t} from 'sentry/locale';\n\nexport function getButtonHelpText(\n  isIdpProvisioned: boolean = false,\n  isPermissionGroup: boolean = false\n) {\n  if (isIdpProvisioned) {\n    return t(\n      \"Membership to this team is managed through your organization's identity provider.\"\n    );\n  }\n\n  if (isPermissionGroup) {\n    return t('Membership to a team with an organization role is managed by org owners.');\n  }\n\n  return undefined;\n}\n"],"names":["SearchBar","_ref","query","queryProp","defaultQuery","onChange","onSearch","width","size","className","trailing","inputProps","inputRef","useRef","setQuery","useState","useEffect","onQueryChange","useCallback","e","value","target","onSubmit","preventDefault","current","blur","clearSearch","_jsx","FormWrap","children","_jsxs","InputGroup","LeadingItems","disablePointerEvents","IconSearch","color","StyledInput","ref","type","name","autoComplete","TrailingItems","SearchBarTrailingButton","borderless","onClick","icon","IconClose","t","displayName","_styled","styles","Input","p","Button","theme","subText","space","AsyncView","AsyncComponent","getTitle","render","SentryDocumentTitle","title","this","renderComponent","AllTeamsRow","Component","constructor","arguments","_defineProperty","loading","error","team","props","joinTeam","successMessage","tct","slug","errorMessage","TeamStore","onUpdateSuccess","isPending","_err","async","reloadProjects","api","organization","setState","Promise","resolve","reject","orgId","teamId","success","addSuccessMessage","addErrorMessage","Error","leaveTeam","features","includes","teamRole","teamRoleList","roleName","find","r","id","fetchOrganizationDetails","loadProjects","openMembership","access","urlPrefix","canEditTeam","isOrgOwner","isPermissionGroup","orgRole","isIdpProvisioned","flags","buttonHelpText","getButtonHelpText","display","IdBadge","avatarSize","description","tn","memberCount","canViewTeam","hasAccess","orgRoleFromTeam","startCase","isHidden","getTeamRoleName","isDisabled","TeamPanelItem","TeamLink","to","DisplayRole","state","disabled","isMember","handleLeaveTeam","handleJoinTeam","handleRequestAccess","Link","withApi","PanelItem","breakpoints","small","AllTeamsList","teamList","teamNodes","map","length","canCreateTeam","has","EmptyMessage","root","TextBlock","noMargin","teamCreate","link","StyledButton","priority","openCreateTeamModal","Fragment","fontSizeLarge","OrganizationAccessRequests","accessRequestBusy","stopPropagation","handleAction","isApproved","onRemoveAccessRequest","requestPromise","method","data","requestList","Panel","PanelHeader","PanelBody","_ref2","member","requester","memberName","user","email","username","requesterName","StyledPanelItem","handleApprove","busy","handleDeny","OrganizationTeams","teamQuery","setTeamQuery","initiallyLoaded","useTeams","provideUserTeams","teams","loadMore","hasMore","fetching","canCreateTeams","action","undefined","IconAdd","isCircled","debouncedSearch","debounce","DEFAULT_DEBOUNCE_DURATION","orgSlug","orgRoleList","filteredTeams","filter","toLowerCase","userTeams","otherTeams","partition","SettingsPageHeader","StyledSearchBar","placeholder","RoleOverwritePanelAlert","isSelf","LoadingIndicator","LoadMoreWrapper","mini","OrganizationTeamsContainer","requestToRemove","request","getEndpoints","componentDidMount","super","fetchStats","loadStats","since","Date","getTime","toString","stat","group","renderBody","Set","removeAccessRequest","withOrganization","RoleOverwriteIcon","hasOrgRoleOverwrite","Tooltip","getOverwriteString","IconInfo","PanelAlert","orgRoleObj","findIndex","minimumTeamRole","teamRoleObj","selfNoun","selfPronoun","article"],"sourceRoot":""}