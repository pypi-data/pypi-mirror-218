{"version":3,"file":"chunks/app_views_settings_account_accountSecurity_sessionHistory_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"umBA6BA,SAASA,EAAQC,GAUP,IAVQ,SAChBC,EAAQ,UACRC,EAAS,SACTC,EAAQ,MACRC,EAAK,GACLC,EAAE,gBACFC,EAAkB,SAAQ,MAC1BC,GAAQ,EAAK,SACbC,GAAW,KACRC,GACGT,EACN,MAAMU,GAASC,EAAAA,EAAAA,KACTC,EAAYR,EAAQS,EAAAA,MAAST,QAASU,EACtCC,EAA+B,iBAAPV,EAAkB,CAACW,SAAUX,EAAID,MAAOQ,GAAaP,EAC7EY,GAASC,EAAAA,EAAAA,GAAaH,GAEtBI,EAAShB,IAAWc,EAAQV,IAAUG,EAAOP,SAASc,EAAQV,GAEpE,OACEa,EAAAA,EAAAA,IAACC,EAAQ,CACPnB,UAAWoB,IAAW,CAAC,CAAChB,GAAkBa,GAASjB,GACnDM,SAAUA,EAASP,UAEnBmB,EAAAA,EAAAA,IAACG,EAAAA,KAAU,IAAKd,EAAOe,kBAAmBjB,EAAOF,GAAIG,EAAW,GAAKS,EAAOhB,SACzEA,KAIT,CA5BSF,EAAQ0B,YAAA,WA8BjB,UAEMJ,GAAWK,EAAAA,EAAAA,GAAO,KAAI,CAC1BC,kBAAmBC,GAAiB,aAATA,EAAmBX,OAAA,aAD/BS,EAGbG,GACAA,EAAErB,UACD,uBAEOqB,EAAEC,MAAMtB,+EAGLqB,EAAEC,MAAMtB,wCAGtB,I,wPCpEc,MAAMuB,UAGXC,EAAAA,EACRC,WACE,MAAO,EACT,CAEAC,SACE,OACEd,EAAAA,EAAAA,IAACe,EAAAA,EAAmB,CAACC,MAAOC,KAAKJ,WAAWhC,SACzCoC,KAAKC,mBAGZ,EAdmBP,EAASN,YAAA,W,wkBCJvB,MAAMc,EAAe,0EAGpBC,EAAAA,EAAAA,GAAM,gC,oGCId,SAASC,EAAUzC,GAMc,IANb,UAClB0C,EAAS,SACTC,EAAQ,UACRC,EAAS,YACTC,EAAW,WACXC,GAC6B9C,EAC7B,OACE+C,EAAAA,EAAAA,IAACC,EAAgB,CAAA/C,SAAA,EACf8C,EAAAA,EAAAA,IAACE,EAAa,CAAAhD,SAAA,EACZmB,EAAAA,EAAAA,IAAC8B,EAAS,CAAAjD,SAAEyC,IACXG,GAAeC,IACd1B,EAAAA,EAAAA,IAAC+B,EAAW,CAAAlD,SAAG,GAAE4C,MAAgBC,WAGrC1B,EAAAA,EAAAA,IAAA,OAAAnB,UACEmB,EAAAA,EAAAA,IAACgC,EAAe,CAACC,KAAMT,OAEzBxB,EAAAA,EAAAA,IAAA,OAAAnB,UACEmB,EAAAA,EAAAA,IAACgC,EAAe,CAACC,KAAMV,QAI/B,CAvBSF,EAAUhB,YAAA,aAyBnB,UAEMyB,GAAYxB,EAAAA,EAAAA,GAAO,MAAK,CAAAT,OAAA,YAAZS,CAAa,kBACZc,EAAAA,EAAAA,GAAM,IAAI,sBAGvBW,GAAczB,EAAAA,EAAAA,GAAO,MAAK,CAAAT,OAAA,YAAZS,CAAa,cAClBG,GAAKA,EAAEC,MAAMwB,uBAAqB,KAG3CF,GAAkB1B,EAAAA,EAAAA,GAAO6B,EAAAA,EAAS,CAAAtC,OAAA,YAAhBS,CAAiB,cAC1BG,GAAKA,EAAEC,MAAMwB,uBAAqB,KAG3CL,GAAgBvB,EAAAA,EAAAA,GAAO,MAAK,CAAAT,OAAA,YAAZS,CAAa,CAAA8B,KAAA,SAAAC,OAAA,WAI7BT,GAAmBtB,EAAAA,EAAAA,GAAOgC,EAAAA,GAAS,CAAAzC,OAAA,YAAhBS,CACrBa,EAAW,KC/Bf,MAAMoB,UAAuB5B,EAAAA,EAC3BE,WACE,OAAO2B,EAAAA,EAAAA,GAAE,kBACX,CAEAC,eACE,MAAO,CAAC,CAAC,SAAU,kBACrB,CAEAC,aACE,MAAM,OAACC,GAAU1B,KAAK2B,MAEtB,IAAKD,EACH,OAAO,KAGT,MAAM,OAACE,EAAM,OAAEC,EAAM,SAAEC,GAAY9B,KAAK5B,MAClC2D,EAAqB,CAACH,SAAQC,SAAQC,YAE5C,OACEpB,EAAAA,EAAAA,IAACsB,EAAAA,SAAQ,CAAApE,SAAA,EACPmB,EAAAA,EAAAA,IAACkD,EAAAA,EAAkB,CACjBlC,OAAOwB,EAAAA,EAAAA,GAAE,YACTW,MACExB,EAAAA,EAAAA,IAACyB,EAAAA,EAAO,CAACC,YAAU,EAAAxE,SAAA,EACjBmB,EAAAA,EAAAA,IAACrB,EAAAA,EAAQ,CACPM,IAAIqE,EAAAA,EAAAA,GAAc,GAAI,IAAIN,EAAoBO,UAAW,IACzDpE,OAAK,EAAAN,UAEJ2D,EAAAA,EAAAA,GAAE,eAELxC,EAAAA,EAAAA,IAACrB,EAAAA,EAAQ,CAACM,IAAIqE,EAAAA,EAAAA,GAAc,GAAIN,GAAoBnE,UACjD2D,EAAAA,EAAAA,GAAE,2BAMXb,EAAAA,EAAAA,IAAC6B,EAAAA,GAAK,CAAA3E,SAAA,EACJ8C,EAAAA,EAAAA,IAAC8B,EAAkB,CAAA5E,SAAA,EACjBmB,EAAAA,EAAAA,IAAA,OAAAnB,UAAM2D,EAAAA,EAAAA,GAAE,eACRxC,EAAAA,EAAAA,IAAA,OAAAnB,UAAM2D,EAAAA,EAAAA,GAAE,iBACRxC,EAAAA,EAAAA,IAAA,OAAAnB,UAAM2D,EAAAA,EAAAA,GAAE,mBAGVxC,EAAAA,EAAAA,IAAC0D,EAAAA,EAAS,CAAA7E,SACP8D,EAAOgB,KAAI/E,IAAA,IAAC,GAACgF,KAAOC,GAAMjF,EAAA,OACzBoB,EAAAA,EAAAA,IAACqB,EAAU,IAAcwC,GAARD,EAAiB,WAM9C,EAGF,UAEMH,GAAqBnD,EAAAA,EAAAA,GAAOwD,EAAAA,GAAW,CAAAjE,OAAA,YAAlBS,CACvBa,EAAW,4B","sources":["webpack:///./app/components/links/listLink.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/account/accountSecurity/sessionHistory/utils.tsx","webpack:///./app/views/settings/account/accountSecurity/sessionHistory/sessionRow.tsx","webpack:///./app/views/settings/account/accountSecurity/sessionHistory/index.tsx"],"sourcesContent":["import {Link as RouterLink} from 'react-router';\nimport styled from '@emotion/styled';\nimport classNames from 'classnames';\nimport {LocationDescriptor} from 'history';\nimport * as qs from 'query-string';\n\nimport useRouter from 'sentry/utils/useRouter';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\n\ntype LinkProps = Omit<React.ComponentProps<typeof RouterLink>, 'to'>;\n\ntype Props = LinkProps & {\n  /**\n   * Link target. We don't want to expose the ToLocationFunction on this component.\n   */\n  to: LocationDescriptor;\n  /**\n   * The class to apply when the link is 'active'\n   */\n  activeClassName?: string;\n  disabled?: boolean;\n  index?: boolean;\n  /**\n   * Should be should be supplied by the parent component\n   */\n  isActive?: (location: LocationDescriptor, indexOnly?: boolean) => boolean;\n  query?: string;\n};\n\nfunction ListLink({\n  children,\n  className,\n  isActive,\n  query,\n  to,\n  activeClassName = 'active',\n  index = false,\n  disabled = false,\n  ...props\n}: Props) {\n  const router = useRouter();\n  const queryData = query ? qs.parse(query) : undefined;\n  const targetLocation = typeof to === 'string' ? {pathname: to, query: queryData} : to;\n  const target = normalizeUrl(targetLocation);\n\n  const active = isActive?.(target, index) ?? router.isActive(target, index);\n\n  return (\n    <StyledLi\n      className={classNames({[activeClassName]: active}, className)}\n      disabled={disabled}\n    >\n      <RouterLink {...props} onlyActiveOnIndex={index} to={disabled ? '' : target}>\n        {children}\n      </RouterLink>\n    </StyledLi>\n  );\n}\n\nexport default ListLink;\n\nconst StyledLi = styled('li', {\n  shouldForwardProp: prop => prop !== 'disabled',\n})<{disabled?: boolean}>`\n  ${p =>\n    p.disabled &&\n    `\n   a {\n    color:${p.theme.disabled} !important;\n    pointer-events: none;\n    :hover {\n      color: ${p.theme.disabled}  !important;\n    }\n   }\n`}\n`;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\nexport type AsyncViewState = AsyncComponent['state'];\nexport type AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {space} from 'sentry/styles/space';\n\nexport const tableLayout = `\n  display: grid;\n  grid-template-columns: auto 140px 140px;\n  gap ${space(1)};\n  align-items: center;\n`;\n","import styled from '@emotion/styled';\n\nimport {PanelItem} from 'sentry/components/panels';\nimport TimeSince from 'sentry/components/timeSince';\nimport {space} from 'sentry/styles/space';\nimport {InternetProtocol} from 'sentry/types';\n\nimport {tableLayout} from './utils';\n\nfunction SessionRow({\n  ipAddress,\n  lastSeen,\n  firstSeen,\n  countryCode,\n  regionCode,\n}: Omit<InternetProtocol, 'id'>) {\n  return (\n    <SessionPanelItem>\n      <IpAndLocation>\n        <IpAddress>{ipAddress}</IpAddress>\n        {countryCode && regionCode && (\n          <CountryCode>{`${countryCode} (${regionCode})`}</CountryCode>\n        )}\n      </IpAndLocation>\n      <div>\n        <StyledTimeSince date={firstSeen} />\n      </div>\n      <div>\n        <StyledTimeSince date={lastSeen} />\n      </div>\n    </SessionPanelItem>\n  );\n}\n\nexport default SessionRow;\n\nconst IpAddress = styled('div')`\n  margin-bottom: ${space(0.5)};\n  font-weight: bold;\n`;\nconst CountryCode = styled('div')`\n  font-size: ${p => p.theme.fontSizeRelativeSmall};\n`;\n\nconst StyledTimeSince = styled(TimeSince)`\n  font-size: ${p => p.theme.fontSizeRelativeSmall};\n`;\n\nconst IpAndLocation = styled('div')`\n  flex: 1;\n`;\n\nconst SessionPanelItem = styled(PanelItem)`\n  ${tableLayout};\n`;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport ListLink from 'sentry/components/links/listLink';\nimport NavTabs from 'sentry/components/navTabs';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport {InternetProtocol} from 'sentry/types';\nimport recreateRoute from 'sentry/utils/recreateRoute';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\n\nimport SessionRow from './sessionRow';\nimport {tableLayout} from './utils';\n\ntype Props = RouteComponentProps<{}, {}>;\n\ntype State = {\n  ipList: Array<InternetProtocol> | null;\n} & AsyncView['state'];\n\nclass SessionHistory extends AsyncView<Props, State> {\n  getTitle() {\n    return t('Session History');\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [['ipList', '/users/me/ips/']];\n  }\n\n  renderBody() {\n    const {ipList} = this.state;\n\n    if (!ipList) {\n      return null;\n    }\n\n    const {routes, params, location} = this.props;\n    const recreateRouteProps = {routes, params, location};\n\n    return (\n      <Fragment>\n        <SettingsPageHeader\n          title={t('Security')}\n          tabs={\n            <NavTabs underlined>\n              <ListLink\n                to={recreateRoute('', {...recreateRouteProps, stepBack: -1})}\n                index\n              >\n                {t('Settings')}\n              </ListLink>\n              <ListLink to={recreateRoute('', recreateRouteProps)}>\n                {t('Session History')}\n              </ListLink>\n            </NavTabs>\n          }\n        />\n\n        <Panel>\n          <SessionPanelHeader>\n            <div>{t('Sessions')}</div>\n            <div>{t('First Seen')}</div>\n            <div>{t('Last Seen')}</div>\n          </SessionPanelHeader>\n\n          <PanelBody>\n            {ipList.map(({id, ...ipObj}) => (\n              <SessionRow key={id} {...ipObj} />\n            ))}\n          </PanelBody>\n        </Panel>\n      </Fragment>\n    );\n  }\n}\n\nexport default SessionHistory;\n\nconst SessionPanelHeader = styled(PanelHeader)`\n  ${tableLayout}\n  justify-content: initial;\n`;\n"],"names":["ListLink","_ref","children","className","isActive","query","to","activeClassName","index","disabled","props","router","useRouter","queryData","qs","undefined","targetLocation","pathname","target","normalizeUrl","active","_jsx","StyledLi","classNames","RouterLink","onlyActiveOnIndex","displayName","_styled","shouldForwardProp","prop","p","theme","AsyncView","AsyncComponent","getTitle","render","SentryDocumentTitle","title","this","renderComponent","tableLayout","space","SessionRow","ipAddress","lastSeen","firstSeen","countryCode","regionCode","_jsxs","SessionPanelItem","IpAndLocation","IpAddress","CountryCode","StyledTimeSince","date","fontSizeRelativeSmall","TimeSince","name","styles","PanelItem","SessionHistory","t","getEndpoints","renderBody","ipList","state","routes","params","location","recreateRouteProps","Fragment","SettingsPageHeader","tabs","NavTabs","underlined","recreateRoute","stepBack","Panel","SessionPanelHeader","PanelBody","map","id","ipObj","PanelHeader"],"sourceRoot":""}