{"version":3,"file":"chunks/app_views_settings_account_accountSecurity_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/forms/formPanel.tsx","webpack:///./app/components/forms/jsonForm.tsx","webpack:///./app/components/links/listLink.tsx","webpack:///./app/data/forms/accountPassword.tsx","webpack:///./app/utils/getPendingInvite.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/account/accountSecurity/components/confirmHeader.tsx","webpack:///./app/views/settings/account/accountSecurity/components/removeConfirm.tsx","webpack:///./app/views/settings/account/accountSecurity/components/twoFactorRequired.tsx","webpack:///./app/views/settings/account/passwordForm.tsx","webpack:///./app/views/settings/account/accountSecurity/index.tsx"],"sourcesContent":["import {useCallback, useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport FieldFromConfig from 'sentry/components/forms/fieldFromConfig';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {IconChevron} from 'sentry/icons';\nimport {Scope} from 'sentry/types';\nimport {sanitizeQuerySelector} from 'sentry/utils/sanitizeQuerySelector';\n\nimport {FieldObject, JsonFormObject} from './types';\n\ntype Props = {\n  /**\n   * List of fields to render\n   */\n  fields: FieldObject[];\n  access?: Set<Scope>;\n  additionalFieldProps?: {[key: string]: any};\n  /**\n   * Can the PanelBody be hidden with a click?\n   */\n  collapsible?: boolean;\n  /**\n   * Disables the entire form\n   */\n  disabled?: boolean;\n  features?: Record<string, any>;\n  /**\n   * The name of the field that should be highlighted\n   */\n  highlighted?: string;\n  initiallyCollapsed?: boolean;\n  /**\n   * Renders inside of PanelBody before PanelBody close\n   */\n  renderFooter?: (arg: JsonFormObject) => React.ReactNode;\n  /**\n   * Renders inside of PanelBody at the start\n   */\n  renderHeader?: (arg: JsonFormObject) => React.ReactNode;\n  /**\n   * Panel title\n   */\n  title?: React.ReactNode;\n};\n\nfunction FormPanel({\n  additionalFieldProps = {},\n  title,\n  fields,\n  access,\n  disabled,\n  renderFooter,\n  renderHeader,\n  collapsible,\n  initiallyCollapsed = false,\n  ...otherProps\n}: Props) {\n  const [collapsed, setCollapse] = useState(initiallyCollapsed);\n  const handleCollapseToggle = useCallback(() => setCollapse(current => !current), []);\n\n  return (\n    <Panel id={typeof title === 'string' ? sanitizeQuerySelector(title) : undefined}>\n      {title && (\n        <PanelHeader>\n          {title}\n          {collapsible && (\n            <Collapse onClick={handleCollapseToggle}>\n              <IconChevron\n                data-test-id=\"form-panel-collapse-chevron\"\n                direction={collapsed ? 'down' : 'up'}\n                size=\"xs\"\n              />\n            </Collapse>\n          )}\n        </PanelHeader>\n      )}\n      <PanelBody hidden={collapsed}>\n        {typeof renderHeader === 'function' && renderHeader({title, fields})}\n\n        {fields.map(field => {\n          if (typeof field === 'function') {\n            return field();\n          }\n\n          const {defaultValue: _, ...fieldWithoutDefaultValue} = field;\n\n          // Allow the form panel disabled prop to override the fields\n          // disabled prop, with fallback to the fields disabled state.\n          if (disabled === true) {\n            fieldWithoutDefaultValue.disabled = true;\n            fieldWithoutDefaultValue.disabledReason = undefined;\n          }\n\n          return (\n            <FieldFromConfig\n              access={access}\n              disabled={disabled}\n              key={field.name}\n              {...otherProps}\n              {...additionalFieldProps}\n              field={fieldWithoutDefaultValue}\n              highlighted={otherProps.highlighted === `#${field.name}`}\n            />\n          );\n        })}\n        {typeof renderFooter === 'function' && renderFooter({title, fields})}\n      </PanelBody>\n    </Panel>\n  );\n}\n\nexport default FormPanel;\n\nconst Collapse = styled('span')`\n  cursor: pointer;\n`;\n","import {Component, Fragment} from 'react';\nimport {WithRouterProps} from 'react-router';\nimport * as Sentry from '@sentry/react';\nimport scrollToElement from 'scroll-to-element';\n\nimport {defined} from 'sentry/utils';\nimport {sanitizeQuerySelector} from 'sentry/utils/sanitizeQuerySelector';\n// eslint-disable-next-line no-restricted-imports\nimport withSentryRouter from 'sentry/utils/withSentryRouter';\n\nimport FormPanel from './formPanel';\nimport {Field, FieldObject, JsonFormObject} from './types';\n\ntype Props = {\n  additionalFieldProps?: {[key: string]: any};\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n} & WithRouterProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends Component<Props, State> {\n  state: State = {\n    // location.hash is optional because of tests.\n    highlighted: this.props.location?.hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.location && this.props.location.hash !== prevProps.location.hash) {\n      const hash = this.props.location.hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    // location.hash is optional because of tests.\n    const hash = toHash || this.props.location?.hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      collapsible,\n      initiallyCollapsed,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      params: _params,\n      router: _router,\n      routes: _routes,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n      collapsible,\n      initiallyCollapsed,\n    };\n\n    return (\n      <div {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <Fragment key={i}>{this.renderForm({formPanelProps, ...formGroup})}</Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </div>\n    );\n  }\n}\n\nexport default withSentryRouter(JsonForm);\n","import {Link as RouterLink} from 'react-router';\nimport styled from '@emotion/styled';\nimport classNames from 'classnames';\nimport {LocationDescriptor} from 'history';\nimport * as qs from 'query-string';\n\nimport useRouter from 'sentry/utils/useRouter';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\n\ntype LinkProps = Omit<React.ComponentProps<typeof RouterLink>, 'to'>;\n\ntype Props = LinkProps & {\n  /**\n   * Link target. We don't want to expose the ToLocationFunction on this component.\n   */\n  to: LocationDescriptor;\n  /**\n   * The class to apply when the link is 'active'\n   */\n  activeClassName?: string;\n  disabled?: boolean;\n  index?: boolean;\n  /**\n   * Should be should be supplied by the parent component\n   */\n  isActive?: (location: LocationDescriptor, indexOnly?: boolean) => boolean;\n  query?: string;\n};\n\nfunction ListLink({\n  children,\n  className,\n  isActive,\n  query,\n  to,\n  activeClassName = 'active',\n  index = false,\n  disabled = false,\n  ...props\n}: Props) {\n  const router = useRouter();\n  const queryData = query ? qs.parse(query) : undefined;\n  const targetLocation = typeof to === 'string' ? {pathname: to, query: queryData} : to;\n  const target = normalizeUrl(targetLocation);\n\n  const active = isActive?.(target, index) ?? router.isActive(target, index);\n\n  return (\n    <StyledLi\n      className={classNames({[activeClassName]: active}, className)}\n      disabled={disabled}\n    >\n      <RouterLink {...props} onlyActiveOnIndex={index} to={disabled ? '' : target}>\n        {children}\n      </RouterLink>\n    </StyledLi>\n  );\n}\n\nexport default ListLink;\n\nconst StyledLi = styled('li', {\n  shouldForwardProp: prop => prop !== 'disabled',\n})<{disabled?: boolean}>`\n  ${p =>\n    p.disabled &&\n    `\n   a {\n    color:${p.theme.disabled} !important;\n    pointer-events: none;\n    :hover {\n      color: ${p.theme.disabled}  !important;\n    }\n   }\n`}\n`;\n","import {JsonFormObject} from 'sentry/components/forms/types';\nimport {t} from 'sentry/locale';\n\nconst getUserIsNotManaged = ({user}) => !user.isManaged;\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: 'Password',\n    fields: [\n      {\n        name: 'password',\n        type: 'secret',\n        autoComplete: 'current-password',\n        label: t('Current Password'),\n        help: t('Your current password'),\n        placeholder: '',\n        visible: getUserIsNotManaged,\n        required: true,\n      },\n      {\n        name: 'passwordNew',\n        type: 'secret',\n        autoComplete: 'new-password',\n        label: t('New Password'),\n        placeholder: '',\n        required: true,\n        visible: getUserIsNotManaged,\n        validate: ({id, form}) => (form[id] !== form.passwordVerify ? [[id, '']] : []),\n      },\n      {\n        name: 'passwordVerify',\n        type: 'secret',\n        autoComplete: 'new-password',\n        label: t('Verify New Password'),\n        help: t('Verify your new password'),\n        placeholder: '',\n        required: true,\n        visible: getUserIsNotManaged,\n        validate: ({id, form}) => {\n          // If password is set, and passwords don't match, then return an error\n          if (form.passwordNew && form.passwordNew !== form[id]) {\n            return [[id, t('Passwords do not match')]];\n          }\n\n          return [];\n        },\n      },\n    ],\n  },\n];\n\nexport const route = '/settings/account/security/';\nexport default formGroups;\n","import Cookies from 'js-cookie';\nimport * as qs from 'query-string';\n\ntype PendingInvite = {\n  memberId: number;\n  token: string;\n  url: string;\n};\n\nexport default function getPendingInvite(): PendingInvite | null {\n  const data = Cookies.get('pending-invite');\n\n  if (!data) {\n    return null;\n  }\n\n  return qs.parse(data) as any;\n}\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\nexport type AsyncViewState = AsyncComponent['state'];\nexport type AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import styled from '@emotion/styled';\n\nconst ConfirmHeader = styled('div')`\n  font-size: 1.2em;\n  margin-bottom: 10px;\n`;\n\nexport default ConfirmHeader;\n","import {Fragment} from 'react';\n\nimport Confirm from 'sentry/components/confirm';\nimport {t} from 'sentry/locale';\nimport ConfirmHeader from 'sentry/views/settings/account/accountSecurity/components/confirmHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\ntype Props = React.ComponentProps<typeof Confirm>;\n\nconst message = (\n  <Fragment>\n    <ConfirmHeader>{t('Do you want to remove this method?')}</ConfirmHeader>\n    <TextBlock>\n      {t(\n        'Removing the last authentication method will disable two-factor authentication completely.'\n      )}\n    </TextBlock>\n  </Fragment>\n);\n\nfunction RemoveConfirm(props: Props) {\n  return <Confirm {...props} message={message} />;\n}\n\nexport default RemoveConfirm;\n","import styled from '@emotion/styled';\n\nimport {Alert} from 'sentry/components/alert';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport getPendingInvite from 'sentry/utils/getPendingInvite';\n\nfunction TwoFactorRequired() {\n  return !getPendingInvite() ? null : (\n    <StyledAlert data-test-id=\"require-2fa\" type=\"error\" showIcon>\n      {tct(\n        'You have been invited to an organization that requires [link:two-factor authentication]. Setup two-factor authentication below to join your organization.',\n        {\n          link: <ExternalLink href=\"https://docs.sentry.io/accounts/require-2fa/\" />,\n        }\n      )}\n    </StyledAlert>\n  );\n}\n\nconst StyledAlert = styled(Alert)`\n  margin: ${space(3)} 0;\n`;\n\nexport default TwoFactorRequired;\n","import styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {Button} from 'sentry/components/button';\nimport Form, {FormProps} from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport {PanelAlert, PanelItem} from 'sentry/components/panels';\nimport accountPasswordFields from 'sentry/data/forms/accountPassword';\nimport {t} from 'sentry/locale';\nimport ConfigStore from 'sentry/stores/configStore';\n\ntype OnSubmitSuccess = Parameters<NonNullable<FormProps['onSubmitSuccess']>>;\n\nfunction PasswordForm() {\n  function handleSubmitSuccess(_change: OnSubmitSuccess[0], model: OnSubmitSuccess[1]) {\n    // Reset form on success\n    model.resetForm();\n    addSuccessMessage('Password has been changed');\n  }\n\n  function handleSubmitError() {\n    addErrorMessage('Error changing password');\n  }\n\n  const user = ConfigStore.get('user');\n\n  return (\n    <Form\n      apiMethod=\"PUT\"\n      apiEndpoint=\"/users/me/password/\"\n      initialData={{}}\n      onSubmitSuccess={handleSubmitSuccess}\n      onSubmitError={handleSubmitError}\n      hideFooter\n    >\n      <JsonForm\n        forms={accountPasswordFields}\n        additionalFieldProps={{user}}\n        renderFooter={() => (\n          <Actions>\n            <Button type=\"submit\" priority=\"primary\">\n              {t('Change password')}\n            </Button>\n          </Actions>\n        )}\n        renderHeader={() => (\n          <PanelAlert type=\"info\">\n            {t('Changing your password will invalidate all logged in sessions.')}\n          </PanelAlert>\n        )}\n      />\n    </Form>\n  );\n}\n\nconst Actions = styled(PanelItem)`\n  justify-content: flex-end;\n`;\n\nexport default PasswordForm;\n","import {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {openEmailVerification} from 'sentry/actionCreators/modal';\nimport {Button} from 'sentry/components/button';\nimport CircleIndicator from 'sentry/components/circleIndicator';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport FieldGroup from 'sentry/components/forms/fieldGroup';\nimport ListLink from 'sentry/components/links/listLink';\nimport NavTabs from 'sentry/components/navTabs';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'sentry/components/panels';\nimport {Tooltip} from 'sentry/components/tooltip';\nimport {IconDelete} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Authenticator, OrganizationSummary} from 'sentry/types';\nimport recreateRoute from 'sentry/utils/recreateRoute';\nimport AsyncView from 'sentry/views/asyncView';\nimport RemoveConfirm from 'sentry/views/settings/account/accountSecurity/components/removeConfirm';\nimport TwoFactorRequired from 'sentry/views/settings/account/accountSecurity/components/twoFactorRequired';\nimport PasswordForm from 'sentry/views/settings/account/passwordForm';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\ntype Props = {\n  authenticators: Authenticator[] | null;\n  countEnrolled: number;\n  deleteDisabled: boolean;\n  handleRefresh: () => void;\n  hasVerifiedEmail: boolean;\n  onDisable: (auth: Authenticator) => void;\n  orgsRequire2fa: OrganizationSummary[];\n} & AsyncView['props'] &\n  RouteComponentProps<{}, {}>;\n\n/**\n * Lists 2fa devices + password change form\n */\nclass AccountSecurity extends AsyncView<Props> {\n  getTitle() {\n    return t('Security');\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [];\n  }\n\n  handleSessionClose = async () => {\n    try {\n      await this.api.requestPromise('/auth/', {\n        method: 'DELETE',\n        data: {all: true},\n      });\n      window.location.assign('/auth/login/');\n    } catch (err) {\n      addErrorMessage(t('There was a problem closing all sessions'));\n      throw err;\n    }\n  };\n\n  formatOrgSlugs = () => {\n    const {orgsRequire2fa} = this.props;\n    const slugs = orgsRequire2fa.map(({slug}) => slug);\n\n    return [slugs.slice(0, -1).join(', '), slugs.slice(-1)[0]].join(\n      slugs.length > 1 ? ' and ' : ''\n    );\n  };\n\n  handleAdd2FAClicked = () => {\n    const {handleRefresh} = this.props;\n    openEmailVerification({\n      onClose: () => {\n        handleRefresh();\n      },\n      actionMessage: 'enrolling a 2FA device',\n    });\n  };\n\n  renderBody() {\n    const {authenticators, countEnrolled, deleteDisabled, onDisable, hasVerifiedEmail} =\n      this.props;\n    const isEmpty = !authenticators?.length;\n\n    return (\n      <div>\n        <SettingsPageHeader\n          title={t('Security')}\n          tabs={\n            <NavTabs underlined>\n              <ListLink to={recreateRoute('', this.props)} index>\n                {t('Settings')}\n              </ListLink>\n              <ListLink to={recreateRoute('session-history/', this.props)}>\n                {t('Session History')}\n              </ListLink>\n            </NavTabs>\n          }\n        />\n\n        {!isEmpty && countEnrolled === 0 && <TwoFactorRequired />}\n\n        <PasswordForm />\n\n        <Panel>\n          <PanelHeader>{t('Sessions')}</PanelHeader>\n          <PanelBody>\n            <FieldGroup\n              alignRight\n              flexibleControlStateSize\n              label={t('Sign out of all devices')}\n              help={t(\n                'Signing out of all devices will sign you out of this device as well.'\n              )}\n            >\n              <Button onClick={this.handleSessionClose}>\n                {t('Sign out of all devices')}\n              </Button>\n            </FieldGroup>\n          </PanelBody>\n        </Panel>\n\n        <Panel>\n          <PanelHeader>{t('Two-Factor Authentication')}</PanelHeader>\n\n          {isEmpty && (\n            <EmptyMessage>{t('No available authenticators to add')}</EmptyMessage>\n          )}\n\n          <PanelBody>\n            {!isEmpty &&\n              authenticators?.map(auth => {\n                const {\n                  id,\n                  authId,\n                  description,\n                  isBackupInterface,\n                  isEnrolled,\n                  disallowNewEnrollment,\n                  configureButton,\n                  name,\n                } = auth;\n                if (disallowNewEnrollment && !isEnrolled) {\n                  return null;\n                }\n                return (\n                  <AuthenticatorPanelItem key={id}>\n                    <AuthenticatorHeader>\n                      <AuthenticatorTitle>\n                        <AuthenticatorStatus\n                          role=\"status\"\n                          aria-label={\n                            isEnrolled\n                              ? t('Authentication Method Active')\n                              : t('Authentication Method Inactive')\n                          }\n                          enabled={isEnrolled}\n                        />\n                        <AuthenticatorName>{name}</AuthenticatorName>\n                      </AuthenticatorTitle>\n\n                      <Actions>\n                        {!isBackupInterface && !isEnrolled && hasVerifiedEmail && (\n                          <Button\n                            to={`/settings/account/security/mfa/${id}/enroll/`}\n                            size=\"sm\"\n                            priority=\"primary\"\n                          >\n                            {t('Add')}\n                          </Button>\n                        )}\n                        {!isBackupInterface && !isEnrolled && !hasVerifiedEmail && (\n                          <Button\n                            onClick={this.handleAdd2FAClicked}\n                            size=\"sm\"\n                            priority=\"primary\"\n                          >\n                            {t('Add')}\n                          </Button>\n                        )}\n\n                        {isEnrolled && authId && (\n                          <Button\n                            to={`/settings/account/security/mfa/${authId}/`}\n                            size=\"sm\"\n                          >\n                            {configureButton}\n                          </Button>\n                        )}\n\n                        {!isBackupInterface && isEnrolled && (\n                          <Tooltip\n                            title={t(\n                              `Two-factor authentication is required for organization(s): %s.`,\n                              this.formatOrgSlugs()\n                            )}\n                            disabled={!deleteDisabled}\n                          >\n                            <RemoveConfirm\n                              onConfirm={() => onDisable(auth)}\n                              disabled={deleteDisabled}\n                            >\n                              <Button\n                                size=\"sm\"\n                                aria-label={t('Delete')}\n                                icon={<IconDelete />}\n                              />\n                            </RemoveConfirm>\n                          </Tooltip>\n                        )}\n                      </Actions>\n\n                      {isBackupInterface && !isEnrolled ? t('requires 2FA') : null}\n                    </AuthenticatorHeader>\n\n                    <Description>{description}</Description>\n                  </AuthenticatorPanelItem>\n                );\n              })}\n          </PanelBody>\n        </Panel>\n      </div>\n    );\n  }\n}\n\nconst AuthenticatorName = styled('span')`\n  font-size: 1.2em;\n`;\n\nconst AuthenticatorPanelItem = styled(PanelItem)`\n  flex-direction: column;\n`;\n\nconst AuthenticatorHeader = styled('div')`\n  display: flex;\n  flex: 1;\n  align-items: center;\n`;\n\nconst AuthenticatorTitle = styled('div')`\n  flex: 1;\n`;\n\nconst Actions = styled('div')`\n  display: grid;\n  grid-auto-flow: column;\n  gap: ${space(1)};\n`;\n\nconst AuthenticatorStatus = styled(CircleIndicator)`\n  margin-right: ${space(1)};\n`;\n\nconst Description = styled(TextBlock)`\n  margin-top: ${space(2)};\n  margin-bottom: 0;\n`;\n\nexport default AccountSecurity;\n"],"names":["FormPanel","_ref","additionalFieldProps","title","fields","access","disabled","renderFooter","renderHeader","collapsible","initiallyCollapsed","otherProps","collapsed","setCollapse","useState","handleCollapseToggle","useCallback","current","_jsxs","Panel","id","sanitizeQuerySelector","undefined","children","PanelHeader","_jsx","Collapse","onClick","IconChevron","direction","size","PanelBody","hidden","map","field","defaultValue","_","fieldWithoutDefaultValue","disabledReason","FieldFromConfig","highlighted","name","displayName","_styled","target","styles","JsonForm","Component","constructor","arguments","_defineProperty","this","props","location","hash","componentDidMount","scrollToHash","componentDidUpdate","prevProps","setState","toHash","scrollToElement","decodeURIComponent","align","offset","err","Sentry","shouldDisplayForm","fieldsWithVisibleProp","filter","defined","visible","length","every","renderForm","formPanelProps","render","forms","features","_location","params","_params","router","_router","routes","_routes","state","formGroup","i","Fragment","withSentryRouter","ListLink","className","isActive","query","to","activeClassName","index","useRouter","queryData","qs","targetLocation","pathname","normalizeUrl","active","StyledLi","classNames","RouterLink","onlyActiveOnIndex","shouldForwardProp","prop","p","theme","getUserIsNotManaged","user","isManaged","formGroups","type","autoComplete","label","t","help","placeholder","required","validate","_ref2","form","passwordVerify","_ref3","passwordNew","route","getPendingInvite","data","Cookies","get","AsyncView","AsyncComponent","getTitle","SentryDocumentTitle","renderComponent","message","ConfirmHeader","TextBlock","RemoveConfirm","Confirm","StyledAlert","Alert","space","showIcon","tct","link","ExternalLink","href","PasswordForm","ConfigStore","Form","apiMethod","apiEndpoint","initialData","onSubmitSuccess","_change","model","resetForm","addSuccessMessage","onSubmitError","addErrorMessage","hideFooter","accountPasswordFields","Actions","Button","priority","PanelAlert","PanelItem","AccountSecurity","async","api","requestPromise","method","all","window","assign","orgsRequire2fa","slugs","slug","slice","join","handleRefresh","openEmailVerification","onClose","actionMessage","getEndpoints","renderBody","authenticators","countEnrolled","deleteDisabled","onDisable","hasVerifiedEmail","isEmpty","SettingsPageHeader","tabs","NavTabs","underlined","recreateRoute","TwoFactorRequired","FieldGroup","alignRight","flexibleControlStateSize","handleSessionClose","EmptyMessage","auth","authId","description","isBackupInterface","isEnrolled","disallowNewEnrollment","configureButton","AuthenticatorPanelItem","AuthenticatorHeader","AuthenticatorTitle","AuthenticatorStatus","role","enabled","AuthenticatorName","handleAdd2FAClicked","Tooltip","formatOrgSlugs","onConfirm","icon","IconDelete","Description","CircleIndicator"],"sourceRoot":""}