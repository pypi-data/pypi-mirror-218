{"version":3,"file":"chunks/app_views_starfish_views_webServiceView_index_tsx-node_modules_lodash_omitBy_js.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/performance/layouts.tsx","webpack:///./app/utils/performance/contexts/pageError.tsx","webpack:///./app/views/starfish/components/tableCells/throughputCell.tsx","webpack:///./app/views/starfish/utils/generatePerformanceEventView.tsx","webpack:///./app/views/starfish/components/miniChartPanel.tsx","webpack:///./app/views/starfish/views/webServiceView/endpointList.tsx","webpack:///./app/views/starfish/views/webServiceView/starfishView.tsx","webpack:///./app/views/starfish/views/webServiceView/starfishLanding.tsx","webpack:///./app/views/starfish/views/webServiceView/index.tsx","webpack:///../node_modules/lodash/negate.js","webpack:///../node_modules/lodash/omitBy.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport {space} from 'sentry/styles/space';\n\n/**\n * Common performance layouts\n */\n\nexport const PerformanceLayoutBodyRow = styled('div')<{\n  minSize: number;\n  columns?: number;\n}>`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-column-gap: ${space(2)};\n  grid-row-gap: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    ${p =>\n      p.columns\n        ? `\n    grid-template-columns: repeat(${p.columns}, 1fr);\n    `\n        : `\n    grid-template-columns: repeat(auto-fit, minmax(${p.minSize}px, 1fr));\n    `}\n  }\n`;\n","import {createContext, useContext, useState} from 'react';\n\nimport {Alert} from 'sentry/components/alert';\n\nconst pageErrorContext = createContext<{\n  setPageError: (error: string | undefined) => void;\n  pageError?: string;\n}>({\n  pageError: undefined,\n  setPageError: (_: string | undefined) => {},\n});\n\nexport function PageErrorProvider({children}: {children: React.ReactNode}) {\n  const [pageError, setPageError] = useState<string | undefined>();\n  return (\n    <pageErrorContext.Provider\n      value={{\n        pageError,\n        setPageError,\n      }}\n    >\n      {children}\n    </pageErrorContext.Provider>\n  );\n}\n\nexport function PageErrorAlert() {\n  const {pageError} = useContext(pageErrorContext);\n  if (!pageError) {\n    return null;\n  }\n\n  return (\n    <Alert type=\"error\" data-test-id=\"page-error-alert\" showIcon>\n      {pageError}\n    </Alert>\n  );\n}\n\nexport const usePageError = () => useContext(pageErrorContext);\n","import {t} from 'sentry/locale';\nimport {NumberContainer} from 'sentry/utils/discover/styles';\nimport {formatAbbreviatedNumber} from 'sentry/utils/formatters';\n\ntype Props = {\n  containerProps?: React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLDivElement>,\n    HTMLDivElement\n  >;\n  throughputPerSecond?: number;\n};\n\nexport default function ThroughputCell({throughputPerSecond, containerProps}: Props) {\n  const throughput = throughputPerSecond ? throughputPerSecond.toFixed(2) : '--';\n\n  return (\n    <NumberContainer {...containerProps}>\n      {formatAbbreviatedNumber(throughput)}/{t('s')}\n    </NumberContainer>\n  );\n}\n","import {Location} from 'history';\n\nimport {COL_WIDTH_UNDEFINED} from 'sentry/components/gridEditable';\nimport {wrapQueryInWildcards} from 'sentry/components/performance/searchBar';\nimport {t} from 'sentry/locale';\nimport {NewQuery, Organization} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {DiscoverDatasets} from 'sentry/utils/discover/types';\nimport {WEB_VITAL_DETAILS} from 'sentry/utils/performance/vitals/constants';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport {getCurrentTrendParameter} from 'sentry/views/performance/trends/utils';\n\nconst DEFAULT_STATS_PERIOD = '7d';\n\nconst TOKEN_KEYS_SUPPORTED_IN_LIMITED_SEARCH = ['transaction'];\nexport const TIME_SPENT_IN_SERVICE = 'time_spent_percentage()';\n\nexport const getDefaultStatsPeriod = (organization: Organization) => {\n  if (organization?.features?.includes('performance-landing-page-stats-period')) {\n    return '14d';\n  }\n  return DEFAULT_STATS_PERIOD;\n};\n\nfunction prepareQueryForLandingPage(searchQuery, withStaticFilters) {\n  const conditions = new MutableSearch(searchQuery);\n\n  // If there is a bare text search, we want to treat it as a search\n  // on the transaction name.\n  if (conditions.freeText.length > 0) {\n    const parsedFreeText = conditions.freeText.join(' ');\n\n    // the query here is a user entered condition, no need to escape it\n    conditions.setFilterValues(\n      'transaction',\n      [wrapQueryInWildcards(parsedFreeText)],\n      false\n    );\n    conditions.freeText = [];\n  }\n  if (withStaticFilters) {\n    conditions.tokens = conditions.tokens.filter(\n      token => token.key && TOKEN_KEYS_SUPPORTED_IN_LIMITED_SEARCH.includes(token.key)\n    );\n  }\n  return conditions.formatString();\n}\n\nfunction generateGenericPerformanceEventView(\n  location: Location,\n  withStaticFilters: boolean,\n  organization: Organization\n): EventView {\n  const {query} = location;\n\n  const fields = ['transaction', 'http.method', 'tpm()', 'p50()', 'p95()', 'project'];\n\n  const hasStartAndEnd = query.start && query.end;\n  const savedQuery: NewQuery = {\n    id: undefined,\n    name: t('Performance'),\n    query: 'event.type:transaction has:http.method',\n    fields,\n    version: 2,\n  };\n\n  const widths = Array(savedQuery.fields.length).fill(COL_WIDTH_UNDEFINED);\n  widths[savedQuery.fields.length - 1] = '110';\n  savedQuery.widths = widths;\n\n  if (!query.statsPeriod && !hasStartAndEnd) {\n    savedQuery.range = getDefaultStatsPeriod(organization);\n  }\n  savedQuery.orderby = decodeScalar(query.sort, '-tpm');\n\n  const searchQuery = decodeScalar(query.query, '');\n  savedQuery.query = prepareQueryForLandingPage(searchQuery, withStaticFilters);\n\n  const eventView = EventView.fromNewQueryWithLocation(savedQuery, location);\n  eventView.additionalConditions.addFilterValues('event.type', ['transaction']);\n\n  if (query.trendParameter) {\n    // projects and projectIds are not necessary here since trendParameter will always\n    // be present in location and will not be determined based on the project type\n    const trendParameter = getCurrentTrendParameter(location, [], []);\n    if (WEB_VITAL_DETAILS[trendParameter.column]) {\n      eventView.additionalConditions.addFilterValues('has', [trendParameter.column]);\n    }\n  }\n\n  return eventView;\n}\n\nexport function generatePerformanceEventView(\n  location: Location,\n  {isTrends = false, withStaticFilters = false} = {},\n  organization: Organization\n) {\n  const eventView = generateGenericPerformanceEventView(\n    location,\n    withStaticFilters,\n    organization\n  );\n  if (isTrends) {\n    return eventView;\n  }\n\n  return eventView;\n}\n\nexport function generateWebServiceEventView(\n  location: Location,\n  {withStaticFilters = false} = {},\n  organization: Organization\n) {\n  const {query} = location;\n  const hasStartAndEnd = query.start && query.end;\n  const orderby = decodeScalar(query.sort, `-time_spent_percentage`);\n\n  const fields = [\n    'transaction',\n    'http.method',\n    'tps()',\n    'tps_percent_change()',\n    'p95(transaction.duration)',\n    'percentile_percent_change(transaction.duration,0.95)',\n    'http_error_count()',\n    'http_error_count_percent_change()',\n    'time_spent_percentage()',\n    'sum(transaction.duration)',\n  ];\n\n  const savedQuery: NewQuery = {\n    id: undefined,\n    name: t('Performance'),\n    query: 'event.type:transaction has:http.method transaction.op:http.server',\n    fields,\n    version: 2,\n    dataset: DiscoverDatasets.METRICS,\n  };\n\n  const widths = Array(savedQuery.fields.length).fill(COL_WIDTH_UNDEFINED);\n  widths[savedQuery.fields.length - 1] = '110';\n  savedQuery.widths = widths;\n\n  if (!query.statsPeriod && !hasStartAndEnd) {\n    savedQuery.range = getDefaultStatsPeriod(organization);\n  }\n  savedQuery.orderby = orderby;\n\n  const searchQuery = decodeScalar(query.query, '');\n  savedQuery.query = `${savedQuery.query} ${prepareQueryForLandingPage(\n    searchQuery,\n    withStaticFilters\n  )}`;\n\n  const eventView = EventView.fromNewQueryWithLocation(savedQuery, location);\n\n  return eventView;\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {Panel} from 'sentry/components/panels';\nimport {space} from 'sentry/styles/space';\nimport textStyles from 'sentry/styles/text';\n\ntype Props = {\n  children: React.ReactNode;\n  button?: JSX.Element;\n  subtitle?: string;\n  title?: string;\n};\n\nexport default function MiniChartPanel({title, children, button, subtitle}: Props) {\n  return (\n    <Panel>\n      <PanelBody>\n        <HeaderContainer>\n          <Header>\n            {title && <ChartLabel>{title}</ChartLabel>}\n            {button}\n          </Header>\n          {subtitle && <Subtitle>{subtitle}</Subtitle>}\n        </HeaderContainer>\n        {children}\n      </PanelBody>\n    </Panel>\n  );\n}\n\nconst ChartLabel = styled('p')`\n  ${p => p.theme.text.cardTitle}\n`;\n\nconst HeaderContainer = styled('div')`\n  padding: 0 ${space(1)} ${space(1)} 0;\n`;\n\nconst Header = styled('div')`\n  min-height: 24px;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst PanelBody = styled('div')`\n  padding: ${space(1.5)} ${space(2)};\n  ${textStyles};\n`;\n\nconst Subtitle = styled('span')`\n  color: ${p => p.theme.gray300};\n  font-size: ${p => p.theme.fontSizeMedium};\n  display: inline-block;\n`;\n","import {Fragment, useEffect, useState} from 'react';\nimport styled from '@emotion/styled';\nimport {Location, LocationDescriptorObject} from 'history';\nimport * as qs from 'query-string';\n\nimport GuideAnchor from 'sentry/components/assistant/guideAnchor';\nimport Duration from 'sentry/components/duration';\nimport GridEditable, {\n  COL_WIDTH_UNDEFINED,\n  GridColumn,\n} from 'sentry/components/gridEditable';\nimport SortLink, {Alignments} from 'sentry/components/gridEditable/sortLink';\nimport Link from 'sentry/components/links/link';\nimport Pagination from 'sentry/components/pagination';\nimport BaseSearchBar from 'sentry/components/searchBar';\nimport {Tooltip} from 'sentry/components/tooltip';\nimport {t, tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport DiscoverQuery, {\n  TableData,\n  TableDataRow,\n} from 'sentry/utils/discover/discoverQuery';\nimport EventView, {isFieldSortable, MetaType} from 'sentry/utils/discover/eventView';\nimport {getFieldRenderer} from 'sentry/utils/discover/fieldRenderers';\nimport {getAggregateAlias} from 'sentry/utils/discover/fields';\nimport {NumberContainer} from 'sentry/utils/discover/styles';\nimport {formatPercentage} from 'sentry/utils/formatters';\nimport {TableColumn} from 'sentry/views/discover/table/types';\nimport ThroughputCell from 'sentry/views/starfish/components/tableCells/throughputCell';\nimport {TIME_SPENT_IN_SERVICE} from 'sentry/views/starfish/utils/generatePerformanceEventView';\nimport {DataTitles} from 'sentry/views/starfish/views/spans/types';\n\nconst COLUMN_TITLES = [\n  t('Endpoint'),\n  DataTitles.throughput,\n  t('Change'),\n  DataTitles.p95,\n  t('Change'),\n  DataTitles.errorCount,\n  t('Change'),\n  DataTitles.timeSpent,\n];\n\ntype Props = {\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n  setError: (msg: string | undefined) => void;\n};\n\nfunction EndpointList({eventView, location, organization, setError}: Props) {\n  const [widths, setWidths] = useState<number[]>([]);\n  const [_eventView, setEventView] = useState<EventView>(eventView);\n\n  // Effect to keep the parent eventView in sync with the child, so that chart zoom and time period can be accounted for.\n\n  useEffect(() => {\n    setEventView(prevEventView => {\n      const cloned = eventView.clone();\n      cloned.query = prevEventView.query;\n      return cloned;\n    });\n  }, [eventView]);\n\n  function renderBodyCell(\n    tableData: TableData | null,\n    column: TableColumn<keyof TableDataRow>,\n    dataRow: TableDataRow,\n    _deltaColumnMap: Record<string, string>\n  ): React.ReactNode {\n    if (!tableData || !tableData.meta) {\n      return dataRow[column.key];\n    }\n    const tableMeta = tableData.meta;\n\n    const field = String(column.key);\n    const fieldRenderer = getFieldRenderer(field, tableMeta, false);\n    const rendered = fieldRenderer(dataRow, {organization, location});\n\n    if (field === 'transaction') {\n      let prefix = '';\n      if (dataRow['http.method']) {\n        prefix = `${dataRow['http.method']} `;\n      }\n\n      return (\n        <Link\n          to={`/organizations/${\n            organization.slug\n          }/starfish/endpoint-overview/?${qs.stringify({\n            endpoint: dataRow.transaction,\n            'http.method': dataRow['http.method'],\n            statsPeriod: eventView.statsPeriod,\n            project: eventView.project,\n            start: eventView.start,\n            end: eventView.end,\n          })}`}\n          style={{display: `block`, width: `100%`}}\n          onClick={() => {\n            trackAnalytics('starfish.web_service_view.endpoint_list.endpoint.clicked', {\n              organization,\n              endpoint: dataRow.transaction,\n            });\n          }}\n        >\n          {prefix}\n          {dataRow.transaction}\n        </Link>\n      );\n    }\n\n    if (field === TIME_SPENT_IN_SERVICE) {\n      const cumulativeTime = Number(dataRow['sum(transaction.duration)']);\n      const cumulativeTimePercentage = Number(dataRow[TIME_SPENT_IN_SERVICE]);\n      return (\n        <Tooltip\n          title={tct('Total time spent by endpoint is [cumulativeTime])', {\n            cumulativeTime: (\n              <Duration seconds={cumulativeTime / 1000} fixedDigits={2} abbreviation />\n            ),\n          })}\n          containerDisplayMode=\"block\"\n          position=\"top\"\n        >\n          <NumberContainer>{formatPercentage(cumulativeTimePercentage)}</NumberContainer>\n        </Tooltip>\n      );\n    }\n\n    // TODO: This can be removed if/when the backend returns this field's type\n    // as `\"rate\"` and its unit as `\"1/second\"\n    if (field === 'tps()') {\n      return <ThroughputCell throughputPerSecond={dataRow[field] as number} />;\n    }\n\n    if (field === 'project') {\n      return null;\n    }\n\n    const fieldName = getAggregateAlias(field);\n    const value = dataRow[fieldName];\n    if (tableMeta[fieldName] === 'integer' && typeof value === 'number' && value > 999) {\n      return (\n        <Tooltip\n          title={value.toLocaleString()}\n          containerDisplayMode=\"block\"\n          position=\"right\"\n        >\n          {rendered}\n        </Tooltip>\n      );\n    }\n\n    return rendered;\n  }\n\n  function renderBodyCellWithData(tableData: TableData | null) {\n    const deltaColumnMap: Record<string, string> = {};\n    if (tableData?.data?.[0]) {\n      Object.keys(tableData.data[0]).forEach(col => {\n        if (\n          col.startsWith(\n            'equation|(percentile_range(transaction.duration,0.95,lessOrEquals'\n          )\n        ) {\n          deltaColumnMap['p95()'] = col;\n        }\n      });\n    }\n\n    return (\n      column: TableColumn<keyof TableDataRow>,\n      dataRow: TableDataRow\n    ): React.ReactNode => renderBodyCell(tableData, column, dataRow, deltaColumnMap);\n  }\n\n  function renderHeadCell(\n    tableMeta: TableData['meta'],\n    column: TableColumn<keyof TableDataRow>,\n    title: React.ReactNode\n  ): React.ReactNode {\n    let align: Alignments = 'right';\n    if (title === 'Endpoint') {\n      align = 'left';\n    }\n    const field = {\n      field: column.column.kind === 'equation' ? (column.key as string) : column.name,\n      width: column.width,\n    };\n\n    const aggregateAliasTableMeta: MetaType = {};\n    if (tableMeta) {\n      Object.keys(tableMeta).forEach(key => {\n        aggregateAliasTableMeta[getAggregateAlias(key)] = tableMeta[key];\n      });\n    }\n\n    function generateSortLink(): LocationDescriptorObject | undefined {\n      if (!tableMeta) {\n        return undefined;\n      }\n\n      const nextEventView = eventView.sortOnField(field, aggregateAliasTableMeta);\n      const queryStringObject = nextEventView.generateQueryStringObject();\n\n      return {\n        ...location,\n        query: {...location.query, sort: queryStringObject.sort},\n      };\n    }\n    const currentSort = eventView.sortForField(field, aggregateAliasTableMeta);\n    const canSort = isFieldSortable(field, aggregateAliasTableMeta);\n\n    const currentSortKind = currentSort ? currentSort.kind : undefined;\n\n    const sortLink = (\n      <SortLink\n        align={align}\n        title={title || field.field}\n        direction={currentSortKind}\n        canSort={canSort}\n        generateSortLink={generateSortLink}\n        onClick={() => {\n          trackAnalytics('starfish.web_service_view.endpoint_list.header.clicked', {\n            organization,\n            direction: currentSortKind === 'desc' ? 'asc' : 'desc',\n            header: title || field.field,\n          });\n        }}\n      />\n    );\n\n    return sortLink;\n  }\n\n  function renderHeadCellWithMeta(tableMeta: TableData['meta']) {\n    const newColumnTitles = COLUMN_TITLES;\n    return (column: TableColumn<keyof TableDataRow>, index: number): React.ReactNode =>\n      renderHeadCell(tableMeta, column, newColumnTitles[index]);\n  }\n\n  function handleResizeColumn(columnIndex: number, nextColumn: GridColumn) {\n    setWidths(prevWidths =>\n      prevWidths.map((width, index) =>\n        index === columnIndex ? Number(nextColumn.width ?? COL_WIDTH_UNDEFINED) : width\n      )\n    );\n  }\n\n  function handleSearch(query: string) {\n    const clonedEventView = eventView.clone();\n\n    // Default to fuzzy finding for now\n    clonedEventView.query += `transaction:*${query}*`;\n    setEventView(clonedEventView);\n\n    trackAnalytics('starfish.web_service_view.endpoint_list.search', {\n      organization,\n      query,\n    });\n  }\n\n  const columnOrder = eventView\n    .getColumns()\n    .filter(\n      (col: TableColumn<React.ReactText>) =>\n        col.name !== 'project' &&\n        col.name !== 'http.method' &&\n        col.name !== 'total.transaction_duration' &&\n        col.name !== 'sum(transaction.duration)'\n    )\n    .map((col: TableColumn<React.ReactText>, i: number) => {\n      if (typeof widths[i] === 'number') {\n        return {...col, width: widths[i]};\n      }\n      return col;\n    });\n\n  const columnSortBy = eventView.getSorts();\n\n  return (\n    <GuideAnchor target=\"performance_table\" position=\"top-start\">\n      <StyledSearchBar placeholder={t('Search for endpoints')} onSearch={handleSearch} />\n      <DiscoverQuery\n        eventView={_eventView}\n        orgSlug={organization.slug}\n        location={location}\n        setError={error => setError(error?.message)}\n        referrer=\"api.starfish.endpoint-list\"\n        queryExtras={{dataset: 'metrics'}}\n      >\n        {({pageLinks, isLoading, tableData}) => (\n          <Fragment>\n            <GridEditable\n              isLoading={isLoading}\n              data={tableData ? tableData.data : []}\n              columnOrder={columnOrder}\n              columnSortBy={columnSortBy}\n              grid={{\n                onResizeColumn: handleResizeColumn,\n                renderHeadCell: renderHeadCellWithMeta(tableData?.meta) as any,\n                renderBodyCell: renderBodyCellWithData(tableData) as any,\n              }}\n              location={location}\n            />\n\n            <Pagination pageLinks={pageLinks} />\n          </Fragment>\n        )}\n      </DiscoverQuery>\n    </GuideAnchor>\n  );\n}\n\nexport default EndpointList;\n\nconst StyledSearchBar = styled(BaseSearchBar)`\n  margin-bottom: ${space(2)};\n`;\n","import styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport _EventsRequest from 'sentry/components/charts/eventsRequest';\nimport {PerformanceLayoutBodyRow} from 'sentry/components/performance/layouts';\nimport {CHART_PALETTE} from 'sentry/constants/chartPalette';\nimport {space} from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {Series} from 'sentry/types/echarts';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {usePageError} from 'sentry/utils/performance/contexts/pageError';\n\nconst EventsRequest = withApi(_EventsRequest);\n\nimport {Fragment} from 'react';\nimport {useTheme} from '@emotion/react';\n\nimport {getInterval} from 'sentry/components/charts/utils';\nimport {t} from 'sentry/locale';\nimport {tooltipFormatterUsingAggregateOutputType} from 'sentry/utils/discover/charts';\nimport {DiscoverDatasets} from 'sentry/utils/discover/types';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport usePageFilters from 'sentry/utils/usePageFilters';\nimport withApi from 'sentry/utils/withApi';\nimport {P95_COLOR, THROUGHPUT_COLOR} from 'sentry/views/starfish/colours';\nimport Chart, {useSynchronizeCharts} from 'sentry/views/starfish/components/chart';\nimport MiniChartPanel from 'sentry/views/starfish/components/miniChartPanel';\nimport formatThroughput from 'sentry/views/starfish/utils/chartValueFormatters/formatThroughput';\nimport {DataTitles} from 'sentry/views/starfish/views/spans/types';\nimport {SpanGroupBreakdownContainer} from 'sentry/views/starfish/views/webServiceView/spanGroupBreakdownContainer';\n\nimport EndpointList from './endpointList';\n\ntype BasePerformanceViewProps = {\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n};\n\nexport function StarfishView(props: BasePerformanceViewProps) {\n  const {organization, eventView} = props;\n  const pageFilter = usePageFilters();\n  const theme = useTheme();\n\n  function renderCharts() {\n    const query = new MutableSearch([\n      'event.type:transaction',\n      'has:http.method',\n      'transaction.op:http.server',\n    ]);\n\n    return (\n      <EventsRequest\n        query={query.formatString()}\n        includePrevious={false}\n        partial\n        interval={getInterval(pageFilter.selection.datetime, 'low')}\n        includeTransformedData\n        limit={1}\n        environment={eventView.environment}\n        project={eventView.project}\n        period={eventView.statsPeriod}\n        referrer=\"starfish-homepage-charts\"\n        start={eventView.start}\n        end={eventView.end}\n        organization={organization}\n        yAxis={['tps()', 'http_error_count()', 'p95(transaction.duration)']}\n        dataset={DiscoverDatasets.METRICS}\n      >\n        {({loading, results}) => {\n          if (!results || !results[0] || !results[1]) {\n            return null;\n          }\n\n          const throughputData: Series = {\n            seriesName: t('Requests'),\n            data: results[0].data,\n          };\n\n          const errorsData: Series = {\n            seriesName: t('5XX Responses'),\n            color: CHART_PALETTE[5][3],\n            data: results[1].data,\n          };\n\n          const percentileData: Series = {\n            seriesName: t('Requests'),\n            data: results[2].data,\n          };\n\n          return (\n            <Fragment>\n              <MiniChartPanel title={DataTitles.p95}>\n                <Chart\n                  statsPeriod={eventView.statsPeriod}\n                  height={71}\n                  data={[percentileData]}\n                  start={eventView.start as string}\n                  end={eventView.end as string}\n                  loading={loading}\n                  utc={false}\n                  grid={{\n                    left: '0',\n                    right: '0',\n                    top: '8px',\n                    bottom: '0',\n                  }}\n                  definedAxisTicks={2}\n                  isLineChart\n                  chartColors={[P95_COLOR]}\n                  tooltipFormatterOptions={{\n                    valueFormatter: value =>\n                      tooltipFormatterUsingAggregateOutputType(value, 'duration'),\n                  }}\n                />\n              </MiniChartPanel>\n              <MiniChartPanel title={DataTitles.throughput}>\n                <Chart\n                  statsPeriod={eventView.statsPeriod}\n                  height={71}\n                  data={[throughputData]}\n                  start=\"\"\n                  end=\"\"\n                  loading={loading}\n                  utc={false}\n                  grid={{\n                    left: '0',\n                    right: '0',\n                    top: '8px',\n                    bottom: '0',\n                  }}\n                  aggregateOutputFormat=\"rate\"\n                  definedAxisTicks={2}\n                  stacked\n                  isLineChart\n                  chartColors={[THROUGHPUT_COLOR]}\n                  tooltipFormatterOptions={{\n                    valueFormatter: value => formatThroughput(value),\n                  }}\n                />\n              </MiniChartPanel>\n\n              <MiniChartPanel title={DataTitles.errorCount}>\n                <Chart\n                  statsPeriod={eventView.statsPeriod}\n                  height={71}\n                  data={[errorsData]}\n                  start={eventView.start as string}\n                  end={eventView.end as string}\n                  loading={loading}\n                  utc={false}\n                  grid={{\n                    left: '0',\n                    right: '0',\n                    top: '8px',\n                    bottom: '0',\n                  }}\n                  definedAxisTicks={2}\n                  isLineChart\n                  chartColors={theme.charts.getColorPalette(2)}\n                />\n              </MiniChartPanel>\n            </Fragment>\n          );\n        }}\n      </EventsRequest>\n    );\n  }\n\n  useSynchronizeCharts();\n\n  return (\n    <div data-test-id=\"starfish-view\">\n      <StyledRow minSize={300}>\n        <ChartsContainer>\n          <ChartsContainerItem>\n            <SpanGroupBreakdownContainer />\n          </ChartsContainerItem>\n          <ChartsContainerItem2>{renderCharts()}</ChartsContainerItem2>\n        </ChartsContainer>\n      </StyledRow>\n\n      <EndpointList {...props} setError={usePageError().setPageError} />\n    </div>\n  );\n}\n\nconst StyledRow = styled(PerformanceLayoutBodyRow)`\n  margin-bottom: ${space(2)};\n`;\n\nconst ChartsContainer = styled('div')`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: ${space(2)};\n`;\n\nconst ChartsContainerItem = styled('div')`\n  flex: 2;\n`;\n\nconst ChartsContainerItem2 = styled('div')`\n  flex: 1;\n`;\n","import {Fragment} from 'react';\nimport {InjectedRouter} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport PageFilterBar from 'sentry/components/organizations/pageFilterBar';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Organization, PageFilters} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {\n  PageErrorAlert,\n  PageErrorProvider,\n} from 'sentry/utils/performance/contexts/pageError';\nimport StarfishDatePicker from 'sentry/views/starfish/components/datePicker';\n\nimport {StarfishView} from './starfishView';\n\ntype Props = {\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n  router: InjectedRouter;\n  selection: PageFilters;\n  withStaticFilters: boolean;\n};\n\nexport function StarfishLanding(props: Props) {\n  const pageFilters: React.ReactNode = (\n    <PageFilterBar condensed>\n      <StarfishDatePicker />\n    </PageFilterBar>\n  );\n\n  return (\n    <Layout.Page>\n      <PageErrorProvider>\n        <Layout.Header>\n          <Layout.HeaderContent>\n            <Layout.Title>{t('Web Service')}</Layout.Title>\n          </Layout.HeaderContent>\n        </Layout.Header>\n\n        <Layout.Body>\n          <Layout.Main fullWidth>\n            <PageErrorAlert />\n            <Fragment>\n              <SearchContainerWithFilterAndMetrics>\n                {pageFilters}\n              </SearchContainerWithFilterAndMetrics>\n\n              <StarfishView {...props} />\n            </Fragment>\n          </Layout.Main>\n        </Layout.Body>\n      </PageErrorProvider>\n    </Layout.Page>\n  );\n}\n\nconst SearchContainerWithFilterAndMetrics = styled('div')`\n  display: grid;\n  grid-template-rows: auto auto auto;\n  gap: ${space(2)};\n  margin-bottom: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-rows: auto;\n    grid-template-columns: auto 1fr auto;\n  }\n`;\n","import {useEffect, useRef} from 'react';\nimport {InjectedRouter} from 'react-router';\nimport {Location} from 'history';\nimport isEqual from 'lodash/isEqual';\n\nimport {loadOrganizationTags} from 'sentry/actionCreators/tags';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport {PageFilters} from 'sentry/types';\nimport {canUseMetricsData} from 'sentry/utils/performance/contexts/metricsEnhancedSetting';\nimport useApi from 'sentry/utils/useApi';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport usePrevious from 'sentry/utils/usePrevious';\nimport withPageFilters from 'sentry/utils/withPageFilters';\nimport StarfishPageFilterContainer from 'sentry/views/starfish/components/pageFilterContainer';\n\nimport {generateWebServiceEventView} from '../../utils/generatePerformanceEventView';\n\nimport {StarfishLanding} from './starfishLanding';\n\ntype Props = {\n  location: Location;\n  router: InjectedRouter;\n  selection: PageFilters;\n};\n\nfunction WebServiceView({selection, location, router}: Props) {\n  const api = useApi();\n  const organization = useOrganization();\n  const mounted = useRef(false);\n  const previousDateTime = usePrevious(selection.datetime);\n  const withStaticFilters = canUseMetricsData(organization);\n  const eventView = generateWebServiceEventView(\n    location,\n    {\n      withStaticFilters,\n    },\n    organization\n  );\n\n  useEffect(() => {\n    if (!mounted.current) {\n      loadOrganizationTags(api, organization.slug, selection);\n      mounted.current = true;\n      return;\n    }\n    if (!isEqual(previousDateTime, selection.datetime)) {\n      loadOrganizationTags(api, organization.slug, selection);\n    }\n  }, [selection.datetime, previousDateTime, selection, api, organization, location]);\n\n  return (\n    <SentryDocumentTitle title={t('Web Service')} orgSlug={organization.slug}>\n      <StarfishPageFilterContainer>\n        <StarfishLanding\n          router={router}\n          eventView={eventView}\n          organization={organization}\n          location={location}\n          selection={selection}\n          withStaticFilters={withStaticFilters}\n        />\n      </StarfishPageFilterContainer>\n    </SentryDocumentTitle>\n  );\n}\n\nexport default withPageFilters(WebServiceView);\n","/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that negates the result of the predicate `func`. The\n * `func` predicate is invoked with the `this` binding and arguments of the\n * created function.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Function\n * @param {Function} predicate The predicate to negate.\n * @returns {Function} Returns the new negated function.\n * @example\n *\n * function isEven(n) {\n *   return n % 2 == 0;\n * }\n *\n * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n * // => [1, 3, 5]\n */\nfunction negate(predicate) {\n  if (typeof predicate != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  return function() {\n    var args = arguments;\n    switch (args.length) {\n      case 0: return !predicate.call(this);\n      case 1: return !predicate.call(this, args[0]);\n      case 2: return !predicate.call(this, args[0], args[1]);\n      case 3: return !predicate.call(this, args[0], args[1], args[2]);\n    }\n    return !predicate.apply(this, args);\n  };\n}\n\nmodule.exports = negate;\n","var baseIteratee = require('./_baseIteratee'),\n    negate = require('./negate'),\n    pickBy = require('./pickBy');\n\n/**\n * The opposite of `_.pickBy`; this method creates an object composed of\n * the own and inherited enumerable string keyed properties of `object` that\n * `predicate` doesn't return truthy for. The predicate is invoked with two\n * arguments: (value, key).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The source object.\n * @param {Function} [predicate=_.identity] The function invoked per property.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.omitBy(object, _.isNumber);\n * // => { 'b': '2' }\n */\nfunction omitBy(object, predicate) {\n  return pickBy(object, negate(baseIteratee(predicate)));\n}\n\nmodule.exports = omitBy;\n"],"names":["PerformanceLayoutBodyRow","_styled","target","space","p","theme","breakpoints","small","medium","columns","minSize","pageErrorContext","createContext","pageError","undefined","setPageError","_","PageErrorProvider","_ref","children","useState","_jsx","Provider","value","PageErrorAlert","useContext","Alert","type","showIcon","displayName","usePageError","ThroughputCell","throughputPerSecond","containerProps","throughput","toFixed","_jsxs","NumberContainer","formatAbbreviatedNumber","t","TOKEN_KEYS_SUPPORTED_IN_LIMITED_SEARCH","TIME_SPENT_IN_SERVICE","MiniChartPanel","title","button","subtitle","Panel","PanelBody","HeaderContainer","Header","ChartLabel","Subtitle","text","cardTitle","name","styles","textStyles","gray300","fontSizeMedium","COLUMN_TITLES","DataTitles","p95","errorCount","timeSpent","EndpointList","eventView","location","organization","setError","widths","setWidths","_eventView","setEventView","renderBodyCellWithData","tableData","deltaColumnMap","data","Object","keys","forEach","col","startsWith","column","dataRow","_deltaColumnMap","meta","key","tableMeta","field","String","rendered","getFieldRenderer","fieldRenderer","prefix","Link","to","slug","qs","endpoint","transaction","statsPeriod","project","start","end","style","display","width","onClick","trackAnalytics","cumulativeTime","Number","cumulativeTimePercentage","Tooltip","tct","Duration","seconds","fixedDigits","abbreviation","containerDisplayMode","position","formatPercentage","fieldName","getAggregateAlias","toLocaleString","renderBodyCell","renderHeadCellWithMeta","newColumnTitles","index","align","kind","aggregateAliasTableMeta","currentSort","sortForField","canSort","isFieldSortable","currentSortKind","SortLink","direction","generateSortLink","queryStringObject","sortOnField","generateQueryStringObject","query","sort","header","renderHeadCell","handleResizeColumn","columnIndex","nextColumn","prevWidths","map","COL_WIDTH_UNDEFINED","useEffect","prevEventView","cloned","clone","columnOrder","getColumns","filter","i","columnSortBy","getSorts","GuideAnchor","StyledSearchBar","placeholder","onSearch","clonedEventView","DiscoverQuery","orgSlug","error","message","referrer","queryExtras","dataset","_ref2","pageLinks","isLoading","Fragment","GridEditable","grid","onResizeColumn","Pagination","BaseSearchBar","EventsRequest","withApi","_EventsRequest","StarfishView","props","pageFilter","usePageFilters","useTheme","useSynchronizeCharts","StyledRow","ChartsContainer","ChartsContainerItem","SpanGroupBreakdownContainer","ChartsContainerItem2","MutableSearch","formatString","includePrevious","partial","interval","getInterval","selection","datetime","includeTransformedData","limit","environment","period","yAxis","DiscoverDatasets","METRICS","loading","results","throughputData","seriesName","errorsData","color","CHART_PALETTE","percentileData","Chart","height","utc","left","right","top","bottom","definedAxisTicks","isLineChart","chartColors","P95_COLOR","tooltipFormatterOptions","valueFormatter","tooltipFormatterUsingAggregateOutputType","aggregateOutputFormat","stacked","THROUGHPUT_COLOR","formatThroughput","charts","getColorPalette","renderCharts","StarfishLanding","pageFilters","PageFilterBar","condensed","StarfishDatePicker","Layout","fullWidth","SearchContainerWithFilterAndMetrics","WebServiceView","router","api","useApi","useOrganization","mounted","useRef","previousDateTime","usePrevious","withStaticFilters","canUseMetricsData","arguments","length","hasStartAndEnd","orderby","decodeScalar","savedQuery","id","fields","version","Array","fill","range","features","includes","getDefaultStatsPeriod","searchQuery","conditions","freeText","parsedFreeText","join","setFilterValues","wrapQueryInWildcards","tokens","token","prepareQueryForLandingPage","EventView","fromNewQueryWithLocation","generateWebServiceEventView","current","loadOrganizationTags","isEqual","SentryDocumentTitle","StarfishPageFilterContainer","withPageFilters","module","exports","predicate","TypeError","args","call","this","apply","baseIteratee","negate","pickBy","object"],"sourceRoot":""}