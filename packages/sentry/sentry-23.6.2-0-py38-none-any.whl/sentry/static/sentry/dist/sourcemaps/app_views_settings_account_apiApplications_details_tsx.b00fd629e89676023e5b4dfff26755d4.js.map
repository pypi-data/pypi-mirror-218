{"version":3,"file":"chunks/app_views_settings_account_apiApplications_details_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/forms/formPanel.tsx","webpack:///./app/components/forms/jsonForm.tsx","webpack:///./app/data/forms/apiApplication.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/account/apiApplications/details.tsx"],"sourcesContent":["import {useCallback, useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport FieldFromConfig from 'sentry/components/forms/fieldFromConfig';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {IconChevron} from 'sentry/icons';\nimport {Scope} from 'sentry/types';\nimport {sanitizeQuerySelector} from 'sentry/utils/sanitizeQuerySelector';\n\nimport {FieldObject, JsonFormObject} from './types';\n\ntype Props = {\n  /**\n   * List of fields to render\n   */\n  fields: FieldObject[];\n  access?: Set<Scope>;\n  additionalFieldProps?: {[key: string]: any};\n  /**\n   * Can the PanelBody be hidden with a click?\n   */\n  collapsible?: boolean;\n  /**\n   * Disables the entire form\n   */\n  disabled?: boolean;\n  features?: Record<string, any>;\n  /**\n   * The name of the field that should be highlighted\n   */\n  highlighted?: string;\n  initiallyCollapsed?: boolean;\n  /**\n   * Renders inside of PanelBody before PanelBody close\n   */\n  renderFooter?: (arg: JsonFormObject) => React.ReactNode;\n  /**\n   * Renders inside of PanelBody at the start\n   */\n  renderHeader?: (arg: JsonFormObject) => React.ReactNode;\n  /**\n   * Panel title\n   */\n  title?: React.ReactNode;\n};\n\nfunction FormPanel({\n  additionalFieldProps = {},\n  title,\n  fields,\n  access,\n  disabled,\n  renderFooter,\n  renderHeader,\n  collapsible,\n  initiallyCollapsed = false,\n  ...otherProps\n}: Props) {\n  const [collapsed, setCollapse] = useState(initiallyCollapsed);\n  const handleCollapseToggle = useCallback(() => setCollapse(current => !current), []);\n\n  return (\n    <Panel id={typeof title === 'string' ? sanitizeQuerySelector(title) : undefined}>\n      {title && (\n        <PanelHeader>\n          {title}\n          {collapsible && (\n            <Collapse onClick={handleCollapseToggle}>\n              <IconChevron\n                data-test-id=\"form-panel-collapse-chevron\"\n                direction={collapsed ? 'down' : 'up'}\n                size=\"xs\"\n              />\n            </Collapse>\n          )}\n        </PanelHeader>\n      )}\n      <PanelBody hidden={collapsed}>\n        {typeof renderHeader === 'function' && renderHeader({title, fields})}\n\n        {fields.map(field => {\n          if (typeof field === 'function') {\n            return field();\n          }\n\n          const {defaultValue: _, ...fieldWithoutDefaultValue} = field;\n\n          // Allow the form panel disabled prop to override the fields\n          // disabled prop, with fallback to the fields disabled state.\n          if (disabled === true) {\n            fieldWithoutDefaultValue.disabled = true;\n            fieldWithoutDefaultValue.disabledReason = undefined;\n          }\n\n          return (\n            <FieldFromConfig\n              access={access}\n              disabled={disabled}\n              key={field.name}\n              {...otherProps}\n              {...additionalFieldProps}\n              field={fieldWithoutDefaultValue}\n              highlighted={otherProps.highlighted === `#${field.name}`}\n            />\n          );\n        })}\n        {typeof renderFooter === 'function' && renderFooter({title, fields})}\n      </PanelBody>\n    </Panel>\n  );\n}\n\nexport default FormPanel;\n\nconst Collapse = styled('span')`\n  cursor: pointer;\n`;\n","import {Component, Fragment} from 'react';\nimport {WithRouterProps} from 'react-router';\nimport * as Sentry from '@sentry/react';\nimport scrollToElement from 'scroll-to-element';\n\nimport {defined} from 'sentry/utils';\nimport {sanitizeQuerySelector} from 'sentry/utils/sanitizeQuerySelector';\n// eslint-disable-next-line no-restricted-imports\nimport withSentryRouter from 'sentry/utils/withSentryRouter';\n\nimport FormPanel from './formPanel';\nimport {Field, FieldObject, JsonFormObject} from './types';\n\ntype Props = {\n  additionalFieldProps?: {[key: string]: any};\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n} & WithRouterProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends Component<Props, State> {\n  state: State = {\n    // location.hash is optional because of tests.\n    highlighted: this.props.location?.hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.location && this.props.location.hash !== prevProps.location.hash) {\n      const hash = this.props.location.hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    // location.hash is optional because of tests.\n    const hash = toHash || this.props.location?.hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      collapsible,\n      initiallyCollapsed,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      params: _params,\n      router: _router,\n      routes: _routes,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n      collapsible,\n      initiallyCollapsed,\n    };\n\n    return (\n      <div {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <Fragment key={i}>{this.renderForm({formPanelProps, ...formGroup})}</Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </div>\n    );\n  }\n}\n\nexport default withSentryRouter(JsonForm);\n","import {JsonFormObject} from 'sentry/components/forms/types';\nimport {convertMultilineFieldValue, extractMultilineFields} from 'sentry/utils';\nimport getDynamicText from 'sentry/utils/getDynamicText';\n\nconst forms: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: 'Application Details',\n    fields: [\n      {\n        name: 'name',\n        type: 'string',\n        required: true,\n\n        // additional data/props that is related to rendering of form field rather than data\n        label: 'Name',\n        help: 'e.g. My Application',\n        setValue: value => getDynamicText({value, fixed: 'CI_APPLICATION_NAME'}),\n      },\n      {\n        name: 'homepageUrl',\n        type: 'string',\n        required: false,\n        label: 'Homepage',\n        placeholder: 'e.g. https://example.com/',\n        help: \"An optional link to your application's homepage\",\n      },\n      {\n        name: 'privacyUrl',\n        type: 'string',\n        label: 'Privacy Policy',\n        placeholder: 'e.g. https://example.com/privacy',\n        help: 'An optional link to your Privacy Policy',\n      },\n      {\n        name: 'termsUrl',\n        type: 'string',\n        label: 'Terms of Service',\n        placeholder: 'e.g. https://example.com/terms',\n        help: 'An optional link to your Terms of Service agreement',\n      },\n    ],\n  },\n\n  {\n    title: 'Security',\n    fields: [\n      {\n        name: 'redirectUris',\n        type: 'string',\n        multiline: true,\n        placeholder: 'e.g. https://example.com/oauth/complete',\n        label: 'Authorized Redirect URIs',\n        help: 'Separate multiple entries with a newline.',\n        getValue: val => extractMultilineFields(val),\n        setValue: val => convertMultilineFieldValue(val),\n      },\n      {\n        name: 'allowedOrigins',\n        type: 'string',\n        multiline: true,\n        placeholder: 'e.g. example.com',\n        label: 'Authorized JavaScript Origins',\n        help: 'Separate multiple entries with a newline.',\n        getValue: val => extractMultilineFields(val),\n        setValue: val => convertMultilineFieldValue(val),\n      },\n    ],\n  },\n];\n\nexport default forms;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\nexport type AsyncViewState = AsyncComponent['state'];\nexport type AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {RouteComponentProps} from 'react-router';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport Form from 'sentry/components/forms/form';\nimport FormField from 'sentry/components/forms/formField';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport TextCopyInput from 'sentry/components/textCopyInput';\nimport apiApplication from 'sentry/data/forms/apiApplication';\nimport {t} from 'sentry/locale';\nimport ConfigStore from 'sentry/stores/configStore';\nimport {ApiApplication} from 'sentry/types';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\n\ntype Props = RouteComponentProps<{appId: string}, {}>;\ntype State = {\n  app: ApiApplication;\n} & AsyncView['state'];\n\nclass ApiApplicationsDetails extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [['app', `/api-applications/${this.props.params.appId}/`]];\n  }\n\n  getTitle() {\n    return t('Application Details');\n  }\n\n  renderBody() {\n    const urlPrefix = ConfigStore.get('urlPrefix');\n\n    return (\n      <div>\n        <SettingsPageHeader title={this.getTitle()} />\n\n        <Form\n          apiMethod=\"PUT\"\n          apiEndpoint={`/api-applications/${this.props.params.appId}/`}\n          saveOnBlur\n          allowUndo\n          initialData={this.state.app}\n          onSubmitError={() => addErrorMessage('Unable to save change')}\n        >\n          <JsonForm forms={apiApplication} />\n\n          <Panel>\n            <PanelHeader>{t('Credentials')}</PanelHeader>\n\n            <PanelBody>\n              <FormField name=\"clientID\" label=\"Client ID\">\n                {({value}) => (\n                  <div>\n                    <TextCopyInput>\n                      {getDynamicText({value, fixed: 'CI_CLIENT_ID'})}\n                    </TextCopyInput>\n                  </div>\n                )}\n              </FormField>\n\n              <FormField\n                name=\"clientSecret\"\n                label=\"Client Secret\"\n                help={t(`Your secret is only available briefly after application creation. Make\n                  sure to save this value!`)}\n              >\n                {({value}) =>\n                  value ? (\n                    <TextCopyInput>\n                      {getDynamicText({value, fixed: 'CI_CLIENT_SECRET'})}\n                    </TextCopyInput>\n                  ) : (\n                    <em>hidden</em>\n                  )\n                }\n              </FormField>\n\n              <FormField name=\"\" label=\"Authorization URL\">\n                {() => <TextCopyInput>{`${urlPrefix}/oauth/authorize/`}</TextCopyInput>}\n              </FormField>\n\n              <FormField name=\"\" label=\"Token URL\">\n                {() => <TextCopyInput>{`${urlPrefix}/oauth/token/`}</TextCopyInput>}\n              </FormField>\n            </PanelBody>\n          </Panel>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default ApiApplicationsDetails;\n"],"names":["FormPanel","_ref","additionalFieldProps","title","fields","access","disabled","renderFooter","renderHeader","collapsible","initiallyCollapsed","otherProps","collapsed","setCollapse","useState","handleCollapseToggle","useCallback","current","_jsxs","Panel","id","sanitizeQuerySelector","undefined","children","PanelHeader","_jsx","Collapse","onClick","IconChevron","direction","size","PanelBody","hidden","map","field","defaultValue","_","fieldWithoutDefaultValue","disabledReason","FieldFromConfig","highlighted","name","displayName","_styled","target","styles","JsonForm","Component","constructor","arguments","_defineProperty","this","props","location","hash","componentDidMount","scrollToHash","componentDidUpdate","prevProps","setState","toHash","scrollToElement","decodeURIComponent","align","offset","err","Sentry","shouldDisplayForm","fieldsWithVisibleProp","filter","defined","visible","length","every","renderForm","formPanelProps","render","forms","features","_location","params","_params","router","_router","routes","_routes","state","formGroup","i","Fragment","withSentryRouter","type","required","label","help","setValue","value","getDynamicText","fixed","placeholder","multiline","getValue","val","extractMultilineFields","convertMultilineFieldValue","AsyncView","AsyncComponent","getTitle","SentryDocumentTitle","renderComponent","ApiApplicationsDetails","getEndpoints","appId","t","renderBody","urlPrefix","ConfigStore","get","SettingsPageHeader","Form","apiMethod","apiEndpoint","saveOnBlur","allowUndo","initialData","app","onSubmitError","addErrorMessage","apiApplication","FormField","TextCopyInput","_ref2"],"sourceRoot":""}