{"version":3,"file":"chunks/app_utils_replays_hooks_useReplayList_tsx-app_views_replays_replayTable_index_tsx-app_views_r-cb7c12.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/replays/fetchReplayList.tsx","webpack:///./app/utils/replays/hooks/useReplayList.tsx","webpack:///./app/views/replays/replayTable/sortableHeader.tsx","webpack:///./app/views/replays/replayTable/headerCell.tsx","webpack:///./app/views/replays/replayTable/tableCell.tsx","webpack:///./app/views/replays/replayTable/index.tsx","webpack:///./app/views/replays/replayTable/types.tsx","webpack:///./app/views/replays/types.tsx"],"sourcesContent":["import * as Sentry from '@sentry/react';\nimport type {Location} from 'history';\n\nimport type {Client} from 'sentry/api';\nimport {ALL_ACCESS_PROJECTS} from 'sentry/constants/pageFilters';\nimport type {Organization} from 'sentry/types';\nimport type EventView from 'sentry/utils/discover/eventView';\nimport {mapResponseToReplayRecord} from 'sentry/utils/replays/replayDataUtils';\nimport type RequestError from 'sentry/utils/requestError/requestError';\nimport type {ReplayListRecord} from 'sentry/views/replays/types';\n\nexport const DEFAULT_SORT = '-started_at';\n\ntype State = {\n  fetchError: undefined | RequestError;\n  pageLinks: null | string;\n  replays: undefined | ReplayListRecord[];\n};\n\ntype Result = State;\n\ntype Props = {\n  api: Client;\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n  queryReferrer?: 'issueReplays';\n};\n\nasync function fetchReplayList({\n  api,\n  organization,\n  location,\n  eventView,\n  queryReferrer,\n}: Props): Promise<Result> {\n  try {\n    const path = `/organizations/${organization.slug}/replays/`;\n\n    const payload = eventView.getEventsAPIPayload(location);\n\n    // HACK!!! Because the sort field needs to be in the eventView, but I cannot\n    // ask the server for compound fields like `os.name`.\n    payload.field = payload.field.map(field => field.split('.')[0]);\n\n    // unique list\n    payload.field = Array.from(new Set(payload.field));\n\n    const [{data}, _textStatus, resp] = await api.requestPromise(path, {\n      includeAllArgs: true,\n      query: {\n        ...payload,\n        cursor: location.query.cursor,\n        // when queryReferrer === 'issueReplays' we override the global view check on the backend\n        // we also require a project param otherwise we won't yield results\n        queryReferrer,\n        project: queryReferrer === 'issueReplays' ? ALL_ACCESS_PROJECTS : payload.project,\n      },\n    });\n\n    const pageLinks = resp?.getResponseHeader('Link') ?? '';\n\n    return {\n      fetchError: undefined,\n      pageLinks,\n      replays: data.map(mapResponseToReplayRecord),\n    };\n  } catch (error) {\n    if (error.responseJSON?.detail) {\n      return {\n        fetchError: error.responseJSON.detail,\n        pageLinks: null,\n        replays: [],\n      };\n    }\n    Sentry.captureException(error);\n    return {\n      fetchError: error,\n      pageLinks: null,\n      replays: [],\n    };\n  }\n}\n\nexport default fetchReplayList;\n","import {useCallback, useEffect, useState} from 'react';\nimport {Location} from 'history';\n\nimport type {Organization} from 'sentry/types';\nimport type EventView from 'sentry/utils/discover/eventView';\nimport fetchReplayList from 'sentry/utils/replays/fetchReplayList';\nimport useApi from 'sentry/utils/useApi';\nimport type {ReplayListLocationQuery} from 'sentry/views/replays/types';\n\ntype Options = {\n  eventView: EventView;\n  location: Location<ReplayListLocationQuery>;\n  organization: Organization;\n  queryReferrer?: 'issueReplays';\n};\n\ntype State = Awaited<ReturnType<typeof fetchReplayList>> & {isFetching: boolean};\n\ntype Result = State;\n\nfunction useReplayList({\n  eventView,\n  location,\n  organization,\n  queryReferrer,\n}: Options): Result {\n  const api = useApi();\n\n  const [data, setData] = useState<State>({\n    fetchError: undefined,\n    isFetching: true,\n    pageLinks: null,\n    replays: [],\n  });\n\n  const loadReplays = useCallback(async () => {\n    api.clear();\n    setData(prev => ({\n      ...prev,\n      isFetching: true,\n    }));\n    const response = await fetchReplayList({\n      api,\n      organization,\n      location,\n      eventView,\n      queryReferrer,\n    });\n\n    setData({...response, isFetching: false});\n  }, [api, organization, location, eventView, queryReferrer]);\n\n  useEffect(() => {\n    loadReplays();\n  }, [loadReplays]);\n\n  return data;\n}\n\nexport default useReplayList;\n","import styled from '@emotion/styled';\n\nimport Link from 'sentry/components/links/link';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport {IconArrow} from 'sentry/icons';\nimport {space} from 'sentry/styles/space';\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport type {Sort} from 'sentry/utils/discover/fields';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport type {ReplayListLocationQuery} from 'sentry/views/replays/types';\nimport {ReplayRecordNestedFieldName} from 'sentry/views/replays/types';\n\ntype NotSortable = {\n  label: string;\n  tooltip?: string;\n};\n\ntype Sortable = {\n  fieldName: ReplayRecordNestedFieldName;\n  label: string;\n  sort: undefined | Sort;\n  tooltip?: string;\n};\n\ntype Props = NotSortable | Sortable;\n\nfunction SortableHeader(props: Props) {\n  const location = useLocation<ReplayListLocationQuery>();\n  const organization = useOrganization();\n\n  if (!('sort' in props) || !props.sort) {\n    const {label, tooltip} = props;\n    return (\n      <Header>\n        {label}\n        {tooltip ? (\n          <StyledQuestionTooltip size=\"xs\" position=\"top\" title={tooltip} />\n        ) : null}\n      </Header>\n    );\n  }\n\n  const {fieldName, label, sort, tooltip} = props;\n\n  const arrowDirection = sort?.kind === 'asc' ? 'up' : 'down';\n  const sortArrow = <IconArrow color=\"gray300\" size=\"xs\" direction={arrowDirection} />;\n\n  return (\n    <Header>\n      <SortLink\n        role=\"columnheader\"\n        aria-sort={\n          sort?.field.endsWith(fieldName)\n            ? sort?.kind === 'asc'\n              ? 'ascending'\n              : 'descending'\n            : 'none'\n        }\n        onClick={() => {\n          const column = sort?.field.endsWith(fieldName)\n            ? sort?.kind === 'desc'\n              ? fieldName\n              : '-' + fieldName\n            : '-' + fieldName;\n          trackAnalytics('replay.list-sorted', {\n            organization,\n            column,\n          });\n        }}\n        to={{\n          pathname: location.pathname,\n          query: {\n            ...location.query,\n            sort: sort?.field.endsWith(fieldName)\n              ? sort?.kind === 'desc'\n                ? fieldName\n                : '-' + fieldName\n              : '-' + fieldName,\n          },\n        }}\n      >\n        {label} {sort?.field === fieldName && sortArrow}\n      </SortLink>\n      {tooltip ? (\n        <StyledQuestionTooltip size=\"xs\" position=\"top\" title={tooltip} />\n      ) : null}\n    </Header>\n  );\n}\n\nconst Header = styled('div')`\n  display: grid;\n  grid-template-columns: repeat(2, max-content);\n  align-items: center;\n  padding: ${space(1.5)};\n`;\n\nconst SortLink = styled(Link)`\n  color: inherit;\n\n  :hover {\n    color: inherit;\n  }\n\n  svg {\n    vertical-align: top;\n  }\n`;\n\nconst StyledQuestionTooltip = styled(QuestionTooltip)`\n  margin-left: ${space(0.5)};\n`;\n\nexport default SortableHeader;\n","import {t} from 'sentry/locale';\nimport type {Sort} from 'sentry/utils/discover/fields';\nimport SortableHeader from 'sentry/views/replays/replayTable/sortableHeader';\nimport {ReplayColumn} from 'sentry/views/replays/replayTable/types';\n\ntype Props = {\n  column: ReplayColumn;\n  sort?: Sort;\n};\n\nfunction HeaderCell({column, sort}: Props) {\n  switch (column) {\n    case ReplayColumn.ACTIVITY:\n      return (\n        <SortableHeader\n          sort={sort}\n          fieldName=\"activity\"\n          label={t('Activity')}\n          tooltip={t(\n            'Activity represents how much user activity happened in a replay. It is determined by the number of errors encountered, duration, and UI events.'\n          )}\n        />\n      );\n\n    case ReplayColumn.BROWSER:\n      return <SortableHeader sort={sort} fieldName=\"browser.name\" label={t('Browser')} />;\n\n    case ReplayColumn.COUNT_ERRORS:\n      return <SortableHeader sort={sort} fieldName=\"count_errors\" label={t('Errors')} />;\n\n    case ReplayColumn.DURATION:\n      return <SortableHeader sort={sort} fieldName=\"duration\" label={t('Duration')} />;\n\n    case ReplayColumn.OS:\n      return <SortableHeader sort={sort} fieldName=\"os.name\" label={t('OS')} />;\n\n    case ReplayColumn.REPLAY:\n      return <SortableHeader sort={sort} fieldName=\"started_at\" label={t('Replay')} />;\n\n    case ReplayColumn.SLOWEST_TRANSACTION:\n      return (\n        <SortableHeader\n          label={t('Slowest Transaction')}\n          tooltip={t(\n            'Slowest single instance of this transaction captured by this session.'\n          )}\n        />\n      );\n\n    default:\n      return null;\n  }\n}\n\nexport default HeaderCell;\n","import {useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport Avatar from 'sentry/components/avatar';\nimport UserBadge from 'sentry/components/idBadge/userBadge';\nimport Link from 'sentry/components/links/link';\nimport ContextIcon from 'sentry/components/replays/contextIcon';\nimport {formatTime} from 'sentry/components/replays/utils';\nimport {StringWalker} from 'sentry/components/replays/walker/urlWalker';\nimport ScoreBar from 'sentry/components/scoreBar';\nimport TimeSince from 'sentry/components/timeSince';\nimport {CHART_PALETTE} from 'sentry/constants/chartPalette';\nimport {IconCalendar, IconDelete, IconFire} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {space, ValidSize} from 'sentry/styles/space';\nimport type {Organization} from 'sentry/types';\nimport {trackAnalytics} from 'sentry/utils/analytics';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {spanOperationRelativeBreakdownRenderer} from 'sentry/utils/discover/fieldRenderers';\nimport {getShortEventId} from 'sentry/utils/events';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useMedia from 'sentry/utils/useMedia';\nimport useProjects from 'sentry/utils/useProjects';\nimport type {ReplayListRecordWithTx} from 'sentry/views/performance/transactionSummary/transactionReplays/useReplaysWithTxData';\nimport type {ReplayListRecord} from 'sentry/views/replays/types';\n\ntype Props = {\n  replay: ReplayListRecord | ReplayListRecordWithTx;\n};\n\nfunction getUserBadgeUser(replay: Props['replay']) {\n  return replay.is_archived\n    ? {\n        username: '',\n        email: '',\n        id: '',\n        ip_address: '',\n        name: '',\n      }\n    : {\n        username: replay.user?.display_name || '',\n        email: replay.user?.email || '',\n        id: replay.user?.id || '',\n        ip_address: replay.user?.ip || '',\n        name: replay.user?.username || '',\n      };\n}\n\nexport function ReplayCell({\n  eventView,\n  organization,\n  referrer,\n  replay,\n}: Props & {eventView: EventView; organization: Organization; referrer: string}) {\n  const {projects} = useProjects();\n  const project = projects.find(p => p.id === replay.project_id);\n\n  const replayDetails = {\n    pathname: `/organizations/${organization.slug}/replays/${project?.slug}:${replay.id}/`,\n    query: {\n      referrer,\n      ...eventView.generateQueryStringObject(),\n    },\n  };\n\n  const trackNavigationEvent = () =>\n    trackAnalytics('replay.list-navigate-to-details', {\n      project_id: project?.id,\n      platform: project?.platform,\n      organization,\n      referrer,\n    });\n\n  if (replay.is_archived) {\n    return (\n      <Item isArchived={replay.is_archived}>\n        <Row gap={1}>\n          <StyledIconDelete color=\"gray500\" size=\"md\" />\n          <div>\n            <Row gap={0.5}>{t('Deleted Replay')}</Row>\n            <Row gap={0.5}>\n              {project ? <Avatar size={12} project={project} /> : null}\n              {getShortEventId(replay.id)}\n            </Row>\n          </div>\n        </Row>\n      </Item>\n    );\n  }\n\n  const subText = (\n    <Cols>\n      <StringWalker urls={replay.urls} />\n      <Row gap={1}>\n        <Row gap={0.5}>\n          {project ? <Avatar size={12} project={project} /> : null}\n          <Link to={replayDetails} onClick={trackNavigationEvent}>\n            {getShortEventId(replay.id)}\n          </Link>\n        </Row>\n        <Row gap={0.5}>\n          <IconCalendar color=\"gray300\" size=\"xs\" />\n          <TimeSince date={replay.started_at} />\n        </Row>\n      </Row>\n    </Cols>\n  );\n\n  return (\n    <Item>\n      <UserBadgeFullWidth\n        avatarSize={24}\n        displayName={\n          replay.is_archived ? (\n            replay.user.display_name || t('Unknown User')\n          ) : (\n            <MainLink to={replayDetails} onClick={trackNavigationEvent}>\n              {replay.user.display_name || t('Unknown User')}\n            </MainLink>\n          )\n        }\n        user={getUserBadgeUser(replay)}\n        // this is the subheading for the avatar, so displayEmail in this case is a misnomer\n        displayEmail={subText}\n      />\n    </Item>\n  );\n}\n\nconst StyledIconDelete = styled(IconDelete)`\n  margin: ${space(0.25)};\n`;\n\n// Need to be full width for StringWalker to take up full width and truncate properly\nconst UserBadgeFullWidth = styled(UserBadge)`\n  width: 100%;\n`;\n\nconst Cols = styled('div')`\n  display: flex;\n  flex-direction: column;\n  gap: ${space(0.5)};\n  width: 100%;\n`;\n\nconst Row = styled('div')<{gap: ValidSize; minWidth?: number}>`\n  display: flex;\n  gap: ${p => space(p.gap)};\n  align-items: center;\n  ${p => (p.minWidth ? `min-width: ${p.minWidth}px;` : '')}\n`;\n\nconst MainLink = styled(Link)`\n  font-size: ${p => p.theme.fontSizeLarge};\n`;\n\nexport function TransactionCell({\n  organization,\n  replay,\n}: Props & {organization: Organization}) {\n  const location = useLocation();\n\n  if (replay.is_archived) {\n    return <Item isArchived />;\n  }\n  const hasTxEvent = 'txEvent' in replay;\n  const txDuration = hasTxEvent ? replay.txEvent?.['transaction.duration'] : undefined;\n  return hasTxEvent ? (\n    <SpanOperationBreakdown>\n      {txDuration ? <div>{txDuration}ms</div> : null}\n      {spanOperationRelativeBreakdownRenderer(\n        replay.txEvent,\n        {organization, location},\n        {enableOnClick: false}\n      )}\n    </SpanOperationBreakdown>\n  ) : null;\n}\n\nexport function OSCell({replay}: Props) {\n  const {name, version} = replay.os ?? {};\n  const theme = useTheme();\n  const hasRoomForColumns = useMedia(`(min-width: ${theme.breakpoints.large})`);\n\n  if (replay.is_archived) {\n    return <Item isArchived />;\n  }\n  return (\n    <Item>\n      <ContextIcon\n        name={name ?? ''}\n        version={version && hasRoomForColumns ? version : undefined}\n      />\n    </Item>\n  );\n}\n\nexport function BrowserCell({replay}: Props) {\n  const {name, version} = replay.browser ?? {};\n  const theme = useTheme();\n  const hasRoomForColumns = useMedia(`(min-width: ${theme.breakpoints.large})`);\n\n  if (replay.is_archived) {\n    return <Item isArchived />;\n  }\n  return (\n    <Item>\n      <ContextIcon\n        name={name ?? ''}\n        version={version && hasRoomForColumns ? version : undefined}\n      />\n    </Item>\n  );\n}\n\nexport function DurationCell({replay}: Props) {\n  if (replay.is_archived) {\n    return <Item isArchived />;\n  }\n  return (\n    <Item>\n      <Time>{formatTime(replay.duration.asMilliseconds())}</Time>\n    </Item>\n  );\n}\n\nexport function ErrorCountCell({replay}: Props) {\n  if (replay.is_archived) {\n    return <Item isArchived />;\n  }\n  return (\n    <Item data-test-id=\"replay-table-count-errors\">\n      {replay.count_errors ? (\n        <ErrorCount>\n          <IconFire />\n          {replay.count_errors}\n        </ErrorCount>\n      ) : (\n        <Count>0</Count>\n      )}\n    </Item>\n  );\n}\n\nexport function ActivityCell({replay}: Props) {\n  if (replay.is_archived) {\n    return <Item isArchived />;\n  }\n  const scoreBarPalette = new Array(10).fill([CHART_PALETTE[0][0]]);\n  return (\n    <Item>\n      <ScoreBar\n        size={20}\n        score={replay?.activity ?? 1}\n        palette={scoreBarPalette}\n        radius={0}\n      />\n    </Item>\n  );\n}\n\nconst Item = styled('div')<{isArchived?: boolean}>`\n  display: flex;\n  align-items: center;\n  gap: ${space(1)};\n  padding: ${space(1.5)};\n  ${p => (p.isArchived ? 'opacity: 0.5;' : '')};\n`;\n\nconst Count = styled('span')`\n  font-variant-numeric: tabular-nums;\n`;\n\nconst ErrorCount = styled(Count)`\n  display: flex;\n  align-items: center;\n  gap: ${space(0.5)};\n  color: ${p => p.theme.red400};\n`;\n\nconst Time = styled('span')`\n  font-variant-numeric: tabular-nums;\n`;\n\nconst SpanOperationBreakdown = styled('div')`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  gap: ${space(0.5)};\n  color: ${p => p.theme.gray500};\n  font-size: ${p => p.theme.fontSizeMedium};\n  text-align: right;\n`;\n","import {Fragment, ReactNode} from 'react';\nimport styled from '@emotion/styled';\n\nimport {Alert} from 'sentry/components/alert';\nimport {PanelTable} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport EventView from 'sentry/utils/discover/eventView';\nimport type {Sort} from 'sentry/utils/discover/fields';\nimport getRouteStringFromRoutes from 'sentry/utils/getRouteStringFromRoutes';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport {useRoutes} from 'sentry/utils/useRoutes';\nimport type {ReplayListRecordWithTx} from 'sentry/views/performance/transactionSummary/transactionReplays/useReplaysWithTxData';\nimport HeaderCell from 'sentry/views/replays/replayTable/headerCell';\nimport {\n  ActivityCell,\n  BrowserCell,\n  DurationCell,\n  ErrorCountCell,\n  OSCell,\n  ReplayCell,\n  TransactionCell,\n} from 'sentry/views/replays/replayTable/tableCell';\nimport {ReplayColumn} from 'sentry/views/replays/replayTable/types';\nimport type {ReplayListRecord} from 'sentry/views/replays/types';\n\ntype Props = {\n  fetchError: undefined | Error;\n  isFetching: boolean;\n  replays: undefined | ReplayListRecord[] | ReplayListRecordWithTx[];\n  sort: Sort | undefined;\n  visibleColumns: ReplayColumn[];\n  emptyMessage?: ReactNode;\n};\n\nfunction ReplayTable({\n  fetchError,\n  isFetching,\n  replays,\n  sort,\n  visibleColumns,\n  emptyMessage,\n}: Props) {\n  const routes = useRoutes();\n  const location = useLocation();\n  const organization = useOrganization();\n\n  const tableHeaders = visibleColumns\n    .filter(Boolean)\n    .map(column => <HeaderCell key={column} column={column} sort={sort} />);\n\n  if (fetchError && !isFetching) {\n    return (\n      <StyledPanelTable\n        headers={tableHeaders}\n        isLoading={false}\n        visibleColumns={visibleColumns}\n        data-test-id=\"replay-table\"\n      >\n        <StyledAlert type=\"error\" showIcon>\n          {typeof fetchError === 'string'\n            ? fetchError\n            : t(\n                'Sorry, the list of replays could not be loaded. This could be due to invalid search parameters or an internal systems error.'\n              )}\n        </StyledAlert>\n      </StyledPanelTable>\n    );\n  }\n\n  const referrer = getRouteStringFromRoutes(routes);\n  const eventView = EventView.fromLocation(location);\n\n  return (\n    <StyledPanelTable\n      headers={tableHeaders}\n      isEmpty={replays?.length === 0}\n      isLoading={isFetching}\n      visibleColumns={visibleColumns}\n      disablePadding\n      data-test-id=\"replay-table\"\n      emptyMessage={emptyMessage}\n    >\n      {replays?.map(replay => {\n        return (\n          <Fragment key={replay.id}>\n            {visibleColumns.map(column => {\n              switch (column) {\n                case ReplayColumn.ACTIVITY:\n                  return <ActivityCell key=\"activity\" replay={replay} />;\n\n                case ReplayColumn.BROWSER:\n                  return <BrowserCell key=\"browser\" replay={replay} />;\n\n                case ReplayColumn.COUNT_ERRORS:\n                  return <ErrorCountCell key=\"countErrors\" replay={replay} />;\n\n                case ReplayColumn.DURATION:\n                  return <DurationCell key=\"duration\" replay={replay} />;\n\n                case ReplayColumn.OS:\n                  return <OSCell key=\"os\" replay={replay} />;\n\n                case ReplayColumn.REPLAY:\n                  return (\n                    <ReplayCell\n                      key=\"session\"\n                      replay={replay}\n                      eventView={eventView}\n                      organization={organization}\n                      referrer={referrer}\n                    />\n                  );\n\n                case ReplayColumn.SLOWEST_TRANSACTION:\n                  return (\n                    <TransactionCell\n                      key=\"slowestTransaction\"\n                      replay={replay}\n                      organization={organization}\n                    />\n                  );\n\n                default:\n                  return null;\n              }\n            })}\n          </Fragment>\n        );\n      })}\n    </StyledPanelTable>\n  );\n}\n\nconst StyledPanelTable = styled(PanelTable)<{\n  visibleColumns: ReplayColumn[];\n}>`\n  grid-template-columns: ${p =>\n    p.visibleColumns\n      .filter(Boolean)\n      .map(column => (column === 'replay' ? 'minmax(100px, 1fr)' : 'max-content'))\n      .join(' ')};\n`;\n\nconst StyledAlert = styled(Alert)`\n  border-radius: 0;\n  border-width: 1px 0 0 0;\n  grid-column: 1/-1;\n  margin-bottom: 0;\n`;\n\nexport default ReplayTable;\n","export enum ReplayColumn {\n  ACTIVITY = 'activity',\n  BROWSER = 'browser',\n  COUNT_ERRORS = 'countErrors',\n  DURATION = 'duration',\n  OS = 'os',\n  REPLAY = 'replay',\n  SLOWEST_TRANSACTION = 'slowestTransaction',\n}\n","import type {eventWithTime} from '@sentry-internal/rrweb/typings/types';\nimport type {Duration} from 'moment';\n\nimport type {RawCrumb} from 'sentry/types/breadcrumbs';\n\n// Keep this in sync with the backend blueprint\n// \"ReplayRecord\" is distinct from the common: \"replay = new ReplayReader()\"\nexport type ReplayRecord = {\n  /**\n   * Number that represents how much user activity happened in a replay.\n   */\n  activity: number;\n  browser: {\n    name: null | string;\n    version: null | string;\n  };\n  /**\n   * The number of errors associated with the replay.\n   */\n  count_errors: number;\n  /**\n   * The number of segments that make up the replay.\n   */\n  count_segments: number;\n  /**\n   * The number of urls visited in the replay.\n   */\n  count_urls: number;\n  device: {\n    brand: null | string;\n    family: null | string;\n    model_id: null | string;\n    name: null | string;\n  };\n  dist: null | string;\n  /**\n   * Difference of `finished_at` and `started_at` in seconds.\n   */\n  duration: Duration;\n  environment: null | string;\n  error_ids: string[];\n  /**\n   * The **latest** timestamp received as determined by the SDK.\n   */\n  finished_at: Date;\n  /**\n   * The ID of the Replay instance\n   */\n  id: string;\n  /**\n   * Whether the replay was deleted.\n   * When deleted the rrweb data & attachments are removed from blob storage,\n   * but the record of the replay is not removed.\n   */\n  is_archived: boolean;\n  os: {\n    name: null | string;\n    version: null | string;\n  };\n  platform: string;\n  project_id: string;\n  releases: null | string[];\n  sdk: {\n    name: string;\n    version: string;\n  };\n  /**\n   * The **earliest** timestamp received as determined by the SDK.\n   */\n  started_at: Date;\n  tags: Record<string, string[]>;\n  trace_ids: string[];\n  urls: string[];\n  user: {\n    display_name: null | string;\n    email: null | string;\n    id: null | string;\n    ip: null | string;\n    username: null | string;\n  };\n};\n\n// The ReplayRecord fields, but with nested fields represented as `foo.bar`.\nexport type ReplayRecordNestedFieldName =\n  | keyof ReplayRecord\n  | `browser.${keyof ReplayRecord['browser']}`\n  | `device.${keyof ReplayRecord['device']}`\n  | `os.${keyof ReplayRecord['os']}`\n  | `user.${keyof ReplayRecord['user']}`;\n\nexport type ReplayListLocationQuery = {\n  cursor?: string;\n  end?: string;\n  environment?: string[];\n  field?: string[];\n  limit?: string;\n  offset?: string;\n  project?: string[];\n  query?: string;\n  sort?: string;\n  start?: string;\n  statsPeriod?: string;\n  utc?: 'true' | 'false';\n};\n\n// Sync with REPLAY_LIST_FIELDS below\nexport type ReplayListRecord = Pick<\n  ReplayRecord,\n  | 'activity'\n  | 'browser'\n  | 'count_errors'\n  | 'duration'\n  | 'finished_at'\n  | 'id'\n  | 'is_archived'\n  | 'os'\n  | 'project_id'\n  | 'started_at'\n  | 'urls'\n  | 'user'\n>;\n\n// Sync with ReplayListRecord above\nexport const REPLAY_LIST_FIELDS: ReplayRecordNestedFieldName[] = [\n  'activity',\n  'browser.name',\n  'browser.version',\n  'count_errors',\n  'duration',\n  'finished_at',\n  'id',\n  'is_archived',\n  'os.name',\n  'os.version',\n  'project_id',\n  'started_at',\n  'urls',\n  'user',\n];\n\nexport type ReplaySegment = {\n  dateAdded: string;\n  projectId: string;\n  replayId: string;\n  segmentId: number;\n};\n\n/**\n * Highlight Replay Plugin types\n *\n * See also HighlightParams in static/app/components/replays/replayContext.tsx\n */\nexport interface Highlight {\n  nodeId: number;\n  text: string;\n  color?: string;\n}\n\nexport type RecordingEvent = eventWithTime;\n\nexport interface ReplaySpan<T = Record<string, any>> {\n  data: T;\n  endTimestamp: number;\n  id: string;\n  op: string;\n  startTimestamp: number;\n  timestamp: number;\n  description?: string;\n}\n\nexport type MemorySpan = ReplaySpan<{\n  memory: {\n    jsHeapSizeLimit: number;\n    totalJSHeapSize: number;\n    usedJSHeapSize: number;\n  };\n}>;\n\nexport type NetworkSpan = ReplaySpan;\n\ntype Overwrite<T, U> = Pick<T, Exclude<keyof T, keyof U>> & U;\n\nexport type ReplayCrumb = Overwrite<RawCrumb, {timestamp: number}>;\n\n/**\n * This is a result of a custom discover query\n */\nexport interface ReplayError {\n  ['error.type']: string[];\n  ['error.value']: string[]; // deprecated, use title instead. See organization_replay_events_meta.py\n  id: string;\n  issue: string;\n  ['issue.id']: number;\n  ['project.name']: string;\n  timestamp: string;\n  title: string;\n}\n"],"names":["DEFAULT_SORT","async","_ref","api","organization","location","eventView","queryReferrer","path","slug","payload","getEventsAPIPayload","field","map","split","Array","from","Set","data","_textStatus","resp","requestPromise","includeAllArgs","query","cursor","project","ALL_ACCESS_PROJECTS","fetchError","undefined","pageLinks","getResponseHeader","replays","mapResponseToReplayRecord","error","responseJSON","detail","Sentry","useApi","setData","useState","isFetching","loadReplays","useCallback","clear","prev","response","fetchReplayList","useEffect","SortableHeader","props","useLocation","useOrganization","sort","label","tooltip","_jsxs","Header","children","_jsx","StyledQuestionTooltip","size","position","title","fieldName","arrowDirection","kind","sortArrow","IconArrow","color","direction","SortLink","role","endsWith","onClick","column","trackAnalytics","to","pathname","displayName","_styled","target","space","Link","name","styles","QuestionTooltip","ReplayColumn","ACTIVITY","t","BROWSER","COUNT_ERRORS","DURATION","OS","REPLAY","SLOWEST_TRANSACTION","getUserBadgeUser","replay","is_archived","username","email","id","ip_address","user","display_name","ip","ReplayCell","referrer","projects","useProjects","find","p","project_id","replayDetails","generateQueryStringObject","trackNavigationEvent","platform","Item","isArchived","Row","gap","StyledIconDelete","Avatar","getShortEventId","subText","Cols","StringWalker","urls","IconCalendar","TimeSince","date","started_at","UserBadgeFullWidth","avatarSize","MainLink","displayEmail","IconDelete","UserBadge","minWidth","theme","fontSizeLarge","TransactionCell","_ref2","hasTxEvent","txDuration","txEvent","SpanOperationBreakdown","spanOperationRelativeBreakdownRenderer","enableOnClick","OSCell","_ref3","version","os","useTheme","hasRoomForColumns","useMedia","breakpoints","large","ContextIcon","BrowserCell","_ref4","browser","DurationCell","_ref5","Time","formatTime","duration","asMilliseconds","ErrorCountCell","_ref6","count_errors","ErrorCount","IconFire","Count","ActivityCell","_ref7","scoreBarPalette","fill","CHART_PALETTE","ScoreBar","score","activity","palette","radius","red400","gray500","fontSizeMedium","ReplayTable","visibleColumns","emptyMessage","routes","useRoutes","tableHeaders","filter","Boolean","HeaderCell","StyledPanelTable","headers","isLoading","StyledAlert","type","showIcon","getRouteStringFromRoutes","EventView","fromLocation","isEmpty","length","disablePadding","Fragment","PanelTable","join","Alert","REPLAY_LIST_FIELDS"],"sourceRoot":""}