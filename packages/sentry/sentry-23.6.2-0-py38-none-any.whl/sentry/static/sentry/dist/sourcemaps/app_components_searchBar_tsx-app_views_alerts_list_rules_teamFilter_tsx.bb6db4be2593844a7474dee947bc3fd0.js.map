{"version":3,"file":"chunks/app_components_searchBar_tsx-app_views_alerts_list_rules_teamFilter_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/searchBar.tsx","webpack:///./app/views/alerts/list/rules/teamFilter.tsx"],"sourcesContent":["import {useCallback, useEffect, useRef, useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport {Button} from 'sentry/components/button';\nimport {InputGroup, InputProps} from 'sentry/components/inputGroup';\nimport {IconSearch} from 'sentry/icons';\nimport {IconClose} from 'sentry/icons/iconClose';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\n\ninterface SearchBarProps extends Omit<InputProps, 'onChange'> {\n  defaultQuery?: string;\n  onChange?: (query: string) => void;\n  onSearch?: (query: string) => void;\n  query?: string;\n  trailing?: React.ReactNode;\n  width?: string;\n}\n\nfunction SearchBar({\n  query: queryProp,\n  defaultQuery = '',\n  onChange,\n  onSearch,\n  width,\n  size,\n  className,\n  trailing,\n  ...inputProps\n}: SearchBarProps) {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [query, setQuery] = useState(queryProp ?? defaultQuery);\n\n  // if query prop keeps changing we should treat this as\n  // a controlled component and its internal state should be in sync\n  useEffect(() => {\n    if (typeof queryProp === 'string') {\n      setQuery(queryProp);\n    }\n  }, [queryProp]);\n\n  const onQueryChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      const {value} = e.target;\n      setQuery(value);\n      onChange?.(value);\n    },\n    [onChange]\n  );\n\n  const onSubmit = useCallback(\n    (e: React.FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      inputRef.current?.blur();\n      onSearch?.(query);\n    },\n    [onSearch, query]\n  );\n\n  const clearSearch = useCallback(() => {\n    setQuery('');\n    onChange?.('');\n    onSearch?.('');\n  }, [onChange, onSearch]);\n\n  return (\n    <FormWrap onSubmit={onSubmit} className={className}>\n      <InputGroup>\n        <InputGroup.LeadingItems disablePointerEvents>\n          <IconSearch color=\"subText\" size={size === 'xs' ? 'xs' : 'sm'} />\n        </InputGroup.LeadingItems>\n        <StyledInput\n          {...inputProps}\n          ref={inputRef}\n          type=\"text\"\n          name=\"query\"\n          autoComplete=\"off\"\n          value={query}\n          onChange={onQueryChange}\n          width={width}\n          size={size}\n        />\n        <InputGroup.TrailingItems>\n          {trailing}\n          {!!query && (\n            <SearchBarTrailingButton\n              size=\"zero\"\n              borderless\n              onClick={clearSearch}\n              icon={<IconClose size=\"xs\" />}\n              aria-label={t('Clear')}\n            />\n          )}\n        </InputGroup.TrailingItems>\n      </InputGroup>\n    </FormWrap>\n  );\n}\n\nconst FormWrap = styled('form')`\n  display: block;\n  position: relative;\n`;\n\nconst StyledInput = styled(InputGroup.Input)`\n  ${p => p.width && `width: ${p.width};`}\n`;\n\nexport const SearchBarTrailingButton = styled(Button)`\n  color: ${p => p.theme.subText};\n  padding: ${space(0.5)};\n`;\n\nexport default SearchBar;\n","import {Fragment, useMemo} from 'react';\nimport styled from '@emotion/styled';\nimport debounce from 'lodash/debounce';\n\nimport TeamAvatar from 'sentry/components/avatar/teamAvatar';\nimport Badge from 'sentry/components/badge';\nimport {CompactSelect} from 'sentry/components/compactSelect';\nimport {DEFAULT_DEBOUNCE_DURATION} from 'sentry/constants';\nimport {IconUser} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {useTeams} from 'sentry/utils/useTeams';\n\ninterface Props {\n  handleChangeFilter: (activeFilters: string[]) => void;\n  selectedTeams: string[];\n  /**\n   * only show teams user is a member of\n   */\n  showIsMemberTeams?: boolean;\n  /**\n   * show My Teams as the default dropdown description\n   */\n  showMyTeamsDescription?: boolean;\n  /**\n   * show suggested options (My Teams and Unassigned)\n   */\n  showSuggestedOptions?: boolean;\n}\n\nconst suggestedOptions = [\n  {\n    label: t('My Teams'),\n    value: 'myteams',\n  },\n  {\n    label: t('Unassigned'),\n    value: 'unassigned',\n  },\n];\n\nfunction TeamFilter({\n  selectedTeams,\n  handleChangeFilter,\n  showIsMemberTeams = false,\n  showSuggestedOptions = true,\n  showMyTeamsDescription = false,\n}: Props) {\n  const {teams, onSearch, fetching} = useTeams({provideUserTeams: showIsMemberTeams});\n\n  const teamOptions = useMemo(\n    () =>\n      teams.map(team => ({\n        value: team.id,\n        label: `#${team.slug}`,\n        leadingItems: <TeamAvatar team={team} size={18} />,\n      })),\n    [teams]\n  );\n\n  const [triggerIcon, triggerLabel] = useMemo(() => {\n    const firstSelectedSuggestion =\n      selectedTeams[0] && suggestedOptions.find(opt => opt.value === selectedTeams[0]);\n\n    const firstSelectedTeam =\n      selectedTeams[0] && teams.find(team => team.id === selectedTeams[0]);\n\n    if (firstSelectedSuggestion) {\n      return [<IconUser key={0} />, firstSelectedSuggestion.label];\n    }\n\n    if (firstSelectedTeam) {\n      return [\n        <TeamAvatar team={firstSelectedTeam} size={16} key={0} />,\n        `#${firstSelectedTeam.slug}`,\n      ];\n    }\n\n    return [\n      <IconUser key={0} />,\n      showMyTeamsDescription ? t('My Teams') : t('All Teams'),\n    ];\n  }, [selectedTeams, teams, showMyTeamsDescription]);\n\n  return (\n    <CompactSelect\n      multiple\n      clearable\n      searchable\n      loading={fetching}\n      menuTitle={t('Filter teams')}\n      options={\n        showSuggestedOptions\n          ? [\n              {value: '_suggested', label: t('Suggested'), options: suggestedOptions},\n              {value: '_teams', label: t('Teams'), options: teamOptions},\n            ]\n          : teamOptions\n      }\n      value={selectedTeams}\n      onSearch={debounce(val => void onSearch(val), DEFAULT_DEBOUNCE_DURATION)}\n      onChange={opts => {\n        // Compact select type inference does not work - onChange type is actually T | null.\n        if (!opts) {\n          return handleChangeFilter([]);\n        }\n        return handleChangeFilter(opts.map(opt => opt.value));\n      }}\n      triggerLabel={\n        <Fragment>\n          {triggerLabel}\n          {selectedTeams.length > 1 && (\n            <StyledBadge text={`+${selectedTeams.length - 1}`} />\n          )}\n        </Fragment>\n      }\n      triggerProps={{icon: triggerIcon}}\n    />\n  );\n}\n\nexport default TeamFilter;\n\nconst StyledBadge = styled(Badge)`\n  flex-shrink: 0;\n`;\n"],"names":["SearchBar","_ref","query","queryProp","defaultQuery","onChange","onSearch","width","size","className","trailing","inputProps","inputRef","useRef","setQuery","useState","useEffect","onQueryChange","useCallback","e","value","target","onSubmit","preventDefault","current","blur","clearSearch","_jsx","FormWrap","children","_jsxs","InputGroup","LeadingItems","disablePointerEvents","IconSearch","color","StyledInput","ref","type","name","autoComplete","TrailingItems","SearchBarTrailingButton","borderless","onClick","icon","IconClose","t","displayName","_styled","styles","Input","p","Button","theme","subText","space","suggestedOptions","label","TeamFilter","selectedTeams","handleChangeFilter","showIsMemberTeams","showSuggestedOptions","showMyTeamsDescription","teams","fetching","useTeams","provideUserTeams","teamOptions","useMemo","map","team","id","slug","leadingItems","TeamAvatar","triggerIcon","triggerLabel","firstSelectedSuggestion","find","opt","firstSelectedTeam","IconUser","CompactSelect","multiple","clearable","searchable","loading","menuTitle","options","debounce","val","DEFAULT_DEBOUNCE_DURATION","opts","Fragment","length","StyledBadge","text","triggerProps","Badge"],"sourceRoot":""}