{"version":3,"file":"chunks/app_views_admin_adminOverview_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/admin/adminOverview/apiChart.tsx","webpack:///./app/views/admin/adminOverview/eventChart.tsx","webpack:///./app/views/admin/adminOverview/index.tsx"],"sourcesContent":["import {Component} from 'react';\n\nimport {Client} from 'sentry/api';\nimport MiniBarChart from 'sentry/components/charts/miniBarChart';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {TimeseriesValue} from 'sentry/types';\nimport theme from 'sentry/utils/theme';\nimport withApi from 'sentry/utils/withApi';\n\nconst initialState = {\n  error: false,\n  loading: true,\n  rawData: {\n    'client-api.all-versions.responses.2xx': [],\n    'client-api.all-versions.responses.4xx': [],\n    'client-api.all-versions.responses.5xx': [],\n  },\n};\n\ntype Props = {\n  api: Client;\n  resolution: string;\n  since: number;\n};\n\ntype State = {\n  error: boolean;\n  loading: boolean;\n  rawData: Record<string, TimeseriesValue[]>;\n};\n\nclass ApiChart extends Component<Props, State> {\n  state: State = initialState;\n\n  UNSAFE_componentWillMount() {\n    this.fetchData();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (this.props.since !== nextProps.since) {\n      this.setState(initialState, this.fetchData);\n    }\n  }\n\n  fetchData = () => {\n    const statNameList = [\n      'client-api.all-versions.responses.2xx',\n      'client-api.all-versions.responses.4xx',\n      'client-api.all-versions.responses.5xx',\n    ];\n\n    statNameList.forEach(statName => {\n      this.props.api.request('/internal/stats/', {\n        method: 'GET',\n        data: {\n          since: this.props.since,\n          resolution: this.props.resolution,\n          key: statName,\n        },\n        success: data => {\n          this.setState(prevState => {\n            const rawData = prevState.rawData;\n            rawData[statName] = data;\n            return {\n              rawData,\n            };\n          }, this.requestFinished);\n        },\n        error: () => {\n          this.setState({\n            error: true,\n          });\n        },\n      });\n    });\n  };\n\n  requestFinished = () => {\n    const {rawData} = this.state;\n    if (\n      rawData['client-api.all-versions.responses.2xx'] &&\n      rawData['client-api.all-versions.responses.4xx'] &&\n      rawData['client-api.all-versions.responses.5xx']\n    ) {\n      this.setState({\n        loading: false,\n      });\n    }\n  };\n\n  processRawSeries(series: TimeseriesValue[]) {\n    return series.map(item => ({name: item[0] * 1000, value: item[1]}));\n  }\n\n  getChartSeries() {\n    const {rawData} = this.state;\n    return [\n      {\n        seriesName: '2xx',\n        data: this.processRawSeries(rawData['client-api.all-versions.responses.2xx']),\n        color: theme.green200,\n      },\n      {\n        seriesName: '4xx',\n        data: this.processRawSeries(rawData['client-api.all-versions.responses.4xx']),\n        color: theme.blue300,\n      },\n      {\n        seriesName: '5xx',\n        data: this.processRawSeries(rawData['client-api.all-versions.responses.5xx']),\n        color: theme.red200,\n      },\n    ];\n  }\n\n  render() {\n    const {loading, error} = this.state;\n    if (loading) {\n      return <LoadingIndicator />;\n    }\n    if (error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n\n    const series = this.getChartSeries();\n    const colors = series.map(({color}) => color);\n    return (\n      <MiniBarChart\n        series={series}\n        colors={colors}\n        height={110}\n        stacked\n        isGroupedByDate\n        showTimeInTooltip\n        labelYAxisExtents\n      />\n    );\n  }\n}\n\nexport default withApi(ApiChart);\n","import {Component} from 'react';\n\nimport {Client} from 'sentry/api';\nimport MiniBarChart from 'sentry/components/charts/miniBarChart';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {t} from 'sentry/locale';\nimport {TimeseriesValue} from 'sentry/types';\nimport {SeriesDataUnit} from 'sentry/types/echarts';\nimport theme from 'sentry/utils/theme';\nimport withApi from 'sentry/utils/withApi';\n\ntype Props = {\n  api: Client;\n  resolution: string;\n  since: number;\n};\n\ntype State = {\n  error: boolean;\n  loading: boolean;\n  rawData: Record<string, TimeseriesValue[]>;\n  stats: Record<string, SeriesDataUnit[]>;\n};\n\nconst initialState: State = {\n  error: false,\n  loading: true,\n  rawData: {\n    'events.total': [],\n    'events.dropped': [],\n  },\n  stats: {received: [], rejected: []},\n};\n\nclass EventChart extends Component<Props, State> {\n  state: State = initialState;\n\n  UNSAFE_componentWillMount() {\n    this.fetchData();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (this.props.since !== nextProps.since) {\n      this.setState(initialState, this.fetchData);\n    }\n  }\n\n  fetchData = () => {\n    const statNameList = ['events.total', 'events.dropped'];\n\n    statNameList.forEach(statName => {\n      // query the organization stats via a separate call as its possible the project stats\n      // are too heavy\n      this.props.api.request('/internal/stats/', {\n        method: 'GET',\n        data: {\n          since: this.props.since,\n          resolution: this.props.resolution,\n          key: statName,\n        },\n        success: data => {\n          this.setState(prevState => {\n            const rawData = prevState.rawData;\n            rawData[statName] = data;\n            return {\n              rawData,\n            };\n          }, this.requestFinished);\n        },\n        error: () => {\n          this.setState({\n            error: true,\n          });\n        },\n      });\n    });\n  };\n\n  requestFinished() {\n    const {rawData} = this.state;\n    if (rawData['events.total'] && rawData['events.dropped']) {\n      this.processOrgData();\n    }\n  }\n\n  processOrgData() {\n    const {rawData} = this.state;\n    const sReceived: Record<string, number> = {};\n    const sRejected: Record<string, number> = {};\n    const aReceived = [0, 0]; // received, points\n\n    rawData['events.total'].forEach((point, idx) => {\n      const dReceived = point[1];\n      const dRejected = rawData['events.dropped'][idx]?.[1];\n      const ts = point[0];\n      if (sReceived[ts] === undefined) {\n        sReceived[ts] = dReceived;\n        sRejected[ts] = dRejected;\n      } else {\n        sReceived[ts] += dReceived;\n        sRejected[ts] += dRejected;\n      }\n      if (dReceived > 0) {\n        aReceived[0] += dReceived;\n        aReceived[1] += 1;\n      }\n    });\n\n    this.setState({\n      stats: {\n        rejected: Object.keys(sRejected).map(ts => ({\n          name: parseInt(ts, 10) * 1000,\n          value: sRejected[ts] || 0,\n        })),\n        accepted: Object.keys(sReceived).map(ts =>\n          // total number of events accepted (received - rejected)\n          ({name: parseInt(ts, 10) * 1000, value: sReceived[ts] - sRejected[ts]})\n        ),\n      },\n      loading: false,\n    });\n  }\n\n  getChartSeries() {\n    const {stats} = this.state;\n\n    return [\n      {\n        seriesName: t('Accepted'),\n        data: stats.accepted,\n        color: theme.blue300,\n      },\n      {\n        seriesName: t('Dropped'),\n        data: stats.rejected,\n        color: theme.red200,\n      },\n    ];\n  }\n\n  render() {\n    const {loading, error} = this.state;\n    if (loading) {\n      return <LoadingIndicator />;\n    }\n    if (error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n    const series = this.getChartSeries();\n    const colors = series.map(({color}) => color);\n    return (\n      <MiniBarChart\n        series={series}\n        colors={colors}\n        height={110}\n        stacked\n        isGroupedByDate\n        showTimeInTooltip\n        labelYAxisExtents\n      />\n    );\n  }\n}\n\nexport default withApi(EventChart);\n","import {Fragment} from 'react';\n\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\n\nimport ApiChart from './apiChart';\nimport EventChart from './eventChart';\n\nfunction AdminOverview() {\n  const resolution = '1h';\n  const since = new Date().getTime() / 1000 - 3600 * 24 * 7;\n\n  return (\n    <SentryDocumentTitle title={t('Admin Overview')}>\n      <Fragment>\n        <h3>{t('System Overview')}</h3>\n\n        <Panel key=\"events\">\n          <PanelHeader>{t('Event Throughput')}</PanelHeader>\n          <PanelBody withPadding>\n            <EventChart since={since} resolution={resolution} />\n          </PanelBody>\n        </Panel>\n\n        <Panel key=\"api\">\n          <PanelHeader>{t('API Responses')}</PanelHeader>\n          <PanelBody withPadding>\n            <ApiChart since={since} resolution={resolution} />\n          </PanelBody>\n        </Panel>\n      </Fragment>\n    </SentryDocumentTitle>\n  );\n}\n\nexport default AdminOverview;\n"],"names":["initialState","error","loading","rawData","ApiChart","Component","constructor","arguments","_defineProperty","forEach","statName","this","props","api","request","method","data","since","resolution","key","success","setState","prevState","requestFinished","state","UNSAFE_componentWillMount","fetchData","UNSAFE_componentWillReceiveProps","nextProps","processRawSeries","series","map","item","name","value","getChartSeries","seriesName","color","theme","green200","blue300","red200","render","_jsx","LoadingIndicator","LoadingError","onRetry","colors","_ref","MiniBarChart","height","stacked","isGroupedByDate","showTimeInTooltip","labelYAxisExtents","displayName","withApi","stats","received","rejected","EventChart","processOrgData","sReceived","sRejected","aReceived","point","idx","dReceived","dRejected","ts","undefined","Object","keys","parseInt","accepted","t","AdminOverview","Date","getTime","SentryDocumentTitle","title","children","_jsxs","Fragment","Panel","PanelHeader","PanelBody","withPadding"],"sourceRoot":""}