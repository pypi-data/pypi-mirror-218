{"version":3,"file":"chunks/app_views_settings_organizationAuthTokens_newAuthToken_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/settings/organizationAuthTokens/newAuthToken.tsx"],"sourcesContent":["import {useCallback, useState} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport Alert from 'sentry/components/alert';\nimport {Button} from 'sentry/components/button';\nimport FieldGroup from 'sentry/components/forms/fieldGroup';\nimport TextField from 'sentry/components/forms/fields/textField';\nimport Form from 'sentry/components/forms/form';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'sentry/components/panels';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport TextCopyInput from 'sentry/components/textCopyInput';\nimport {t, tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Organization, OrgAuthToken} from 'sentry/types';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport {handleXhrErrorResponse} from 'sentry/utils/handleXhrErrorResponse';\nimport {useMutation, useQueryClient} from 'sentry/utils/queryClient';\nimport RequestError from 'sentry/utils/requestError/requestError';\nimport useApi from 'sentry/utils/useApi';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\nimport {makeFetchOrgAuthTokensForOrgQueryKey} from 'sentry/views/settings/organizationAuthTokens';\n\ntype CreateTokenQueryVariables = {\n  name: string;\n};\n\ntype OrgAuthTokenWithToken = OrgAuthToken & {token: string};\n\ntype CreateOrgAuthTokensResponse = OrgAuthTokenWithToken;\n\nfunction AuthTokenCreateForm({\n  organization,\n  onCreatedToken,\n}: {\n  onCreatedToken: (token: OrgAuthTokenWithToken) => void;\n  organization: Organization;\n}) {\n  const initialData = {\n    name: '',\n  };\n\n  const api = useApi();\n  const queryClient = useQueryClient();\n\n  const handleGoBack = useCallback(() => {\n    browserHistory.push(normalizeUrl(`/settings/${organization.slug}/auth-tokens/`));\n  }, [organization.slug]);\n\n  const {mutate: submitToken} = useMutation<\n    CreateOrgAuthTokensResponse,\n    RequestError,\n    CreateTokenQueryVariables\n  >({\n    mutationFn: ({name}) => {\n      addLoadingMessage();\n      return api.requestPromise(`/organizations/${organization.slug}/org-auth-tokens/`, {\n        method: 'POST',\n        data: {\n          name,\n        },\n      });\n    },\n\n    onSuccess: (token: OrgAuthTokenWithToken) => {\n      addSuccessMessage(t('Created auth token.'));\n\n      queryClient.invalidateQueries({\n        queryKey: makeFetchOrgAuthTokensForOrgQueryKey({orgSlug: organization.slug}),\n      });\n\n      onCreatedToken(token);\n    },\n    onError: error => {\n      const message = t('Failed to create a new auth token.');\n      handleXhrErrorResponse(message, error);\n      addErrorMessage(message);\n    },\n  });\n\n  return (\n    <Form\n      apiMethod=\"POST\"\n      initialData={initialData}\n      apiEndpoint={`/organizations/${organization.slug}/org-auth-tokens/`}\n      onSubmit={({name}) => {\n        submitToken({\n          name,\n        });\n      }}\n      onCancel={handleGoBack}\n      submitLabel={t('Create Auth Token')}\n      requireChanges\n    >\n      <TextField\n        name=\"name\"\n        label={t('Name')}\n        required\n        help={t('A name to help you identify this token.')}\n      />\n\n      <FieldGroup\n        label={t('Scopes')}\n        help={t('Organization auth tokens currently have a limited set of scopes.')}\n      >\n        <div>\n          <div>org:ci</div>\n          <ScopeHelpText>{t('Source Map Upload, Release Creation')}</ScopeHelpText>\n        </div>\n      </FieldGroup>\n    </Form>\n  );\n}\n\nfunction ShowNewToken({\n  token,\n  organization,\n}: {\n  organization: Organization;\n  token: OrgAuthTokenWithToken;\n}) {\n  const handleGoBack = useCallback(() => {\n    browserHistory.push(normalizeUrl(`/settings/${organization.slug}/auth-tokens/`));\n  }, [organization.slug]);\n\n  return (\n    <div>\n      <Alert type=\"warning\" showIcon system>\n        {t(\"Please copy this token to a safe place â€” it won't be shown again!\")}\n      </Alert>\n\n      <PanelItem>\n        <InputWrapper>\n          <FieldGroupNoPadding\n            label={t('Token')}\n            help={t('You can only view this token when it was created.')}\n            inline\n            flexibleControlStateSize\n          >\n            <TextCopyInput aria-label={t('Generated token')}>\n              {getDynamicText({value: token.token, fixed: 'ORG_AUTH_TOKEN'})}\n            </TextCopyInput>\n          </FieldGroupNoPadding>\n        </InputWrapper>\n      </PanelItem>\n\n      <PanelItem>\n        <ButtonWrapper>\n          <Button onClick={handleGoBack} priority=\"primary\">\n            {t('Done')}\n          </Button>\n        </ButtonWrapper>\n      </PanelItem>\n    </div>\n  );\n}\n\nexport function OrganizationAuthTokensNewAuthToken({\n  organization,\n}: {\n  organization: Organization;\n}) {\n  const [newToken, setNewToken] = useState<OrgAuthTokenWithToken | null>(null);\n\n  return (\n    <div>\n      <SentryDocumentTitle title={t('Create New Auth Token')} />\n      <SettingsPageHeader title={t('Create New Auth Token')} />\n\n      <TextBlock>\n        {t(\n          \"Authentication tokens allow you to perform actions against the Sentry API on behalf of your organization. They're the easiest way to get started using the API.\"\n        )}\n      </TextBlock>\n      <TextBlock>\n        {tct(\n          'For more information on how to use the web API, see our [link:documentation].',\n          {\n            link: <ExternalLink href=\"https://docs.sentry.io/api/\" />,\n          }\n        )}\n      </TextBlock>\n      <Panel>\n        <PanelHeader>{t('Create New Auth Token')}</PanelHeader>\n\n        <PanelBody>\n          {newToken ? (\n            <ShowNewToken token={newToken} organization={organization} />\n          ) : (\n            <AuthTokenCreateForm\n              organization={organization}\n              onCreatedToken={setNewToken}\n            />\n          )}\n        </PanelBody>\n      </Panel>\n    </div>\n  );\n}\n\nexport default withOrganization(OrganizationAuthTokensNewAuthToken);\n\nconst InputWrapper = styled('div')`\n  flex: 1;\n`;\n\nconst ButtonWrapper = styled('div')`\n  margin-left: auto;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  font-size: ${p => p.theme.fontSizeSmall};\n  gap: ${space(1)};\n`;\n\nconst FieldGroupNoPadding = styled(FieldGroup)`\n  padding: 0;\n`;\n\nconst ScopeHelpText = styled('div')`\n  color: ${p => p.theme.gray300};\n`;\n"],"names":["AuthTokenCreateForm","_ref","organization","onCreatedToken","api","useApi","queryClient","useQueryClient","handleGoBack","useCallback","browserHistory","push","normalizeUrl","slug","mutate","submitToken","useMutation","mutationFn","_ref2","name","addLoadingMessage","requestPromise","method","data","onSuccess","token","addSuccessMessage","t","invalidateQueries","queryKey","makeFetchOrgAuthTokensForOrgQueryKey","orgSlug","onError","error","message","handleXhrErrorResponse","addErrorMessage","_jsxs","Form","apiMethod","initialData","apiEndpoint","onSubmit","_ref3","onCancel","submitLabel","requireChanges","children","_jsx","TextField","label","required","help","FieldGroup","ScopeHelpText","ShowNewToken","_ref4","Alert","type","showIcon","system","PanelItem","InputWrapper","FieldGroupNoPadding","inline","flexibleControlStateSize","TextCopyInput","getDynamicText","value","fixed","ButtonWrapper","Button","onClick","priority","OrganizationAuthTokensNewAuthToken","_ref5","newToken","setNewToken","useState","SentryDocumentTitle","title","SettingsPageHeader","TextBlock","tct","link","ExternalLink","href","Panel","PanelHeader","PanelBody","displayName","withOrganization","_styled","target","styles","p","theme","fontSizeSmall","space","gray300"],"sourceRoot":""}