{"version":3,"file":"chunks/app_views_settings_organizationTeams_teamSettings_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/forms/formPanel.tsx","webpack:///./app/components/forms/jsonForm.tsx","webpack:///./app/data/forms/teamSettingsFields.tsx","webpack:///./app/utils/slugify.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/organizationTeams/teamSettings/index.tsx","webpack:///./app/views/settings/project/permissionAlert.tsx"],"sourcesContent":["import {useCallback, useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport FieldFromConfig from 'sentry/components/forms/fieldFromConfig';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {IconChevron} from 'sentry/icons';\nimport {Scope} from 'sentry/types';\nimport {sanitizeQuerySelector} from 'sentry/utils/sanitizeQuerySelector';\n\nimport {FieldObject, JsonFormObject} from './types';\n\ntype Props = {\n  /**\n   * List of fields to render\n   */\n  fields: FieldObject[];\n  access?: Set<Scope>;\n  additionalFieldProps?: {[key: string]: any};\n  /**\n   * Can the PanelBody be hidden with a click?\n   */\n  collapsible?: boolean;\n  /**\n   * Disables the entire form\n   */\n  disabled?: boolean;\n  features?: Record<string, any>;\n  /**\n   * The name of the field that should be highlighted\n   */\n  highlighted?: string;\n  initiallyCollapsed?: boolean;\n  /**\n   * Renders inside of PanelBody before PanelBody close\n   */\n  renderFooter?: (arg: JsonFormObject) => React.ReactNode;\n  /**\n   * Renders inside of PanelBody at the start\n   */\n  renderHeader?: (arg: JsonFormObject) => React.ReactNode;\n  /**\n   * Panel title\n   */\n  title?: React.ReactNode;\n};\n\nfunction FormPanel({\n  additionalFieldProps = {},\n  title,\n  fields,\n  access,\n  disabled,\n  renderFooter,\n  renderHeader,\n  collapsible,\n  initiallyCollapsed = false,\n  ...otherProps\n}: Props) {\n  const [collapsed, setCollapse] = useState(initiallyCollapsed);\n  const handleCollapseToggle = useCallback(() => setCollapse(current => !current), []);\n\n  return (\n    <Panel id={typeof title === 'string' ? sanitizeQuerySelector(title) : undefined}>\n      {title && (\n        <PanelHeader>\n          {title}\n          {collapsible && (\n            <Collapse onClick={handleCollapseToggle}>\n              <IconChevron\n                data-test-id=\"form-panel-collapse-chevron\"\n                direction={collapsed ? 'down' : 'up'}\n                size=\"xs\"\n              />\n            </Collapse>\n          )}\n        </PanelHeader>\n      )}\n      <PanelBody hidden={collapsed}>\n        {typeof renderHeader === 'function' && renderHeader({title, fields})}\n\n        {fields.map(field => {\n          if (typeof field === 'function') {\n            return field();\n          }\n\n          const {defaultValue: _, ...fieldWithoutDefaultValue} = field;\n\n          // Allow the form panel disabled prop to override the fields\n          // disabled prop, with fallback to the fields disabled state.\n          if (disabled === true) {\n            fieldWithoutDefaultValue.disabled = true;\n            fieldWithoutDefaultValue.disabledReason = undefined;\n          }\n\n          return (\n            <FieldFromConfig\n              access={access}\n              disabled={disabled}\n              key={field.name}\n              {...otherProps}\n              {...additionalFieldProps}\n              field={fieldWithoutDefaultValue}\n              highlighted={otherProps.highlighted === `#${field.name}`}\n            />\n          );\n        })}\n        {typeof renderFooter === 'function' && renderFooter({title, fields})}\n      </PanelBody>\n    </Panel>\n  );\n}\n\nexport default FormPanel;\n\nconst Collapse = styled('span')`\n  cursor: pointer;\n`;\n","import {Component, Fragment} from 'react';\nimport {WithRouterProps} from 'react-router';\nimport * as Sentry from '@sentry/react';\nimport scrollToElement from 'scroll-to-element';\n\nimport {defined} from 'sentry/utils';\nimport {sanitizeQuerySelector} from 'sentry/utils/sanitizeQuerySelector';\n// eslint-disable-next-line no-restricted-imports\nimport withSentryRouter from 'sentry/utils/withSentryRouter';\n\nimport FormPanel from './formPanel';\nimport {Field, FieldObject, JsonFormObject} from './types';\n\ntype Props = {\n  additionalFieldProps?: {[key: string]: any};\n\n  /**\n   * If `forms` is not defined, `title` + `fields` must be required.\n   * Allows more fine grain control of title/fields\n   */\n  fields?: FieldObject[];\n\n  /**\n   * Fields that are grouped by \"section\"\n   */\n  forms?: JsonFormObject[];\n} & WithRouterProps &\n  Omit<\n    React.ComponentProps<typeof FormPanel>,\n    'highlighted' | 'fields' | 'additionalFieldProps'\n  >;\n\ntype State = {\n  // Field name that should be highlighted\n  highlighted?: string;\n};\n\nclass JsonForm extends Component<Props, State> {\n  state: State = {\n    // location.hash is optional because of tests.\n    highlighted: this.props.location?.hash,\n  };\n\n  componentDidMount() {\n    this.scrollToHash();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.location && this.props.location.hash !== prevProps.location.hash) {\n      const hash = this.props.location.hash;\n      this.scrollToHash(hash);\n      this.setState({highlighted: hash});\n    }\n  }\n\n  scrollToHash(toHash?: string): void {\n    // location.hash is optional because of tests.\n    const hash = toHash || this.props.location?.hash;\n\n    if (!hash) {\n      return;\n    }\n\n    // Push onto callback queue so it runs after the DOM is updated,\n    // this is required when navigating from a different page so that\n    // the element is rendered on the page before trying to getElementById.\n    try {\n      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {\n        align: 'middle',\n        offset: -100,\n      });\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  shouldDisplayForm(fields: FieldObject[]) {\n    const fieldsWithVisibleProp = fields.filter(\n      field => typeof field !== 'function' && defined(field?.visible)\n    ) as Array<Omit<Field, 'visible'> & Required<Pick<Field, 'visible'>>>;\n\n    if (fields.length === fieldsWithVisibleProp.length) {\n      const {additionalFieldProps, ...props} = this.props;\n\n      const areAllFieldsHidden = fieldsWithVisibleProp.every(field => {\n        if (typeof field.visible === 'function') {\n          return !field.visible({...props, ...additionalFieldProps});\n        }\n        return !field.visible;\n      });\n\n      return !areAllFieldsHidden;\n    }\n\n    return true;\n  }\n\n  renderForm({\n    fields,\n    formPanelProps,\n    title,\n  }: {\n    fields: FieldObject[];\n    formPanelProps: Pick<\n      Props,\n      | 'access'\n      | 'disabled'\n      | 'features'\n      | 'additionalFieldProps'\n      | 'renderFooter'\n      | 'renderHeader'\n    > &\n      Pick<State, 'highlighted'>;\n    title?: React.ReactNode;\n  }) {\n    const shouldDisplayForm = this.shouldDisplayForm(fields);\n\n    if (\n      !shouldDisplayForm &&\n      !formPanelProps?.renderFooter &&\n      !formPanelProps?.renderHeader\n    ) {\n      return null;\n    }\n\n    return <FormPanel title={title} fields={fields} {...formPanelProps} />;\n  }\n\n  render() {\n    const {\n      access,\n      collapsible,\n      initiallyCollapsed,\n      fields,\n      title,\n      forms,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      location: _location,\n      params: _params,\n      router: _router,\n      routes: _routes,\n      ...otherProps\n    } = this.props;\n\n    const formPanelProps = {\n      access,\n      disabled,\n      features,\n      additionalFieldProps,\n      renderFooter,\n      renderHeader,\n      highlighted: this.state.highlighted,\n      collapsible,\n      initiallyCollapsed,\n    };\n\n    return (\n      <div {...otherProps}>\n        {typeof forms !== 'undefined' &&\n          forms.map((formGroup, i) => (\n            <Fragment key={i}>{this.renderForm({formPanelProps, ...formGroup})}</Fragment>\n          ))}\n        {typeof forms === 'undefined' &&\n          typeof fields !== 'undefined' &&\n          this.renderForm({fields, formPanelProps, title})}\n      </div>\n    );\n  }\n}\n\nexport default withSentryRouter(JsonForm);\n","import {JsonFormObject} from 'sentry/components/forms/types';\nimport {t} from 'sentry/locale';\nimport {MemberRole} from 'sentry/types';\nimport slugify from 'sentry/utils/slugify';\n\n// Export route to make these forms searchable by label/help\nexport const route = '/settings/:orgId/teams/:teamId/settings/';\n\nconst formGroups: JsonFormObject[] = [\n  {\n    // Form \"section\"/\"panel\"\n    title: 'Team Settings',\n    fields: [\n      {\n        name: 'slug',\n        type: 'string',\n        required: true,\n        label: t('Team Slug'),\n        placeholder: 'e.g. api-team',\n        help: t('A unique ID used to identify the team'),\n        transformInput: slugify,\n        disabled: ({hasTeamWrite}) => !hasTeamWrite,\n        saveOnBlur: false,\n        saveMessageAlertType: 'info',\n        saveMessage: t('You will be redirected to the new team slug after saving'),\n      },\n    ],\n  },\n  {\n    title: 'Team Organization Role',\n    fields: [\n      {\n        name: 'orgRole',\n        type: 'select',\n        choices: ({orgRoleList}) => {\n          const choices = orgRoleList.map((r: MemberRole) => [r.id, r.name]) ?? [];\n          choices.unshift(['', 'None']);\n          return choices;\n        },\n        required: false,\n        label: t('Organization Role'),\n        help: t(\n          'Organization owners can bulk assign an org-role for all the members in this team'\n        ),\n        disabled: ({hasOrgAdmin, idpProvisioned}) => !hasOrgAdmin || idpProvisioned,\n        visible: ({hasOrgRoleFlag}) => hasOrgRoleFlag,\n        saveOnBlur: false,\n        saveMessageAlertType: 'info',\n        saveMessage: t(\n          'You are giving all team members the permissions of this organization role'\n        ),\n      },\n    ],\n  },\n];\n\nexport default formGroups;\n","/**\n * Transforms the given string to a slugified version. (e.g. \"My Project\" => \"my-project\")\n *\n * Allows only lowercase alphanumeric values, hyphens, and underscores (should match backend validation rules).\n * Normalizes special characters to a-z where applicable (accents, ligatures, etc).\n * Converts spaces to hyphens.\n */\nexport default function slugify(str: string): string {\n  return str\n    .normalize('NFKD') // Converts accents/ligatures/etc to latin alphabet\n    .toLowerCase()\n    .replace(' ', '-')\n    .replace(/[^a-z0-9-_]/g, ''); // Remove all invalid characters\n}\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\nexport type AsyncViewState = AsyncComponent['state'];\nexport type AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {Fragment} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {removeTeam, updateTeamSuccess} from 'sentry/actionCreators/teams';\nimport {hasEveryAccess} from 'sentry/components/acl/access';\nimport {Button} from 'sentry/components/button';\nimport Confirm from 'sentry/components/confirm';\nimport FieldGroup from 'sentry/components/forms/fieldGroup';\nimport Form, {FormProps} from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport {Panel, PanelHeader} from 'sentry/components/panels';\nimport teamSettingsFields from 'sentry/data/forms/teamSettingsFields';\nimport {IconDelete} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport {Organization, Team} from 'sentry/types';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AsyncView from 'sentry/views/asyncView';\nimport PermissionAlert from 'sentry/views/settings/project/permissionAlert';\n\ntype Props = RouteComponentProps<{teamId: string}, {}> & {\n  organization: Organization;\n  team: Team;\n};\n\ntype State = AsyncView['state'];\n\nclass TeamSettings extends AsyncView<Props, State> {\n  getTitle() {\n    return 'Team Settings';\n  }\n\n  getEndpoints() {\n    return [];\n  }\n\n  handleSubmitSuccess: FormProps['onSubmitSuccess'] = (resp, _model, id) => {\n    const {organization} = this.props;\n\n    // Use the old slug when triggering the update so we correctly replace the\n    // previous team in the store\n    updateTeamSuccess(this.props.team.slug, resp);\n    if (id === 'slug') {\n      addSuccessMessage(t('Team name changed'));\n      browserHistory.replace(\n        normalizeUrl(`/settings/${organization.slug}/teams/${resp.slug}/settings/`)\n      );\n      this.setState({loading: true});\n    }\n  };\n\n  handleRemoveTeam = async () => {\n    const {organization, params} = this.props;\n    try {\n      await removeTeam(this.api, {orgId: organization.slug, teamId: params.teamId});\n      browserHistory.replace(normalizeUrl(`/settings/${organization.slug}/teams/`));\n    } catch {\n      // removeTeam already displays an error message\n    }\n  };\n\n  renderBody() {\n    const {organization, team} = this.props;\n    const idpProvisioned = team.flags['idp:provisioned'];\n    const orgRoleList = organization.orgRoleList;\n    const hasOrgRoleFlag = organization.features.includes('org-roles-for-teams');\n\n    const hasTeamWrite = hasEveryAccess(['team:write'], {organization, team});\n    const hasTeamAdmin = hasEveryAccess(['team:admin'], {organization, team});\n    const hasOrgAdmin = hasEveryAccess(['org:admin'], {organization});\n\n    return (\n      <Fragment>\n        <PermissionAlert access={['team:write']} team={team} />\n\n        <Form\n          apiMethod=\"PUT\"\n          apiEndpoint={`/teams/${organization.slug}/${team.slug}/`}\n          saveOnBlur\n          allowUndo\n          onSubmitSuccess={this.handleSubmitSuccess}\n          onSubmitError={() => addErrorMessage(t('Unable to save change'))}\n          initialData={{\n            name: team.name,\n            slug: team.slug,\n            orgRole: team.orgRole,\n          }}\n        >\n          <JsonForm\n            additionalFieldProps={{\n              idpProvisioned,\n              hasOrgRoleFlag,\n              hasTeamWrite,\n              hasOrgAdmin,\n              orgRoleList,\n            }}\n            forms={teamSettingsFields}\n          />\n        </Form>\n\n        <Panel>\n          <PanelHeader>{t('Team Administration')}</PanelHeader>\n          <FieldGroup\n            label={t('Remove Team')}\n            help={t(\n              \"This may affect team members' access to projects and associated alert delivery.\"\n            )}\n          >\n            <div>\n              <Confirm\n                disabled={!hasTeamAdmin}\n                onConfirm={this.handleRemoveTeam}\n                priority=\"danger\"\n                message={tct('Are you sure you want to remove the team [team]?', {\n                  team: `#${team.slug}`,\n                })}\n              >\n                <Button\n                  icon={<IconDelete />}\n                  priority=\"danger\"\n                  data-test-id=\"button-remove-team\"\n                >\n                  {t('Remove Team')}\n                </Button>\n              </Confirm>\n            </div>\n          </FieldGroup>\n        </Panel>\n      </Fragment>\n    );\n  }\n}\nexport default withOrganization(TeamSettings);\n","import Access from 'sentry/components/acl/access';\nimport {Alert} from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {Project, Scope, Team} from 'sentry/types';\n\ninterface Props extends React.ComponentPropsWithoutRef<typeof Alert> {\n  access?: Scope[];\n  project?: Project | null | undefined;\n  team?: Team | null | undefined;\n}\n\nexport const permissionAlertText = t(\n  'These settings can only be edited by users with the organization-level owner, manager, or team-level admin roles.'\n);\n\nfunction PermissionAlert({access = ['project:write'], project, team, ...props}: Props) {\n  return (\n    <Access access={access} project={project} team={team}>\n      {({hasAccess}) =>\n        !hasAccess && (\n          <Alert data-test-id=\"project-permission-alert\" type=\"warning\" {...props}>\n            {permissionAlertText}\n          </Alert>\n        )\n      }\n    </Access>\n  );\n}\n\nexport default PermissionAlert;\n"],"names":["FormPanel","_ref","additionalFieldProps","title","fields","access","disabled","renderFooter","renderHeader","collapsible","initiallyCollapsed","otherProps","collapsed","setCollapse","useState","handleCollapseToggle","useCallback","current","_jsxs","Panel","id","sanitizeQuerySelector","undefined","children","PanelHeader","_jsx","Collapse","onClick","IconChevron","direction","size","PanelBody","hidden","map","field","defaultValue","_","fieldWithoutDefaultValue","disabledReason","FieldFromConfig","highlighted","name","displayName","_styled","target","styles","JsonForm","Component","constructor","arguments","_defineProperty","this","props","location","hash","componentDidMount","scrollToHash","componentDidUpdate","prevProps","setState","toHash","scrollToElement","decodeURIComponent","align","offset","err","Sentry","shouldDisplayForm","fieldsWithVisibleProp","filter","defined","visible","length","every","renderForm","formPanelProps","render","forms","features","_location","params","_params","router","_router","routes","_routes","state","formGroup","i","Fragment","withSentryRouter","route","type","required","label","t","placeholder","help","transformInput","slugify","hasTeamWrite","saveOnBlur","saveMessageAlertType","saveMessage","choices","_ref2","orgRoleList","r","unshift","_ref3","hasOrgAdmin","idpProvisioned","_ref4","hasOrgRoleFlag","str","normalize","toLowerCase","replace","AsyncView","AsyncComponent","getTitle","SentryDocumentTitle","renderComponent","TeamSettings","resp","_model","organization","updateTeamSuccess","team","slug","addSuccessMessage","browserHistory","normalizeUrl","loading","async","removeTeam","api","orgId","teamId","getEndpoints","renderBody","flags","includes","hasEveryAccess","hasTeamAdmin","PermissionAlert","Form","apiMethod","apiEndpoint","allowUndo","onSubmitSuccess","handleSubmitSuccess","onSubmitError","addErrorMessage","initialData","orgRole","teamSettingsFields","FieldGroup","Confirm","onConfirm","handleRemoveTeam","priority","message","tct","Button","icon","IconDelete","withOrganization","permissionAlertText","project","Access","hasAccess","Alert"],"sourceRoot":""}