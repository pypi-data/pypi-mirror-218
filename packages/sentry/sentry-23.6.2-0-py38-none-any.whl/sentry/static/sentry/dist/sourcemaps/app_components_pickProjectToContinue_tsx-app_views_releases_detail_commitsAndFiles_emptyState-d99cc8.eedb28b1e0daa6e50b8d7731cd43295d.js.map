{"version":3,"file":"chunks/app_components_pickProjectToContinue_tsx-app_views_releases_detail_commitsAndFiles_emptyState-d99cc8.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/pickProjectToContinue.tsx","webpack:///./app/stores/repositoryStore.tsx","webpack:///./app/utils/withRepositories.tsx","webpack:///./app/actionCreators/repositories.tsx","webpack:///./app/views/releases/detail/commitsAndFiles/emptyState.tsx","webpack:///./app/views/releases/detail/commitsAndFiles/repositorySwitcher.tsx","webpack:///./app/views/releases/detail/commitsAndFiles/withReleaseRepos.tsx","webpack:///./app/views/releases/detail/utils.tsx"],"sourcesContent":["import {InjectedRouter} from 'react-router';\nimport styled from '@emotion/styled';\nimport {LocationDescriptor, LocationDescriptorObject} from 'history';\n\nimport {openModal} from 'sentry/actionCreators/modal';\nimport ContextPickerModal from 'sentry/components/contextPickerModal';\n\ntype Project = {\n  id: string;\n  slug: string;\n};\n\ntype Props = {\n  /**\n   * Path used on the redirect router if the user did select a project\n   */\n  nextPath: Pick<LocationDescriptorObject, 'query'> & {\n    pathname: NonNullable<LocationDescriptorObject['pathname']>;\n  };\n  /**\n   * Path used on the redirect router if the user did not select a project\n   */\n  noProjectRedirectPath: LocationDescriptor;\n  projects: Project[];\n  router: InjectedRouter;\n  allowAllProjectsSelection?: boolean;\n};\n\nfunction PickProjectToContinue({\n  noProjectRedirectPath,\n  nextPath,\n  router,\n  projects,\n  allowAllProjectsSelection = false,\n}: Props) {\n  const nextPathQuery = nextPath.query;\n  let navigating = false;\n  let path = `${nextPath.pathname}?project=`;\n\n  if (nextPathQuery) {\n    const filteredQuery = Object.entries(nextPathQuery)\n      .filter(([key, _value]) => key !== 'project')\n      .map(([key, value]) => `${key}=${value}`);\n\n    const newPathQuery = [...filteredQuery, 'project='].join('&');\n\n    path = `${nextPath.pathname}?${newPathQuery}`;\n  }\n\n  // if the project in URL is missing, but this release belongs to only one project, redirect there\n  if (projects.length === 1) {\n    router.replace(path + projects[0].id);\n    return null;\n  }\n\n  openModal(\n    modalProps => (\n      <ContextPickerModal\n        {...modalProps}\n        needOrg={false}\n        needProject\n        nextPath={`${path}:project`}\n        onFinish={pathname => {\n          navigating = true;\n          router.replace(pathname);\n        }}\n        projectSlugs={projects.map(p => p.slug)}\n        allowAllProjectsSelection={allowAllProjectsSelection}\n      />\n    ),\n    {\n      onClose() {\n        // we want this to be executed only if the user didn't select any project\n        // (closed modal either via button, Esc, clicking outside, ...)\n        if (!navigating) {\n          router.push(noProjectRedirectPath);\n        }\n      },\n    }\n  );\n\n  return <ContextPickerBackground />;\n}\n\nconst ContextPickerBackground = styled('div')`\n  height: 100vh;\n  width: 100%;\n`;\n\nexport default PickProjectToContinue;\n","import {createStore, StoreDefinition} from 'reflux';\n\nimport {Repository} from 'sentry/types';\n\ntype State = {\n  orgSlug?: string;\n  repositories?: Repository[];\n  repositoriesError?: Error;\n  repositoriesLoading?: boolean;\n};\n\ninterface RepositoryStoreDefinition extends StoreDefinition {\n  get(): State;\n  init(): void;\n  loadRepositories(orgSlug: string): void;\n  loadRepositoriesError(error: Error): void;\n  loadRepositoriesSuccess(data: Repository[]): void;\n  resetRepositories(): void;\n  state: State;\n}\n\nconst storeConfig: RepositoryStoreDefinition = {\n  state: {\n    orgSlug: undefined,\n    repositories: undefined,\n    repositoriesLoading: undefined,\n    repositoriesError: undefined,\n  },\n\n  init() {\n    // XXX: Do not use `this.listenTo` in this store. We avoid usage of reflux\n    // listeners due to their leaky nature in tests.\n\n    this.resetRepositories();\n  },\n\n  resetRepositories() {\n    this.state = {\n      orgSlug: undefined,\n      repositories: undefined,\n      repositoriesLoading: undefined,\n      repositoriesError: undefined,\n    };\n    this.trigger(this.state);\n  },\n\n  loadRepositories(orgSlug: string) {\n    this.state = {\n      orgSlug,\n      repositories: orgSlug === this.state.orgSlug ? this.state.repositories : undefined,\n      repositoriesLoading: true,\n      repositoriesError: undefined,\n    };\n    this.trigger(this.state);\n  },\n\n  loadRepositoriesError(err: Error) {\n    this.state = {\n      ...this.state,\n      repositories: undefined,\n      repositoriesLoading: false,\n      repositoriesError: err,\n    };\n    this.trigger(this.state);\n  },\n\n  loadRepositoriesSuccess(data: Repository[]) {\n    this.state = {\n      ...this.state,\n      repositories: data,\n      repositoriesLoading: false,\n      repositoriesError: undefined,\n    };\n    this.trigger(this.state);\n  },\n\n  get() {\n    return {...this.state};\n  },\n};\n\nconst RepositoryStore = createStore(storeConfig);\nexport default RepositoryStore;\n","import {Component} from 'react';\n\nimport {getRepositories} from 'sentry/actionCreators/repositories';\nimport {Client} from 'sentry/api';\nimport RepositoryStore from 'sentry/stores/repositoryStore';\nimport {Organization, Repository} from 'sentry/types';\nimport getDisplayName from 'sentry/utils/getDisplayName';\n\ntype DependentProps = {\n  api: Client;\n  organization: Organization;\n};\n\ntype InjectedProps = {\n  repositories?: Repository[];\n  repositoriesError?: Error;\n  repositoriesLoading?: boolean;\n};\n\nconst INITIAL_STATE: InjectedProps = {\n  repositories: undefined,\n  repositoriesLoading: undefined,\n  repositoriesError: undefined,\n};\n\nfunction withRepositories<P extends DependentProps>(\n  WrappedComponent: React.ComponentType<P>\n) {\n  class WithRepositories extends Component<P & DependentProps, InjectedProps> {\n    static displayName = `withRepositories(${getDisplayName(WrappedComponent)})`;\n\n    constructor(props: P & DependentProps, context: any) {\n      super(props, context);\n\n      const repoData = RepositoryStore.get();\n\n      this.state =\n        repoData.orgSlug === props.organization.slug\n          ? {...INITIAL_STATE, ...repoData}\n          : {...INITIAL_STATE};\n    }\n\n    componentDidMount() {\n      const {organization} = this.props;\n      const orgSlug = organization.slug;\n      const repoData = RepositoryStore.get();\n\n      if (repoData.orgSlug !== orgSlug) {\n        RepositoryStore.resetRepositories();\n      }\n\n      // XXX(leedongwei): Do not move this function call unless you modify the\n      // unit test named \"prevents repeated calls\"\n      this.fetchRepositories();\n    }\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n    unsubscribe = RepositoryStore.listen(() => this.onStoreUpdate(), undefined);\n\n    fetchRepositories() {\n      const {api, organization} = this.props;\n      const orgSlug = organization.slug;\n      const repoData = RepositoryStore.get();\n\n      // XXX(leedongwei): Do not check the orgSlug here. It would have been\n      // verified at `getInitialState`. The short-circuit hack in actionCreator\n      // does not update the orgSlug in the store.\n      if (\n        (!repoData.repositories && !repoData.repositoriesLoading) ||\n        repoData.repositoriesError\n      ) {\n        getRepositories(api, {orgSlug});\n      }\n    }\n\n    onStoreUpdate() {\n      const repoData = RepositoryStore.get();\n      this.setState({...repoData});\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} {...this.state} />;\n    }\n  }\n\n  return WithRepositories;\n}\n\nexport default withRepositories;\n","import * as Sentry from '@sentry/react';\n\nimport {Client} from 'sentry/api';\nimport RepositoryStore from 'sentry/stores/repositoryStore';\nimport {Repository} from 'sentry/types';\n\ntype ParamsGet = {\n  orgSlug: string;\n};\n\nexport function getRepositories(api: Client, params: ParamsGet) {\n  const {orgSlug} = params;\n  const path = `/organizations/${orgSlug}/repos/`;\n\n  // HACK(leedongwei): Actions fired by the ActionCreators are queued to\n  // the back of the event loop, allowing another getRepo for the same\n  // repo to be fired before the loading state is updated in store.\n  // This hack short-circuits that and update the state immediately.\n  RepositoryStore.state.repositoriesLoading = true;\n  RepositoryStore.loadRepositories(orgSlug);\n\n  return api\n    .requestPromise(path, {\n      method: 'GET',\n    })\n    .then((res: Repository[]) => {\n      RepositoryStore.loadRepositoriesSuccess(res);\n    })\n    .catch(err => {\n      RepositoryStore.loadRepositoriesError(err);\n      Sentry.withScope(scope => {\n        scope.setLevel('warning');\n        scope.setFingerprint(['getRepositories-action-creator']);\n        Sentry.captureException(err);\n      });\n    });\n}\n","import EmptyStateWarning from 'sentry/components/emptyStateWarning';\nimport {Panel, PanelBody} from 'sentry/components/panels';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nfunction EmptyState({children}: Props) {\n  return (\n    <Panel>\n      <PanelBody>\n        <EmptyStateWarning>\n          <p>{children}</p>\n        </EmptyStateWarning>\n      </PanelBody>\n    </Panel>\n  );\n}\n\nexport default EmptyState;\n","import {PureComponent} from 'react';\nimport {InjectedRouter} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport {CompactSelect} from 'sentry/components/compactSelect';\nimport {t} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {Repository} from 'sentry/types';\n\ntype Props = {\n  location: Location;\n  repositories: Array<Repository>;\n  router: InjectedRouter;\n  activeRepository?: Repository;\n};\n\nclass RepositorySwitcher extends PureComponent<Props> {\n  handleRepoFilterChange = (activeRepo: string) => {\n    const {router, location} = this.props;\n\n    router.push({\n      ...location,\n      query: {...location.query, cursor: undefined, activeRepo},\n    });\n  };\n\n  render() {\n    const {activeRepository, repositories} = this.props;\n\n    const activeRepo = activeRepository?.name;\n\n    return (\n      <StyledCompactSelect\n        triggerLabel={activeRepo}\n        triggerProps={{prefix: t('Filter')}}\n        value={activeRepo}\n        options={repositories.map(repo => ({\n          value: repo.name,\n          textValue: repo.name,\n          label: <RepoLabel>{repo.name}</RepoLabel>,\n        }))}\n        onChange={opt => this.handleRepoFilterChange(String(opt?.value))}\n      />\n    );\n  }\n}\n\nexport default RepositorySwitcher;\n\nconst StyledCompactSelect = styled(CompactSelect)`\n  margin-bottom: ${space(1)};\n`;\n\nconst RepoLabel = styled('div')`\n  ${p => p.theme.overflowEllipsis}\n`;\n","import {Component} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport * as Sentry from '@sentry/react';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport {Button} from 'sentry/components/button';\nimport EmptyMessage from 'sentry/components/emptyMessage';\nimport {Body, Main} from 'sentry/components/layouts/thirds';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {Panel} from 'sentry/components/panels';\nimport {IconCommit} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {Organization, Repository} from 'sentry/types';\nimport getDisplayName from 'sentry/utils/getDisplayName';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withRepositories from 'sentry/utils/withRepositories';\n\nimport {ReleaseContext} from '..';\n\n// These props are required when using this HoC\ntype DependentProps = RouteComponentProps<{release: string}, {}>;\n\ntype HoCsProps = {\n  api: Client;\n  organization: Organization;\n  repositories?: Repository[];\n  repositoriesError?: Error;\n  repositoriesLoading?: boolean;\n};\n\ntype State = {\n  isLoading: boolean;\n  releaseRepos: Repository[];\n  activeReleaseRepo?: Repository;\n};\n\nfunction withReleaseRepos<P extends DependentProps>(\n  WrappedComponent: React.ComponentType<P>\n) {\n  class WithReleaseRepos extends Component<P & HoCsProps, State> {\n    static displayName = `withReleaseRepos(${getDisplayName(WrappedComponent)})`;\n\n    state: State = {\n      releaseRepos: [],\n      isLoading: true,\n    };\n\n    componentDidMount() {\n      this.fetchReleaseRepos();\n    }\n\n    componentDidUpdate(prevProps: P & HoCsProps, prevState: State) {\n      if (\n        this.props.params.release !== prevProps.params.release ||\n        (!!prevProps.repositoriesLoading && !this.props.repositoriesLoading)\n      ) {\n        this.fetchReleaseRepos();\n        return;\n      }\n\n      if (\n        prevState.releaseRepos.length !== this.state.releaseRepos.length ||\n        prevProps.location.query?.activeRepo !== this.props.location.query?.activeRepo\n      ) {\n        this.setActiveReleaseRepo(this.props);\n      }\n    }\n\n    static contextType = ReleaseContext;\n\n    setActiveReleaseRepo(props: P & HoCsProps) {\n      const {releaseRepos, activeReleaseRepo} = this.state;\n\n      if (!releaseRepos.length) {\n        return;\n      }\n\n      const activeCommitRepo = props.location.query?.activeRepo;\n\n      if (!activeCommitRepo) {\n        this.setState({\n          activeReleaseRepo: releaseRepos[0] ?? null,\n        });\n        return;\n      }\n\n      if (activeCommitRepo === activeReleaseRepo?.name) {\n        return;\n      }\n\n      const matchedRepository = releaseRepos.find(\n        commitRepo => commitRepo.name === activeCommitRepo\n      );\n\n      if (matchedRepository) {\n        this.setState({\n          activeReleaseRepo: matchedRepository,\n        });\n        return;\n      }\n\n      addErrorMessage(t('The repository you were looking for was not found.'));\n    }\n\n    async fetchReleaseRepos() {\n      const {params, api, organization, repositories, repositoriesLoading} = this.props;\n\n      if (repositoriesLoading === undefined || repositoriesLoading === true) {\n        return;\n      }\n\n      if (!repositories?.length) {\n        this.setState({isLoading: false});\n        return;\n      }\n\n      const {release} = params;\n      const {project} = this.context;\n\n      this.setState({isLoading: true});\n\n      try {\n        const releasePath = encodeURIComponent(release);\n        const releaseRepos = await api.requestPromise(\n          `/projects/${organization.slug}/${project.slug}/releases/${releasePath}/repositories/`\n        );\n        this.setState({releaseRepos, isLoading: false});\n        this.setActiveReleaseRepo(this.props);\n      } catch (error) {\n        Sentry.captureException(error);\n        addErrorMessage(\n          t(\n            'An error occurred while trying to fetch the repositories of the release: %s',\n            release\n          )\n        );\n      }\n    }\n\n    render() {\n      const {isLoading, activeReleaseRepo, releaseRepos} = this.state;\n      const {repositoriesLoading, repositories, params, router, location, organization} =\n        this.props;\n\n      if (isLoading || repositoriesLoading) {\n        return <LoadingIndicator />;\n      }\n\n      const noRepositoryOrgRelatedFound = !repositories?.length;\n\n      if (noRepositoryOrgRelatedFound) {\n        return (\n          <Body>\n            <Main fullWidth>\n              <Panel dashedBorder>\n                <EmptyMessage\n                  icon={<IconCommit size=\"xl\" />}\n                  title={t('Releases are better with commit data!')}\n                  description={t(\n                    'Connect a repository to see commit info, files changed, and authors involved in future releases.'\n                  )}\n                  action={\n                    <Button\n                      priority=\"primary\"\n                      to={`/settings/${organization.slug}/repos/`}\n                    >\n                      {t('Connect a repository')}\n                    </Button>\n                  }\n                />\n              </Panel>\n            </Main>\n          </Body>\n        );\n      }\n\n      const noReleaseReposFound = !releaseRepos.length;\n\n      if (noReleaseReposFound) {\n        return (\n          <Body>\n            <Main fullWidth>\n              <Panel dashedBorder>\n                <EmptyMessage\n                  icon={<IconCommit size=\"xl\" />}\n                  title={t('Releases are better with commit data!')}\n                  description={t(\n                    'No commits associated with this release have been found.'\n                  )}\n                />\n              </Panel>\n            </Main>\n          </Body>\n        );\n      }\n\n      if (activeReleaseRepo === undefined) {\n        return <LoadingIndicator />;\n      }\n\n      const {release} = params;\n      const orgSlug = organization.slug;\n\n      return (\n        <WrappedComponent\n          {...this.props}\n          orgSlug={orgSlug}\n          projectSlug={this.context.project.slug}\n          release={release}\n          router={router}\n          location={location}\n          releaseRepos={releaseRepos}\n          activeReleaseRepo={activeReleaseRepo}\n        />\n      );\n    }\n  }\n\n  return withApi(withOrganization(withRepositories(WithReleaseRepos)));\n}\n\nexport default withReleaseRepos;\n","import {Theme} from '@emotion/react';\nimport {Location} from 'history';\nimport pick from 'lodash/pick';\nimport moment from 'moment';\n\nimport MarkLine from 'sentry/components/charts/components/markLine';\nimport {parseStatsPeriod} from 'sentry/components/organizations/timeRangeSelector/utils';\nimport {URL_PARAM} from 'sentry/constants/pageFilters';\nimport {t} from 'sentry/locale';\nimport {\n  Commit,\n  CommitFile,\n  FilesByRepository,\n  ReleaseComparisonChartType,\n  ReleaseProject,\n  ReleaseWithHealth,\n  Repository,\n} from 'sentry/types';\nimport {Series} from 'sentry/types/echarts';\nimport {decodeList} from 'sentry/utils/queryString';\n\nimport {getReleaseBounds, getReleaseParams, isMobileRelease} from '../utils';\nimport {commonTermsDescription, SessionTerm} from '../utils/sessionTerm';\n\nexport type CommitsByRepository = {\n  [key: string]: Commit[];\n};\n\n/**\n * Convert list of individual file changes into a per-file summary grouped by repository\n */\nexport function getFilesByRepository(fileList: CommitFile[]) {\n  return fileList.reduce<FilesByRepository>((filesByRepository, file) => {\n    const {filename, repoName, author, type} = file;\n\n    if (!filesByRepository.hasOwnProperty(repoName)) {\n      filesByRepository[repoName] = {};\n    }\n\n    if (!filesByRepository[repoName].hasOwnProperty(filename)) {\n      filesByRepository[repoName][filename] = {\n        authors: {},\n        types: new Set(),\n      };\n    }\n\n    if (author.email) {\n      filesByRepository[repoName][filename].authors[author.email] = author;\n    }\n\n    filesByRepository[repoName][filename].types.add(type);\n\n    return filesByRepository;\n  }, {});\n}\n\n/**\n * Convert list of individual commits into a summary grouped by repository\n */\nexport function getCommitsByRepository(commitList: Commit[]): CommitsByRepository {\n  return commitList.reduce((commitsByRepository, commit) => {\n    const repositoryName = commit.repository?.name ?? t('unknown');\n\n    if (!commitsByRepository.hasOwnProperty(repositoryName)) {\n      commitsByRepository[repositoryName] = [];\n    }\n\n    commitsByRepository[repositoryName].push(commit);\n\n    return commitsByRepository;\n  }, {});\n}\n\n/**\n * Get request query according to the url params and active repository\n */\n\ntype GetQueryProps = {\n  location: Location;\n  activeRepository?: Repository;\n  perPage?: number;\n};\n\nexport function getQuery({location, perPage = 40, activeRepository}: GetQueryProps) {\n  const query = {\n    ...pick(location.query, [...Object.values(URL_PARAM), 'cursor']),\n    per_page: perPage,\n  };\n\n  if (!activeRepository) {\n    return query;\n  }\n\n  return {...query, repo_name: activeRepository.name};\n}\n\n/**\n * Get repositories to render according to the activeRepository\n */\nexport function getReposToRender(repos: Array<string>, activeRepository?: Repository) {\n  if (!activeRepository) {\n    return repos;\n  }\n  return [activeRepository.name];\n}\n\nexport const releaseComparisonChartLabels = {\n  [ReleaseComparisonChartType.CRASH_FREE_SESSIONS]: t('Crash Free Session Rate'),\n  [ReleaseComparisonChartType.HEALTHY_SESSIONS]: t('Healthy'),\n  [ReleaseComparisonChartType.ABNORMAL_SESSIONS]: t('Abnormal'),\n  [ReleaseComparisonChartType.ERRORED_SESSIONS]: t('Errored'),\n  [ReleaseComparisonChartType.CRASHED_SESSIONS]: t('Crashed Session Rate'),\n  [ReleaseComparisonChartType.CRASH_FREE_USERS]: t('Crash Free User Rate'),\n  [ReleaseComparisonChartType.HEALTHY_USERS]: t('Healthy'),\n  [ReleaseComparisonChartType.ABNORMAL_USERS]: t('Abnormal'),\n  [ReleaseComparisonChartType.ERRORED_USERS]: t('Errored'),\n  [ReleaseComparisonChartType.CRASHED_USERS]: t('Crashed User Rate'),\n  [ReleaseComparisonChartType.SESSION_COUNT]: t('Session Count'),\n  [ReleaseComparisonChartType.USER_COUNT]: t('User Count'),\n  [ReleaseComparisonChartType.ERROR_COUNT]: t('Error Count'),\n  [ReleaseComparisonChartType.TRANSACTION_COUNT]: t('Transaction Count'),\n  [ReleaseComparisonChartType.FAILURE_RATE]: t('Failure Rate'),\n};\n\nexport const releaseComparisonChartTitles = {\n  [ReleaseComparisonChartType.CRASH_FREE_SESSIONS]: t('Crash Free Session Rate'),\n  [ReleaseComparisonChartType.HEALTHY_SESSIONS]: t('Healthy Session Rate'),\n  [ReleaseComparisonChartType.ABNORMAL_SESSIONS]: t('Abnormal Session Rate'),\n  [ReleaseComparisonChartType.ERRORED_SESSIONS]: t('Errored Session Rate'),\n  [ReleaseComparisonChartType.CRASHED_SESSIONS]: t('Crashed Session Rate'),\n  [ReleaseComparisonChartType.CRASH_FREE_USERS]: t('Crash Free User Rate'),\n  [ReleaseComparisonChartType.HEALTHY_USERS]: t('Healthy User Rate'),\n  [ReleaseComparisonChartType.ABNORMAL_USERS]: t('Abnormal User Rate'),\n  [ReleaseComparisonChartType.ERRORED_USERS]: t('Errored User Rate'),\n  [ReleaseComparisonChartType.CRASHED_USERS]: t('Crashed User Rate'),\n  [ReleaseComparisonChartType.SESSION_COUNT]: t('Session Count'),\n  [ReleaseComparisonChartType.USER_COUNT]: t('User Count'),\n  [ReleaseComparisonChartType.ERROR_COUNT]: t('Error Count'),\n  [ReleaseComparisonChartType.TRANSACTION_COUNT]: t('Transaction Count'),\n  [ReleaseComparisonChartType.FAILURE_RATE]: t('Failure Rate'),\n};\n\nexport const releaseComparisonChartHelp = {\n  [ReleaseComparisonChartType.CRASH_FREE_SESSIONS]:\n    commonTermsDescription[SessionTerm.CRASH_FREE_SESSIONS],\n  [ReleaseComparisonChartType.CRASH_FREE_USERS]:\n    commonTermsDescription[SessionTerm.CRASH_FREE_USERS],\n  [ReleaseComparisonChartType.SESSION_COUNT]: t(\n    'The number of sessions in a given period.'\n  ),\n  [ReleaseComparisonChartType.USER_COUNT]: t('The number of users in a given period.'),\n};\n\ntype GenerateReleaseMarklineOptions = {\n  axisIndex?: number;\n  hideLabel?: boolean;\n};\n\nfunction generateReleaseMarkLine(\n  title: string,\n  position: number,\n  theme: Theme,\n  options?: GenerateReleaseMarklineOptions\n) {\n  const {hideLabel, axisIndex} = options || {};\n\n  return {\n    seriesName: title,\n    type: 'line',\n    data: [{name: position, value: null as any}], // TODO(ts): echart types\n    yAxisIndex: axisIndex ?? undefined,\n    xAxisIndex: axisIndex ?? undefined,\n    color: theme.gray300,\n    markLine: MarkLine({\n      silent: true,\n      lineStyle: {color: theme.gray300, type: 'solid'},\n      label: {\n        position: 'insideEndBottom',\n        formatter: hideLabel ? '' : title,\n        // @ts-expect-error weird echart types\n        font: 'Rubik',\n        fontSize: 14,\n        color: theme.chartLabel,\n        backgroundColor: theme.chartOther,\n      },\n      data: [\n        {\n          xAxis: position,\n        },\n      ],\n    }),\n  };\n}\n\nexport const releaseMarkLinesLabels = {\n  created: t('Release Created'),\n  adopted: t('Adopted'),\n  unadopted: t('Replaced'),\n};\n\nexport function generateReleaseMarkLines(\n  release: ReleaseWithHealth,\n  project: ReleaseProject,\n  theme: Theme,\n  location: Location,\n  options?: GenerateReleaseMarklineOptions\n) {\n  const markLines: Series[] = [];\n  const adoptionStages = release.adoptionStages?.[project.slug];\n  const isSingleEnv = decodeList(location.query.environment).length === 1;\n  const releaseBounds = getReleaseBounds(release);\n  const {statsPeriod, ...releaseParamsRest} = getReleaseParams({\n    location,\n    releaseBounds,\n  });\n  let {start, end} = releaseParamsRest;\n  const isDefaultPeriod = !(\n    location.query.pageStart ||\n    location.query.pageEnd ||\n    location.query.pageStatsPeriod\n  );\n\n  if (statsPeriod) {\n    const parsedStatsPeriod = parseStatsPeriod(statsPeriod, null);\n    start = parsedStatsPeriod.start;\n    end = parsedStatsPeriod.end;\n  }\n\n  const releaseCreated = moment(release.dateCreated).startOf('minute');\n  if (\n    releaseCreated.isBetween(start, end) ||\n    (isDefaultPeriod && releaseBounds.type === 'normal')\n  ) {\n    markLines.push(\n      generateReleaseMarkLine(\n        releaseMarkLinesLabels.created,\n        releaseCreated.valueOf(),\n        theme,\n        options\n      )\n    );\n  }\n\n  if (!isSingleEnv || !isMobileRelease(project.platform)) {\n    // for now want to show marklines only on mobile platforms with single environment selected\n    return markLines;\n  }\n\n  const releaseAdopted = adoptionStages?.adopted && moment(adoptionStages.adopted);\n  if (releaseAdopted && releaseAdopted.isBetween(start, end)) {\n    markLines.push(\n      generateReleaseMarkLine(\n        releaseMarkLinesLabels.adopted,\n        releaseAdopted.valueOf(),\n        theme,\n        options\n      )\n    );\n  }\n\n  const releaseReplaced = adoptionStages?.unadopted && moment(adoptionStages.unadopted);\n  if (releaseReplaced && releaseReplaced.isBetween(start, end)) {\n    markLines.push(\n      generateReleaseMarkLine(\n        releaseMarkLinesLabels.unadopted,\n        releaseReplaced.valueOf(),\n        theme,\n        options\n      )\n    );\n  }\n\n  return markLines;\n}\n"],"names":["PickProjectToContinue","_ref","noProjectRedirectPath","nextPath","router","projects","allowAllProjectsSelection","nextPathQuery","query","navigating","path","pathname","newPathQuery","Object","entries","filter","_ref2","key","_value","map","_ref3","value","join","length","replace","id","openModal","modalProps","_jsx","ContextPickerModal","needOrg","needProject","onFinish","projectSlugs","p","slug","onClose","push","ContextPickerBackground","displayName","_styled","target","name","styles","storeConfig","state","orgSlug","undefined","repositories","repositoriesLoading","repositoriesError","init","this","resetRepositories","trigger","loadRepositories","loadRepositoriesError","err","loadRepositoriesSuccess","data","get","createStore","INITIAL_STATE","WrappedComponent","WithRepositories","Component","constructor","props","context","super","_defineProperty","RepositoryStore","listen","onStoreUpdate","repoData","organization","componentDidMount","fetchRepositories","componentWillUnmount","unsubscribe","api","params","requestPromise","method","then","res","catch","Sentry","scope","setLevel","setFingerprint","getRepositories","setState","render","getDisplayName","EmptyState","children","Panel","PanelBody","EmptyStateWarning","RepositorySwitcher","PureComponent","arguments","activeRepo","location","cursor","activeRepository","StyledCompactSelect","triggerLabel","triggerProps","prefix","t","options","repo","textValue","label","RepoLabel","onChange","opt","handleRepoFilterChange","String","CompactSelect","space","theme","overflowEllipsis","WithReleaseRepos","releaseRepos","isLoading","fetchReleaseRepos","componentDidUpdate","prevProps","prevState","release","setActiveReleaseRepo","activeReleaseRepo","activeCommitRepo","matchedRepository","find","commitRepo","addErrorMessage","async","project","releasePath","encodeURIComponent","error","LoadingIndicator","Body","Main","fullWidth","dashedBorder","EmptyMessage","icon","IconCommit","size","title","description","action","Button","priority","to","projectSlug","ReleaseContext","withApi","withOrganization","withRepositories","getFilesByRepository","fileList","reduce","filesByRepository","file","filename","repoName","author","type","hasOwnProperty","authors","types","Set","email","add","getCommitsByRepository","commitList","commitsByRepository","commit","repositoryName","repository","getQuery","perPage","pick","values","URL_PARAM","per_page","repo_name","getReposToRender","repos","releaseComparisonChartLabels","ReleaseComparisonChartType","CRASH_FREE_SESSIONS","HEALTHY_SESSIONS","ABNORMAL_SESSIONS","ERRORED_SESSIONS","CRASHED_SESSIONS","CRASH_FREE_USERS","HEALTHY_USERS","ABNORMAL_USERS","ERRORED_USERS","CRASHED_USERS","SESSION_COUNT","USER_COUNT","ERROR_COUNT","TRANSACTION_COUNT","FAILURE_RATE","releaseComparisonChartTitles","releaseComparisonChartHelp","commonTermsDescription","SessionTerm","generateReleaseMarkLine","position","hideLabel","axisIndex","seriesName","yAxisIndex","xAxisIndex","color","gray300","markLine","MarkLine","silent","lineStyle","formatter","font","fontSize","chartLabel","backgroundColor","chartOther","xAxis","releaseMarkLinesLabels","created","adopted","unadopted","generateReleaseMarkLines","markLines","adoptionStages","isSingleEnv","decodeList","environment","releaseBounds","getReleaseBounds","statsPeriod","releaseParamsRest","getReleaseParams","start","end","isDefaultPeriod","pageStart","pageEnd","pageStatsPeriod","parsedStatsPeriod","parseStatsPeriod","releaseCreated","moment","dateCreated","startOf","isBetween","valueOf","isMobileRelease","platform","releaseAdopted","releaseReplaced"],"sourceRoot":""}