{"version":3,"file":"chunks/app_components_modals_widgetBuilder_addToDashboardModal_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/modals/widgetBuilder/addToDashboardModal.tsx"],"sourcesContent":["import {useEffect, useState} from 'react';\nimport {InjectedRouter} from 'react-router';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport {Location, Query} from 'history';\n\nimport {\n  fetchDashboard,\n  fetchDashboards,\n  updateDashboard,\n} from 'sentry/actionCreators/dashboards';\nimport {addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport {Button} from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport SelectControl from 'sentry/components/forms/controls/selectControl';\nimport {t, tct} from 'sentry/locale';\nimport {space} from 'sentry/styles/space';\nimport {DateString, Organization, PageFilters, SelectValue} from 'sentry/types';\nimport {MetricsCardinalityProvider} from 'sentry/utils/performance/contexts/metricsCardinality';\nimport {MEPSettingProvider} from 'sentry/utils/performance/contexts/metricsEnhancedSetting';\nimport useApi from 'sentry/utils/useApi';\nimport {normalizeUrl} from 'sentry/utils/withDomainRequired';\nimport {\n  DashboardDetails,\n  DashboardListItem,\n  DisplayType,\n  MAX_WIDGETS,\n  Widget,\n} from 'sentry/views/dashboards/types';\nimport {\n  eventViewFromWidget,\n  getDashboardFiltersFromURL,\n  getSavedFiltersAsPageFilters,\n  getSavedPageFilters,\n} from 'sentry/views/dashboards/utils';\nimport {NEW_DASHBOARD_ID} from 'sentry/views/dashboards/widgetBuilder/utils';\nimport WidgetCard from 'sentry/views/dashboards/widgetCard';\nimport {OrganizationContext} from 'sentry/views/organizationContext';\nimport {MetricsDataSwitcher} from 'sentry/views/performance/landing/metricsDataSwitcher';\n\ntype WidgetAsQueryParams = Query<{\n  defaultTableColumns: string[];\n  defaultTitle: string;\n  defaultWidgetQuery: string;\n  displayType: DisplayType;\n  environment: string[];\n  project: number[];\n  source: string;\n  end?: DateString;\n  start?: DateString;\n  statsPeriod?: string | null;\n}>;\n\nexport type AddToDashboardModalProps = {\n  location: Location;\n  organization: Organization;\n  router: InjectedRouter;\n  selection: PageFilters;\n  widget: Widget;\n  widgetAsQueryParams: WidgetAsQueryParams;\n};\n\ntype Props = ModalRenderProps & AddToDashboardModalProps;\n\nconst SELECT_DASHBOARD_MESSAGE = t('Select a dashboard');\n\nfunction AddToDashboardModal({\n  Header,\n  Body,\n  Footer,\n  closeModal,\n  location,\n  organization,\n  router,\n  selection,\n  widget,\n  widgetAsQueryParams,\n}: Props) {\n  const api = useApi();\n  const [dashboards, setDashboards] = useState<DashboardListItem[] | null>(null);\n  const [selectedDashboard, setSelectedDashboard] = useState<DashboardDetails | null>(\n    null\n  );\n  const [selectedDashboardId, setSelectedDashboardId] = useState<string | null>(null);\n\n  useEffect(() => {\n    // Track mounted state so we dont call setState on unmounted components\n    let unmounted = false;\n\n    fetchDashboards(api, organization.slug).then(response => {\n      // If component has unmounted, dont set state\n      if (unmounted) {\n        return;\n      }\n\n      setDashboards(response);\n    });\n\n    return () => {\n      unmounted = true;\n    };\n  }, [api, organization.slug]);\n\n  useEffect(() => {\n    // Track mounted state so we dont call setState on unmounted components\n    let unmounted = false;\n\n    if (selectedDashboardId === NEW_DASHBOARD_ID || selectedDashboardId === null) {\n      setSelectedDashboard(null);\n    } else {\n      fetchDashboard(api, organization.slug, selectedDashboardId).then(response => {\n        // If component has unmounted, dont set state\n        if (unmounted) {\n          return;\n        }\n\n        setSelectedDashboard(response);\n      });\n    }\n\n    return () => {\n      unmounted = true;\n    };\n  }, [api, organization.slug, selectedDashboardId]);\n\n  function handleGoToBuilder() {\n    const pathname =\n      selectedDashboardId === NEW_DASHBOARD_ID\n        ? `/organizations/${organization.slug}/dashboards/new/widget/new/`\n        : `/organizations/${organization.slug}/dashboard/${selectedDashboardId}/widget/new/`;\n\n    router.push(\n      normalizeUrl({\n        pathname,\n        query: {\n          ...widgetAsQueryParams,\n          ...(selectedDashboard ? getSavedPageFilters(selectedDashboard) : {}),\n        },\n      })\n    );\n    closeModal();\n  }\n\n  async function handleAddAndStayInDiscover() {\n    if (selectedDashboard === null) {\n      return;\n    }\n\n    let orderby = widget.queries[0].orderby;\n    if (!(DisplayType.AREA && widget.queries[0].columns.length)) {\n      orderby = ''; // Clear orderby if its not a top n visualization.\n    }\n    const query = widget.queries[0];\n\n    const newWidget = {\n      ...widget,\n      title: widget.title === '' ? t('All Events') : widget.title,\n      queries: [{...query, orderby}],\n    };\n\n    const newDashboard = {\n      ...selectedDashboard,\n      widgets: [...selectedDashboard.widgets, newWidget],\n    };\n\n    await updateDashboard(api, organization.slug, newDashboard);\n\n    closeModal();\n    addSuccessMessage(t('Successfully added widget to dashboard'));\n  }\n\n  const canSubmit = selectedDashboardId !== null;\n\n  return (\n    <OrganizationContext.Provider value={organization}>\n      <Header closeButton>\n        <h4>{t('Add to Dashboard')}</h4>\n      </Header>\n      <Body>\n        <Wrapper>\n          <SelectControl\n            disabled={dashboards === null}\n            menuPlacement=\"auto\"\n            name=\"dashboard\"\n            placeholder={t('Select Dashboard')}\n            value={selectedDashboardId}\n            options={\n              dashboards && [\n                {label: t('+ Create New Dashboard'), value: 'new'},\n                ...dashboards.map(({title, id, widgetDisplay}) => ({\n                  label: title,\n                  value: id,\n                  disabled: widgetDisplay.length >= MAX_WIDGETS,\n                  tooltip:\n                    widgetDisplay.length >= MAX_WIDGETS &&\n                    tct('Max widgets ([maxWidgets]) per dashboard reached.', {\n                      maxWidgets: MAX_WIDGETS,\n                    }),\n                  tooltipOptions: {position: 'right'},\n                })),\n              ]\n            }\n            onChange={(option: SelectValue<string>) => {\n              if (option.disabled) {\n                return;\n              }\n              setSelectedDashboardId(option.value);\n            }}\n          />\n        </Wrapper>\n        <Wrapper>\n          {t(\n            'Any conflicting filters from this query will be overridden by Dashboard filters. This is a preview of how the widget will appear in your dashboard.'\n          )}\n        </Wrapper>\n        <MetricsCardinalityProvider organization={organization} location={location}>\n          <MetricsDataSwitcher\n            organization={organization}\n            eventView={eventViewFromWidget(\n              widget.title,\n              widget.queries[0],\n              selection,\n              widget.displayType\n            )}\n            location={location}\n            hideLoadingIndicator\n          >\n            {metricsDataSide => (\n              <MEPSettingProvider\n                location={location}\n                forceTransactions={metricsDataSide.forceTransactionsOnly}\n              >\n                <WidgetCard\n                  organization={organization}\n                  isEditing={false}\n                  widgetLimitReached={false}\n                  selection={\n                    selectedDashboard\n                      ? getSavedFiltersAsPageFilters(selectedDashboard)\n                      : selection\n                  }\n                  dashboardFilters={\n                    getDashboardFiltersFromURL(location) ?? selectedDashboard?.filters\n                  }\n                  widget={widget}\n                  showStoredAlert\n                />\n              </MEPSettingProvider>\n            )}\n          </MetricsDataSwitcher>\n        </MetricsCardinalityProvider>\n      </Body>\n\n      <Footer>\n        <StyledButtonBar gap={1.5}>\n          <Button\n            onClick={handleAddAndStayInDiscover}\n            disabled={!canSubmit || selectedDashboardId === NEW_DASHBOARD_ID}\n            title={canSubmit ? undefined : SELECT_DASHBOARD_MESSAGE}\n          >\n            {t('Add + Stay in Discover')}\n          </Button>\n          <Button\n            priority=\"primary\"\n            onClick={handleGoToBuilder}\n            disabled={!canSubmit}\n            title={canSubmit ? undefined : SELECT_DASHBOARD_MESSAGE}\n          >\n            {t('Open in Widget Builder')}\n          </Button>\n        </StyledButtonBar>\n      </Footer>\n    </OrganizationContext.Provider>\n  );\n}\n\nexport default AddToDashboardModal;\n\nconst Wrapper = styled('div')`\n  margin-bottom: ${space(2)};\n`;\n\nconst StyledButtonBar = styled(ButtonBar)`\n  @media (max-width: ${props => props.theme.breakpoints.small}) {\n    grid-template-rows: repeat(2, 1fr);\n    gap: ${space(1.5)};\n    width: 100%;\n\n    > button {\n      width: 100%;\n    }\n  }\n`;\n\nexport const modalCss = css`\n  max-width: 700px;\n  margin: 70px auto;\n`;\n"],"names":["SELECT_DASHBOARD_MESSAGE","t","AddToDashboardModal","_ref","Header","Body","Footer","closeModal","location","organization","router","selection","widget","widgetAsQueryParams","api","useApi","dashboards","setDashboards","useState","selectedDashboard","setSelectedDashboard","selectedDashboardId","setSelectedDashboardId","useEffect","unmounted","fetchDashboards","slug","then","response","NEW_DASHBOARD_ID","fetchDashboard","canSubmit","_jsxs","OrganizationContext","Provider","value","children","_jsx","closeButton","Wrapper","SelectControl","disabled","menuPlacement","name","placeholder","options","label","map","_ref2","title","id","widgetDisplay","length","MAX_WIDGETS","tooltip","tct","maxWidgets","tooltipOptions","position","onChange","option","MetricsCardinalityProvider","MetricsDataSwitcher","eventView","eventViewFromWidget","queries","displayType","hideLoadingIndicator","metricsDataSide","MEPSettingProvider","forceTransactions","forceTransactionsOnly","WidgetCard","isEditing","widgetLimitReached","getSavedFiltersAsPageFilters","dashboardFilters","getDashboardFiltersFromURL","filters","showStoredAlert","StyledButtonBar","gap","Button","onClick","async","orderby","DisplayType","AREA","columns","query","newWidget","newDashboard","widgets","updateDashboard","addSuccessMessage","undefined","priority","pathname","push","normalizeUrl","getSavedPageFilters","displayName","_styled","target","space","ButtonBar","props","theme","breakpoints","small","modalCss","styles"],"sourceRoot":""}