{"version":3,"file":"chunks/app_views_admin_adminQuotas_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"qiBAuBA,MAAMA,UAA0BC,EAAAA,UAAwBC,cAAA,SAAAC,YAAAC,EAAAA,EAAAA,GAAA,aACvC,CACbC,OAAO,EACPC,SAAS,EACTC,KAAM,QACPH,EAAAA,EAAAA,GAAA,kBAoBW,KACVI,KAAKC,SAAS,CAACH,SAAS,IACxBE,KAAKE,MAAMC,IAAIC,QAAQ,mBAAoB,CACzCC,OAAQ,MACRN,KAAM,CACJO,MAAON,KAAKE,MAAMI,MAClBC,WAAYP,KAAKE,MAAMK,WACvBC,IAAKR,KAAKE,MAAMO,MAElBC,QAASX,GACPC,KAAKC,SAAS,CACZF,OACAD,SAAS,EACTD,OAAO,IAEXA,MAAOA,IAAMG,KAAKC,SAAS,CAACJ,OAAO,EAAMC,SAAS,KAClD,GACH,CAnCDa,oBACEX,KAAKY,WACP,CAEAC,sBAAsBC,EAAmBC,GACvC,OAAOf,KAAKgB,MAAMlB,UAAYiB,EAAUjB,OAC1C,CAEAmB,mBAAmBC,GAEfA,EAAUZ,QAAUN,KAAKE,MAAMI,OAC/BY,EAAUT,OAAST,KAAKE,MAAMO,MAC9BS,EAAUX,aAAeP,KAAKE,MAAMK,YAEpCP,KAAKY,WAET,CAqBAO,SACE,MAAM,QAACrB,EAAO,MAAED,EAAK,KAAEE,GAAQC,KAAKgB,OAC9B,MAACI,EAAK,OAAEC,GAAUrB,KAAKE,MAC7B,GAAIJ,EACF,OAAOwB,EAAAA,EAAAA,IAACC,EAAAA,EAAgB,IAE1B,GAAI1B,EACF,OAAOyB,EAAAA,EAAAA,IAACE,EAAAA,EAAY,CAACC,QAASzB,KAAKY,YAGrC,MAAMc,EAAS,CACbC,WAAYP,EACZrB,KACEA,GAAM6B,KAAIC,IAAA,IAAEC,EAAWC,GAAMF,EAAA,MAAM,CACjCG,KAAkB,IAAZF,EACNC,QACD,KAAM,IAEX,OACET,EAAAA,EAAAA,IAACW,EAAAA,EAAY,CACXZ,OAAQA,GAAU,IAClBK,OAAQ,CAACA,GACTQ,iBAAe,EACfC,mBAAiB,EACjBC,mBAAiB,GAGvB,EAvEI5C,EAAiB6C,YAAA,oBA0EvB,SAAeC,EAAAA,EAAAA,GAAQ9C,E,2ZC9ER,MAAM+C,UAAoBC,EAAAA,EACvCC,kBACE,MAAO,IACFC,MAAMD,kBACTnC,OAAO,IAAIqC,MAAOC,UAAY,IAAO,OACrCrC,WAAY,KAEhB,CAEAsC,eACE,MAAO,CAAC,CAAC,SAAU,qBACrB,CAEAC,aACE,MAAM,OAACC,GAAU/C,KAAKgB,MACtB,OACEgC,EAAAA,EAAAA,IAACC,EAAAA,SAAQ,CAAAC,SAAA,EACP5B,EAAAA,EAAAA,IAAA,MAAA4B,SAAI,YAEJF,EAAAA,EAAAA,IAACG,EAAAA,GAAK,CAAAD,SAAA,EACJ5B,EAAAA,EAAAA,IAAC8B,EAAAA,GAAW,CAAAF,UAAEG,EAAAA,EAAAA,GAAE,aAChBL,EAAAA,EAAAA,IAACM,EAAAA,EAAS,CAACC,aAAW,EAAAL,SAAA,EACpB5B,EAAAA,EAAAA,IAACkC,EAAAA,EAAS,CACRxB,KAAK,UACLD,MAAOgB,EAAOU,QACdrC,MAAM,UACNsC,UAAQ,EACRC,QAAQ,EACRC,SAAO,KAETtC,EAAAA,EAAAA,IAACkC,EAAAA,EAAS,CACRxB,KAAK,YACLD,MAAOgB,EAAOc,QAAQ,qBACtBzC,MAAM,aACNsC,UAAQ,EACRC,QAAQ,EACRC,SAAO,WAKbZ,EAAAA,EAAAA,IAACG,EAAAA,GAAK,CAAAD,SAAA,EACJ5B,EAAAA,EAAAA,IAAC8B,EAAAA,GAAW,CAAAF,UAAEG,EAAAA,EAAAA,GAAE,mBAChB/B,EAAAA,EAAAA,IAACgC,EAAAA,EAAS,CAACC,aAAW,EAAAL,UACpB5B,EAAAA,EAAAA,IAAC9B,EAAAA,EAAiB,CAChBc,MAAON,KAAKgB,MAAMV,MAClBC,WAAYP,KAAKgB,MAAMT,WACvBE,KAAK,eACLW,MAAM,iBAKZ4B,EAAAA,EAAAA,IAACG,EAAAA,GAAK,CAAAD,SAAA,EACJ5B,EAAAA,EAAAA,IAAC8B,EAAAA,GAAW,CAAAF,UAAEG,EAAAA,EAAAA,GAAE,qBAChB/B,EAAAA,EAAAA,IAACgC,EAAAA,EAAS,CAACC,aAAW,EAAAL,UACpB5B,EAAAA,EAAAA,IAAC9B,EAAAA,EAAiB,CAChBc,MAAON,KAAKgB,MAAMV,MAClBC,WAAYP,KAAKgB,MAAMT,WACvBE,KAAK,iBACLW,MAAM,kBAMlB,E,wPC/Ea,MAAMoB,UAGXsB,EAAAA,EACRC,WACE,MAAO,EACT,CAEA5C,SACE,OACEG,EAAAA,EAAAA,IAAC0C,EAAAA,EAAmB,CAACC,MAAOjE,KAAK+D,WAAWb,SACzClD,KAAKkE,mBAGZ,EAdmB1B,EAASH,YAAA,W","sources":["webpack:///./app/components/internalStatChart.tsx","webpack:///./app/views/admin/adminQuotas.tsx","webpack:///./app/views/asyncView.tsx"],"sourcesContent":["import {Component} from 'react';\n\nimport {Client} from 'sentry/api';\nimport MiniBarChart from 'sentry/components/charts/miniBarChart';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport withApi from 'sentry/utils/withApi';\n\ntype Props = {\n  api: Client;\n  label: string;\n  resolution: string;\n  since: number;\n  stat: string;\n  height?: number;\n};\n\ntype State = {\n  data: [number, number][] | null;\n  error: boolean;\n  loading: boolean;\n};\n\nclass InternalStatChart extends Component<Props, State> {\n  state: State = {\n    error: false,\n    loading: true,\n    data: null,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  shouldComponentUpdate(_nextProps: Props, nextState: State) {\n    return this.state.loading !== nextState.loading;\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      prevProps.since !== this.props.since ||\n      prevProps.stat !== this.props.stat ||\n      prevProps.resolution !== this.props.resolution\n    ) {\n      this.fetchData();\n    }\n  }\n\n  fetchData = () => {\n    this.setState({loading: true});\n    this.props.api.request('/internal/stats/', {\n      method: 'GET',\n      data: {\n        since: this.props.since,\n        resolution: this.props.resolution,\n        key: this.props.stat,\n      },\n      success: data =>\n        this.setState({\n          data,\n          loading: false,\n          error: false,\n        }),\n      error: () => this.setState({error: true, loading: false}),\n    });\n  };\n\n  render() {\n    const {loading, error, data} = this.state;\n    const {label, height} = this.props;\n    if (loading) {\n      return <LoadingIndicator />;\n    }\n    if (error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n\n    const series = {\n      seriesName: label,\n      data:\n        data?.map(([timestamp, value]) => ({\n          name: timestamp * 1000,\n          value,\n        })) ?? [],\n    };\n    return (\n      <MiniBarChart\n        height={height ?? 150}\n        series={[series]}\n        isGroupedByDate\n        showTimeInTooltip\n        labelYAxisExtents\n      />\n    );\n  }\n}\n\nexport default withApi(InternalStatChart);\n","import {Fragment} from 'react';\n\nimport TextField from 'sentry/components/forms/fields/textField';\nimport InternalStatChart from 'sentry/components/internalStatChart';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport AsyncView from 'sentry/views/asyncView';\n\ntype Config = {\n  backend: string;\n  options: Record<string, string>;\n};\n\ntype State = AsyncView['state'] & {\n  config: Config;\n  resolution: string;\n  since: number;\n};\n\nexport default class AdminQuotas extends AsyncView<{}, State> {\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      since: new Date().getTime() / 1000 - 3600 * 24 * 7,\n      resolution: '1h',\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    return [['config', '/internal/quotas/']];\n  }\n\n  renderBody() {\n    const {config} = this.state;\n    return (\n      <Fragment>\n        <h3>Quotas</h3>\n\n        <Panel>\n          <PanelHeader>{t('Config')}</PanelHeader>\n          <PanelBody withPadding>\n            <TextField\n              name=\"backend\"\n              value={config.backend}\n              label=\"Backend\"\n              disabled\n              inline={false}\n              stacked\n            />\n            <TextField\n              name=\"rateLimit\"\n              value={config.options['system.rate-limit']}\n              label=\"Rate Limit\"\n              disabled\n              inline={false}\n              stacked\n            />\n          </PanelBody>\n        </Panel>\n\n        <Panel>\n          <PanelHeader>{t('Total Events')}</PanelHeader>\n          <PanelBody withPadding>\n            <InternalStatChart\n              since={this.state.since}\n              resolution={this.state.resolution}\n              stat=\"events.total\"\n              label=\"Events\"\n            />\n          </PanelBody>\n        </Panel>\n\n        <Panel>\n          <PanelHeader>{t('Dropped Events')}</PanelHeader>\n          <PanelBody withPadding>\n            <InternalStatChart\n              since={this.state.since}\n              resolution={this.state.resolution}\n              stat=\"events.dropped\"\n              label=\"Events\"\n            />\n          </PanelBody>\n        </Panel>\n      </Fragment>\n    );\n  }\n}\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\nexport type AsyncViewState = AsyncComponent['state'];\nexport type AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n"],"names":["InternalStatChart","Component","constructor","arguments","_defineProperty","error","loading","data","this","setState","props","api","request","method","since","resolution","key","stat","success","componentDidMount","fetchData","shouldComponentUpdate","_nextProps","nextState","state","componentDidUpdate","prevProps","render","label","height","_jsx","LoadingIndicator","LoadingError","onRetry","series","seriesName","map","_ref","timestamp","value","name","MiniBarChart","isGroupedByDate","showTimeInTooltip","labelYAxisExtents","displayName","withApi","AdminQuotas","AsyncView","getDefaultState","super","Date","getTime","getEndpoints","renderBody","config","_jsxs","Fragment","children","Panel","PanelHeader","t","PanelBody","withPadding","TextField","backend","disabled","inline","stacked","options","AsyncComponent","getTitle","SentryDocumentTitle","title","renderComponent"],"sourceRoot":""}