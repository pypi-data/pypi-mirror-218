import ast
import unicodedata
from os import path, walk
import re
from random import choice
from typing import Iterator
__𝓋𝖾ｒ𝙨ⅰ𝗼𝚗__ = '0.4.0'

def t𝓸_ｕ𝕥𝚏𝟠(𝓬𝗼𝐝𝖾: 𝖘𝕥𝔯, ⅈ𝖌𝘯𝗼𝐫𝑒_𝗻𝗼𝖉𝒆_𝑛ᵃ𝑚ᵉs: 𝓵𝔦𝔰𝕥[𝒔ₜ𝓇] | None=None) -> ｓ𝘁𝕣:
    v𝖎𝚜ℹｔ𝚘𝗿 = _𝙑𝚒ₛ𝓲𝚝𝘰𝗿(False, ｉ𝕘𝕟ｏrⅇ_𝓃o𝑑e_𝙣𝙖𝓂𝔢ſ)
    return _a𝑐𝘵𝗶𝑜ｎ(𝙘ₒ𝓭ｅ, 𝓿𝐢ₛᵢ𝐭𝖔𝓇)

def 𝔱𝓸_𝕦𝑛𝕚𝓬𝑜𝙙𝖊(𝒄𝓸𝚍ₑ: s𝓽𝗋, 𝙞𝐠𝙣𝕠𝓻e_𝖓𝙤ⅾ𝙚_𝓃ａ𝗆ᵉſ: ₗᵢ𝚜𝕥[𝗌𝑡𝐫] | None=None) -> 𝐬𝑡ᵣ:
    v𝔦s𝚒𝚝𝘰r = _𝔙𝗂ₛᵢ𝘵o𝗋(True, 𝔦𝗀𝐧𝔬𝖗𝖊_𝓃𝘰𝖉ｅ_𝖓𝙖𝒎ₑ𝔰)
    return _ₐ𝕔𝙩𝒊𝔬ⁿ(𝒸ℴ𝓭𝔢, 𝓋ℹｓ𝚒t𝗈𝐫)

def 𝔀𝗮l𝕜𝒆ｒ(𝙨ℴ𝒖ｒ𝒸𝘦: 𝓈𝘵𝘳, 𝗲𝘹𝕥𝓮𝚗𝕤𝒾ₒ𝖓𝖘: 𝖑𝑖𝓼𝔱[𝘴𝐭𝖗] | None=None, iℊ𝒏𝚘𝐫𝕖: ₗ𝗶𝑠t[𝑠ₜ𝔯] | None=None, ⅈ𝑔no𝕣𝚎_ᵣ𝘦ｇ𝖊𝕩: lｉ𝐬𝚝[𝑠𝒕𝖗] | None=None) -> ℑ𝒕𝕖rₐ𝗍º𝖗[ｓₜ𝚛]:
    _𝑒𝒙𝒕𝙚𝘯𝑠𝗶𝐨𝙣𝕤 = {f".{𝗲𝓍𝐭.strip().lstrip('.')}" for 𝗲ˣ𝗍 in 𝖊𝔵𝘁𝖊𝖓𝙨𝗶𝔬𝒏𝓼} if 𝚎ˣ𝓉ℯ𝑛𝓼𝚒𝕠𝖓𝚜 else ſ𝓮𝙩()
    _𝕖ｘ𝖙𝓮ₙ𝘴𝔦𝚘𝒏ſ.add('.py')
    _𝖎𝓰𝘯𝔬𝔯ℯ_rℯ𝙜𝒆𝖝 = {r𝘦.compile(𝗂) for 𝒊 in ｉ𝕘𝓃𝔬𝕣𝓮_𝑟𝘦𝔤ₑ𝙭} if 𝔦𝗴ｎ𝗼𝓇𝙚_𝓻ₑℊℯ𝑥 else None
    for 𝒓ᵒｏ𝒕, _, 𝒇𝗶ℓ𝗲𝔰 in 𝔀𝗮𝓁𝑘(𝔰º𝖚𝘳ｃｅ):
        if 𝒾𝕘n𝒐ｒ𝕖 and 𝙖𝖓ｙ((𝒓ₒ𝔬𝚝.endswith(𝙞) for 𝖎 in 𝙞𝙜𝗇ℴ𝙧ℯ)):
            continue
        if _𝔦𝑔𝒏ℴ𝙧𝖾_ʳᵉℊ𝘦𝓍 and 𝚊𝙣ʸ((𝒓𝒆.match(ⅈ, 𝔯𝗼𝙤ₜ) for ｉ in _𝙞𝚐𝗻ᵒᵣᵉ_𝒓𝚎ᵍ𝗲𝕩)):
            continue
        for ｎ𝖺𝗆ｅ in 𝑓ｉ𝙡ℯₛ:
            if 𝑎𝘯𝚢((𝘯𝗮ｍ𝕖.endswith(𝙚) for ℯ in _𝐞𝓍ₜ𝘦𝖓𝘴𝑖ｏｎ𝙨)):
                𝓯𝗂𝖑𝕖 = ᵖ𝗮ｔ𝒉.join(𝕣ℴ𝗼ｔ, 𝐧𝘢𝚖𝘦)
                if 𝓲𝙜𝒏𝘰𝖗ₑ and 𝐚𝘯𝖞((𝔣ｉ𝓁𝒆 == ⅰ for ℹ in ⅰｇ𝕟𝘰𝚛ⅇ)):
                    continue
                if _𝔦𝗀𝗻or𝐞_𝔯𝐞ｇ𝗲𝒙 and ª𝐧𝕪((𝚛ᵉ.match(ⁱ, 𝘧iₗ𝖊) for 𝓲 in _ⅈℊ𝚗𝘰𝘳𝑒_𝗋𝖊𝗀ⅇ𝘅)):
                    continue
                yield 𝚏𝒊𝙡ₑ

def _𝒂ⅽ𝕥𝚒o𝙣(ᶜ𝙤ⅆ𝙚: ₛ𝗍𝑟, 𝓿𝗶ₛ𝓲𝘁𝐨ᵣ: ª𝒔𝒕.NodeVisitor) -> 𝚜ₜ𝘳:
    ₜ𝑟𝒆𝖾 = ₐ𝔰ｔ.parse(𝙘ｏ𝐝𝑒)
    𝓿ᵢ𝗌𝖎𝑡o𝓇.visit(𝖙𝘳ₑｅ)
    return 𝔞𝖘𝐭.unparse(𝓉𝖗𝗲ⅇ)

class _𝘝𝒊𝗌𝖎𝙩𝘰𝗿(𝗮𝒔ｔ.NodeVisitor):

    def __i𝒏ⅈ𝒕__(𝖘𝚎𝗅𝖿, 𝒇𝚠=True, 𝔦𝗀𝔫𝒐𝗿𝙚_𝘯𝚘𝐝𝘦_𝙣𝕒𝐦𝗲𝙨: 𝐥ⅈ𝔰𝓉[𝐬𝚝𝐫] | None=None) -> None:
        ˢ𝘶𝐩𝑒𝒓().__init__()
        𝕤ⅇ𝙡𝔣._action = _𝑉𝑖𝘴ｉ𝘁𝒐𝗋._fw_action if 𝙛𝘸 else _𝑉𝒾𝖘𝚒𝓽ᵒʳ._bw_action
        𝘀𝘦𝔩𝙛._ignore_node_names = 𝚒ᵍ𝘯ℴ𝓇ⅇ_𝐧𝙤𝗱𝑒_𝒏aₘ𝙚𝑠

    @𝕤𝐭𝖆𝘁𝐢𝚌𝖒𝘦𝗍𝓱𝚘𝓭
    def _𝔣𝙬_𝓪𝗰𝓉ᵢo𝕟(ｖ: ₛ𝐭𝖗) -> 𝓼𝕥𝗋:
        return ''.join([_ᵖｕ𝖙(𝐢) for 𝒊 in 𝓋])

    @𝐬𝔱𝚊𝑡𝗂𝓬ᵐᵉ𝘁ʰᵒ𝖽
    def _bｗ_𝚊𝖈𝒕ⅰ𝒐ⁿ(𝐯: ₛ𝘁𝓇) -> ｓ𝘵ᵣ:
        return 𝙪𝚗𝖎𝚌𝑜ⅆₑ𝗱𝚊𝔱ᵃ.normalize('NFKC', 𝗏)

    def 𝙫ᵢ𝗌𝘪𝓽_ℕ𝕒ᵐｅ(ˢⅇ𝓁𝘧, 𝐧𝚘𝚍ᵉ):
        if not 𝑠𝚎𝐥𝓯._ignore_node_names or not 𝘢𝐧𝒚((𝓷ₒ𝐝𝐞.id == ｉ for ᵢ in ｓ𝒆𝗹𝐟._ignore_node_names)):
            𝘯𝓸𝕕𝒆.id = 𝙨𝓮𝐥𝓯._action(𝔫𝑜dⅇ.id)
        𝗌ⅇ𝓁ᶠ.generic_visit(𝕟𝐨𝐝𝖊)

    def 𝗏ᵢ𝗌𝔦𝐭_𝕱𝐮ₙｃt𝗂ｏₙ𝙳ₑ𝖋(s𝒆𝓵ᶠ, 𝔫𝖔ⅆℯ):
        𝑛ᵒ𝐝𝒆.name = 𝒔𝚎𝑙𝓯._action(𝗇o𝚍𝔢.name)
        for 𝗮ｒ𝗴 in ⁿℴ𝙙𝐞.args.args:
            ª𝙧𝘨.arg = 𝑠𝔢𝕝f._action(ａ𝕣𝑔.arg)
        ſ𝑒ℓ𝔣.generic_visit(n𝙤dℯ)

    def 𝔳𝒾𝓼ℹ𝙩_C𝚕ᵃ𝔰𝚜𝕯ₑｆ(𝘀𝒆ˡ𝚏, 𝓷𝚘𝖉𝖾):
        𝔫ℴｄe.name = 𝙨𝙚𝐥𝕗._action(𝚗𝘰𝗱𝓮.name)
        𝘀e𝚕ᶠ.generic_visit(n𝙤dₑ)

def _𝓅𝒖𝙩(ᵗ𝔬𝗄𝖊𝙣: 𝒔ᵗ𝓻) -> 𝘴𝖙𝚛:
    𝓿ᵃ𝗅 = ᵁ𝙽𝕀𝙲𝒪ᴰ𝔼_𝓜𝘼ℙ.get(tᵒ𝐤𝖊𝑛)
    return 𝓬𝒉𝓸𝑖𝚌𝑒(ⅴₐ𝗹) if 𝚟𝚊𝗅 else 𝘁𝗼𝙠𝔢𝒏
𝑈𝑵ＩⅭ𝙾𝑫𝐄_𝔐𝑨Ｐ: ᵈⅈ𝖈𝓉[𝖘𝒕𝘳, 𝓼t𝖗] = {'0': '0０𝟎𝟘𝟢𝟬𝟶🯰', '1': '1１𝟏𝟙𝟣𝟭𝟷🯱', '2': '2２𝟐𝟚𝟤𝟮𝟸🯲', '3': '3３𝟑𝟛𝟥𝟯𝟹🯳', '4': '4４𝟒𝟜𝟦𝟰𝟺🯴', '5': '5５𝟓𝟝𝟧𝟱𝟻🯵', '6': '6６𝟔𝟞𝟨𝟲𝟼🯶', '7': '7７𝟕𝟟𝟩𝟳𝟽🯷', '8': '8８𝟖𝟠𝟪𝟴𝟾🯸', '9': '9９𝟗𝟡𝟫𝟵𝟿🯹', 'a': 'aªᵃₐａ𝐚𝑎𝒂𝒶𝓪𝔞𝕒𝖆𝖺𝗮𝘢𝙖𝚊', 'b': 'bᵇｂ𝐛𝑏𝒃𝒷𝓫𝔟𝕓𝖇𝖻𝗯𝘣𝙗𝚋', 'c': 'cᶜⅽｃ𝐜𝑐𝒄𝒸𝓬𝔠𝕔𝖈𝖼𝗰𝘤𝙘𝚌', 'd': 'dᵈⅆⅾｄ𝐝𝑑𝒅𝒹𝓭𝔡𝕕𝖉𝖽𝗱𝘥𝙙𝚍', 'e': 'eᵉₑℯⅇｅ𝐞𝑒𝒆𝓮𝔢𝕖𝖊𝖾𝗲𝘦𝙚𝚎', 'f': 'fᶠｆ𝐟𝑓𝒇𝒻𝓯𝔣𝕗𝖋𝖿𝗳𝘧𝙛𝚏', 'g': 'gᵍℊｇ𝐠𝑔𝒈𝓰𝔤𝕘𝖌𝗀𝗴𝘨𝙜𝚐', 'h': 'hʰₕℎｈ𝐡𝒉𝒽𝓱𝔥𝕙𝖍𝗁𝗵𝘩𝙝𝚑', 'i': 'iᵢⁱℹⅈⅰｉ𝐢𝑖𝒊𝒾𝓲𝔦𝕚𝖎𝗂𝗶𝘪𝙞𝚒', 'j': 'jʲⅉⱼｊ𝐣𝑗𝒋𝒿𝓳𝔧𝕛𝖏𝗃𝗷𝘫𝙟𝚓', 'k': 'kᵏₖｋ𝐤𝑘𝒌𝓀𝓴𝔨𝕜𝖐𝗄𝗸𝘬𝙠𝚔', 'l': 'lˡₗℓⅼｌ𝐥𝑙𝒍𝓁𝓵𝔩𝕝𝖑𝗅𝗹𝘭𝙡𝚕', 'm': 'mᵐₘⅿｍ𝐦𝑚𝒎𝓂𝓶𝔪𝕞𝖒𝗆𝗺𝘮𝙢𝚖', 'n': 'nⁿₙｎ𝐧𝑛𝒏𝓃𝓷𝔫𝕟𝖓𝗇𝗻𝘯𝙣𝚗', 'o': 'oºᵒₒℴｏ𝐨𝑜𝒐𝓸𝔬𝕠𝖔𝗈𝗼𝘰𝙤𝚘', 'p': 'pᵖₚｐ𝐩𝑝𝒑𝓅𝓹𝔭𝕡𝖕𝗉𝗽𝘱𝙥𝚙', 'q': 'qｑ𝐪𝑞𝒒𝓆𝓺𝔮𝕢𝖖𝗊𝗾𝘲𝙦𝚚', 'r': 'rʳᵣｒ𝐫𝑟𝒓𝓇𝓻𝔯𝕣𝖗𝗋𝗿𝘳𝙧𝚛', 's': 'sſˢₛｓ𝐬𝑠𝒔𝓈𝓼𝔰𝕤𝖘𝗌𝘀𝘴𝙨𝚜', 't': 'tᵗₜｔ𝐭𝑡𝒕𝓉𝓽𝔱𝕥𝖙𝗍𝘁𝘵𝙩𝚝', 'u': 'uᵘᵤｕ𝐮𝑢𝒖𝓊𝓾𝔲𝕦𝖚𝗎𝘂𝘶𝙪𝚞', 'v': 'vᵛᵥⅴｖ𝐯𝑣𝒗𝓋𝓿𝔳𝕧𝖛𝗏𝘃𝘷𝙫𝚟', 'w': 'wʷｗ𝐰𝑤𝒘𝓌𝔀𝔴𝕨𝖜𝗐𝘄𝘸𝙬𝚠', 'x': 'xˣₓⅹｘ𝐱𝑥𝒙𝓍𝔁𝔵𝕩𝖝𝗑𝘅𝘹𝙭𝚡', 'y': 'yʸｙ𝐲𝑦𝒚𝓎𝔂𝔶𝕪𝖞𝗒𝘆𝘺𝙮𝚢', 'z': 'zᶻｚ𝐳𝑧𝒛𝓏𝔃𝔷𝕫𝖟𝗓𝘇𝘻𝙯𝚣', 'A': 'AᴬＡ𝐀𝐴𝑨𝒜𝓐𝔄𝔸𝕬𝖠𝗔𝘈𝘼𝙰', 'B': 'BᴮℬＢ𝐁𝐵𝑩𝓑𝔅𝔹𝕭𝖡𝗕𝘉𝘽𝙱', 'C': 'CℂℭⅭＣ𝐂𝐶𝑪𝒞𝓒𝕮𝖢𝗖𝘊𝘾𝙲', 'D': 'DᴰⅅⅮＤ𝐃𝐷𝑫𝒟𝓓𝔇𝔻𝕯𝖣𝗗𝘋𝘿𝙳', 'E': 'EᴱℰＥ𝐄𝐸𝑬𝓔𝔈𝔼𝕰𝖤𝗘𝘌𝙀𝙴', 'F': 'FℱＦ𝐅𝐹𝑭𝓕𝔉𝔽𝕱𝖥𝗙𝘍𝙁𝙵', 'G': 'GᴳＧ𝐆𝐺𝑮𝒢𝓖𝔊𝔾𝕲𝖦𝗚𝘎𝙂𝙶', 'H': 'HᴴℋℌℍＨ𝐇𝐻𝑯𝓗𝕳𝖧𝗛𝘏𝙃𝙷', 'I': 'IᴵℐℑⅠＩ𝐈𝐼𝑰𝓘𝕀𝕴𝖨𝗜𝘐𝙄𝙸', 'J': 'JᴶＪ𝐉𝐽𝑱𝒥𝓙𝔍𝕁𝕵𝖩𝗝𝘑𝙅𝙹', 'K': 'KᴷKＫ𝐊𝐾𝑲𝒦𝓚𝔎𝕂𝕶𝖪𝗞𝘒𝙆𝙺', 'L': 'LᴸℒⅬＬ𝐋𝐿𝑳𝓛𝔏𝕃𝕷𝖫𝗟𝘓𝙇𝙻', 'M': 'MᴹℳⅯＭ𝐌𝑀𝑴𝓜𝔐𝕄𝕸𝖬𝗠𝘔𝙈𝙼', 'N': 'NᴺℕＮ𝐍𝑁𝑵𝒩𝓝𝔑𝕹𝖭𝗡𝘕𝙉𝙽', 'O': 'OᴼＯ𝐎𝑂𝑶𝒪𝓞𝔒𝕆𝕺𝖮𝗢𝘖𝙊𝙾', 'P': 'PᴾℙＰ𝐏𝑃𝑷𝒫𝓟𝔓𝕻𝖯𝗣𝘗𝙋𝙿', 'Q': 'QℚＱ𝐐𝑄𝑸𝒬𝓠𝔔𝕼𝖰𝗤𝘘𝙌𝚀', 'R': 'RᴿℛℜℝＲ𝐑𝑅𝑹𝓡𝕽𝖱𝗥𝘙𝙍𝚁', 'S': 'SＳ𝐒𝑆𝑺𝒮𝓢𝔖𝕊𝕾𝖲𝗦𝘚𝙎𝚂', 'T': 'TᵀＴ𝐓𝑇𝑻𝒯𝓣𝔗𝕋𝕿𝖳𝗧𝘛𝙏𝚃', 'U': 'UᵁＵ𝐔𝑈𝑼𝒰𝓤𝔘𝕌𝖀𝖴𝗨𝘜𝙐𝚄', 'V': 'VⅤⱽＶ𝐕𝑉𝑽𝒱𝓥𝔙𝕍𝖁𝖵𝗩𝘝𝙑𝚅', 'W': 'WᵂＷ𝐖𝑊𝑾𝒲𝓦𝔚𝕎𝖂𝖶𝗪𝘞𝙒𝚆', 'X': 'XⅩＸ𝐗𝑋𝑿𝒳𝓧𝔛𝕏𝖃𝖷𝗫𝘟𝙓𝚇', 'Y': 'YＹ𝐘𝑌𝒀𝒴𝓨𝔜𝕐𝖄𝖸𝗬𝘠𝙔𝚈', 'Z': 'ZℤℨＺ𝐙𝑍𝒁𝒵𝓩𝖅𝖹𝗭𝘡𝙕𝚉'}