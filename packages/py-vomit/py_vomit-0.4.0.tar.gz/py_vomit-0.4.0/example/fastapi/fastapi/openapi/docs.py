import json
from typing import Any, Dict, Optional
from fastapi.encoders import jsonable_encoder
from starlette.responses import HTMLResponse
swagger_ui_default_parameters = {'dom_id': '#swagger-ui', 'layout': 'BaseLayout', 'deepLinking': True, 'showExtensions': True, 'showCommonExtensions': True}

def get_swagger_ui_html(*, openapi_url: str, title: str, swagger_js_url: str='https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui-bundle.js', swagger_css_url: str='https://cdn.jsdelivr.net/npm/swagger-ui-dist@5/swagger-ui.css', swagger_favicon_url: str='https://fastapi.tiangolo.com/img/favicon.png', oauth2_redirect_url: Optional[str]=None, init_oauth: Optional[Dict[str, Any]]=None, swagger_ui_parameters: Optional[Dict[str, Any]]=None) -> HTMLResponse:
    current_swagger_ui_parameters = swagger_ui_default_parameters.copy()
    if swagger_ui_parameters:
        current_swagger_ui_parameters.update(swagger_ui_parameters)
    html = f"""\n    <!DOCTYPE html>\n    <html>\n    <head>\n    <link type="text/css" rel="stylesheet" href="{swagger_css_url}">\n    <link rel="shortcut icon" href="{swagger_favicon_url}">\n    <title>{title}</title>\n    </head>\n    <body>\n    <div id="swagger-ui">\n    </div>\n    <script src="{swagger_js_url}"></script>\n    <!-- `SwaggerUIBundle` is now available on the page -->\n    <script>\n    const ui = SwaggerUIBundle({{\n        url: '{openapi_url}',\n    """
    for key, value in current_swagger_ui_parameters.items():
        html += f'{json.dumps(key)}: {json.dumps(jsonable_encoder(value))},\n'
    if oauth2_redirect_url:
        html += f"oauth2RedirectUrl: window.location.origin + '{oauth2_redirect_url}',"
    html += '\n    presets: [\n        SwaggerUIBundle.presets.apis,\n        SwaggerUIBundle.SwaggerUIStandalonePreset\n        ],\n    })'
    if init_oauth:
        html += f'\n        ui.initOAuth({json.dumps(jsonable_encoder(init_oauth))})\n        '
    html += '\n    </script>\n    </body>\n    </html>\n    '
    return HTMLResponse(html)

def get_redoc_html(*, openapi_url: str, title: str, redoc_js_url: str='https://cdn.jsdelivr.net/npm/redoc@next/bundles/redoc.standalone.js', redoc_favicon_url: str='https://fastapi.tiangolo.com/img/favicon.png', with_google_fonts: bool=True) -> HTMLResponse:
    html = f'\n    <!DOCTYPE html>\n    <html>\n    <head>\n    <title>{title}</title>\n    <!-- needed for adaptive design -->\n    <meta charset="utf-8"/>\n    <meta name="viewport" content="width=device-width, initial-scale=1">\n    '
    if with_google_fonts:
        html += '\n    <link href="https://fonts.googleapis.com/css?family=Montserrat:300,400,700|Roboto:300,400,700" rel="stylesheet">\n    '
    html += f'''\n    <link rel="shortcut icon" href="{redoc_favicon_url}">\n    <!--\n    ReDoc doesn't change outer page styles\n    -->\n    <style>\n      body {{\n        margin: 0;\n        padding: 0;\n      }}\n    </style>\n    </head>\n    <body>\n    <noscript>\n        ReDoc requires Javascript to function. Please enable it to browse the documentation.\n    </noscript>\n    <redoc spec-url="{openapi_url}"></redoc>\n    <script src="{redoc_js_url}"> </script>\n    </body>\n    </html>\n    '''
    return HTMLResponse(html)

def get_swagger_ui_oauth2_redirect_html() -> HTMLResponse:
    html = '\n    <!doctype html>\n    <html lang="en-US">\n    <head>\n        <title>Swagger UI: OAuth2 Redirect</title>\n    </head>\n    <body>\n    <script>\n        \'use strict\';\n        function run () {\n            var oauth2 = window.opener.swaggerUIRedirectOauth2;\n            var sentState = oauth2.state;\n            var redirectUrl = oauth2.redirectUrl;\n            var isValid, qp, arr;\n\n            if (/code|token|error/.test(window.location.hash)) {\n                qp = window.location.hash.substring(1).replace(\'?\', \'&\');\n            } else {\n                qp = location.search.substring(1);\n            }\n\n            arr = qp.split("&");\n            arr.forEach(function (v,i,_arr) { _arr[i] = \'"\' + v.replace(\'=\', \'":"\') + \'"\';});\n            qp = qp ? JSON.parse(\'{\' + arr.join() + \'}\',\n                    function (key, value) {\n                        return key === "" ? value : decodeURIComponent(value);\n                    }\n            ) : {};\n\n            isValid = qp.state === sentState;\n\n            if ((\n              oauth2.auth.schema.get("flow") === "accessCode" ||\n              oauth2.auth.schema.get("flow") === "authorizationCode" ||\n              oauth2.auth.schema.get("flow") === "authorization_code"\n            ) && !oauth2.auth.code) {\n                if (!isValid) {\n                    oauth2.errCb({\n                        authId: oauth2.auth.name,\n                        source: "auth",\n                        level: "warning",\n                        message: "Authorization may be unsafe, passed state was changed in server. The passed state wasn\'t returned from auth server."\n                    });\n                }\n\n                if (qp.code) {\n                    delete oauth2.state;\n                    oauth2.auth.code = qp.code;\n                    oauth2.callback({auth: oauth2.auth, redirectUrl: redirectUrl});\n                } else {\n                    let oauthErrorMsg;\n                    if (qp.error) {\n                        oauthErrorMsg = "["+qp.error+"]: " +\n                            (qp.error_description ? qp.error_description+ ". " : "no accessCode received from the server. ") +\n                            (qp.error_uri ? "More info: "+qp.error_uri : "");\n                    }\n\n                    oauth2.errCb({\n                        authId: oauth2.auth.name,\n                        source: "auth",\n                        level: "error",\n                        message: oauthErrorMsg || "[Authorization failed]: no accessCode received from the server."\n                    });\n                }\n            } else {\n                oauth2.callback({auth: oauth2.auth, token: qp, isValid: isValid, redirectUrl: redirectUrl});\n            }\n            window.close();\n        }\n\n        if (document.readyState !== \'loading\') {\n            run();\n        } else {\n            document.addEventListener(\'DOMContentLoaded\', function () {\n                run();\n            });\n        }\n    </script>\n    </body>\n    </html>\n        '
    return HTMLResponse(content=html)